
jig-socket.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e84  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017a4  08006018  08006018  00016018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077bc  080077bc  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080077bc  080077bc  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077bc  080077bc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077bc  080077bc  000177bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077c0  080077c0  000177c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080077c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000090  08007854  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08007854  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086cb  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef4  00000000  00000000  0002878b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0002a680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  0002ae80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e049  00000000  00000000  0002b558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a776  00000000  00000000  000395a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004590b  00000000  00000000  00043d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00089622  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f30  00000000  00000000  00089674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000090 	.word	0x20000090
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006000 	.word	0x08006000

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000094 	.word	0x20000094
 80001d0:	08006000 	.word	0x08006000

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001e8:	4b16      	ldr	r3, [pc, #88]	; (8000244 <SystemInit+0x60>)
 80001ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001ee:	4a15      	ldr	r2, [pc, #84]	; (8000244 <SystemInit+0x60>)
 80001f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001f8:	4b13      	ldr	r3, [pc, #76]	; (8000248 <SystemInit+0x64>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a12      	ldr	r2, [pc, #72]	; (8000248 <SystemInit+0x64>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000204:	4b10      	ldr	r3, [pc, #64]	; (8000248 <SystemInit+0x64>)
 8000206:	2200      	movs	r2, #0
 8000208:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800020a:	4b0f      	ldr	r3, [pc, #60]	; (8000248 <SystemInit+0x64>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a0e      	ldr	r2, [pc, #56]	; (8000248 <SystemInit+0x64>)
 8000210:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000218:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800021a:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <SystemInit+0x64>)
 800021c:	4a0b      	ldr	r2, [pc, #44]	; (800024c <SystemInit+0x68>)
 800021e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <SystemInit+0x64>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a08      	ldr	r2, [pc, #32]	; (8000248 <SystemInit+0x64>)
 8000226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800022a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <SystemInit+0x64>)
 800022e:	2200      	movs	r2, #0
 8000230:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000232:	f000 f88f 	bl	8000354 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000236:	4b03      	ldr	r3, [pc, #12]	; (8000244 <SystemInit+0x60>)
 8000238:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800023c:	609a      	str	r2, [r3, #8]
#endif
}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	e000ed00 	.word	0xe000ed00
 8000248:	40023800 	.word	0x40023800
 800024c:	24003010 	.word	0x24003010

08000250 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000250:	b480      	push	{r7}
 8000252:	b087      	sub	sp, #28
 8000254:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000256:	2300      	movs	r3, #0
 8000258:	613b      	str	r3, [r7, #16]
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]
 800025e:	2302      	movs	r3, #2
 8000260:	60fb      	str	r3, [r7, #12]
 8000262:	2300      	movs	r3, #0
 8000264:	60bb      	str	r3, [r7, #8]
 8000266:	2302      	movs	r3, #2
 8000268:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800026a:	4b35      	ldr	r3, [pc, #212]	; (8000340 <SystemCoreClockUpdate+0xf0>)
 800026c:	689b      	ldr	r3, [r3, #8]
 800026e:	f003 030c 	and.w	r3, r3, #12
 8000272:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000274:	693b      	ldr	r3, [r7, #16]
 8000276:	2b08      	cmp	r3, #8
 8000278:	d011      	beq.n	800029e <SystemCoreClockUpdate+0x4e>
 800027a:	693b      	ldr	r3, [r7, #16]
 800027c:	2b08      	cmp	r3, #8
 800027e:	d844      	bhi.n	800030a <SystemCoreClockUpdate+0xba>
 8000280:	693b      	ldr	r3, [r7, #16]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d003      	beq.n	800028e <SystemCoreClockUpdate+0x3e>
 8000286:	693b      	ldr	r3, [r7, #16]
 8000288:	2b04      	cmp	r3, #4
 800028a:	d004      	beq.n	8000296 <SystemCoreClockUpdate+0x46>
 800028c:	e03d      	b.n	800030a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800028e:	4b2d      	ldr	r3, [pc, #180]	; (8000344 <SystemCoreClockUpdate+0xf4>)
 8000290:	4a2d      	ldr	r2, [pc, #180]	; (8000348 <SystemCoreClockUpdate+0xf8>)
 8000292:	601a      	str	r2, [r3, #0]
      break;
 8000294:	e03d      	b.n	8000312 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000296:	4b2b      	ldr	r3, [pc, #172]	; (8000344 <SystemCoreClockUpdate+0xf4>)
 8000298:	4a2c      	ldr	r2, [pc, #176]	; (800034c <SystemCoreClockUpdate+0xfc>)
 800029a:	601a      	str	r2, [r3, #0]
      break;
 800029c:	e039      	b.n	8000312 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800029e:	4b28      	ldr	r3, [pc, #160]	; (8000340 <SystemCoreClockUpdate+0xf0>)
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	0d9b      	lsrs	r3, r3, #22
 80002a4:	f003 0301 	and.w	r3, r3, #1
 80002a8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80002aa:	4b25      	ldr	r3, [pc, #148]	; (8000340 <SystemCoreClockUpdate+0xf0>)
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002b2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d00c      	beq.n	80002d4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002ba:	4a24      	ldr	r2, [pc, #144]	; (800034c <SystemCoreClockUpdate+0xfc>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	fbb2 f3f3 	udiv	r3, r2, r3
 80002c2:	4a1f      	ldr	r2, [pc, #124]	; (8000340 <SystemCoreClockUpdate+0xf0>)
 80002c4:	6852      	ldr	r2, [r2, #4]
 80002c6:	0992      	lsrs	r2, r2, #6
 80002c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002cc:	fb02 f303 	mul.w	r3, r2, r3
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	e00b      	b.n	80002ec <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002d4:	4a1c      	ldr	r2, [pc, #112]	; (8000348 <SystemCoreClockUpdate+0xf8>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002dc:	4a18      	ldr	r2, [pc, #96]	; (8000340 <SystemCoreClockUpdate+0xf0>)
 80002de:	6852      	ldr	r2, [r2, #4]
 80002e0:	0992      	lsrs	r2, r2, #6
 80002e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002e6:	fb02 f303 	mul.w	r3, r2, r3
 80002ea:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002ec:	4b14      	ldr	r3, [pc, #80]	; (8000340 <SystemCoreClockUpdate+0xf0>)
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	0c1b      	lsrs	r3, r3, #16
 80002f2:	f003 0303 	and.w	r3, r3, #3
 80002f6:	3301      	adds	r3, #1
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002fc:	697a      	ldr	r2, [r7, #20]
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	fbb2 f3f3 	udiv	r3, r2, r3
 8000304:	4a0f      	ldr	r2, [pc, #60]	; (8000344 <SystemCoreClockUpdate+0xf4>)
 8000306:	6013      	str	r3, [r2, #0]
      break;
 8000308:	e003      	b.n	8000312 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <SystemCoreClockUpdate+0xf4>)
 800030c:	4a0e      	ldr	r2, [pc, #56]	; (8000348 <SystemCoreClockUpdate+0xf8>)
 800030e:	601a      	str	r2, [r3, #0]
      break;
 8000310:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <SystemCoreClockUpdate+0xf0>)
 8000314:	689b      	ldr	r3, [r3, #8]
 8000316:	091b      	lsrs	r3, r3, #4
 8000318:	f003 030f 	and.w	r3, r3, #15
 800031c:	4a0c      	ldr	r2, [pc, #48]	; (8000350 <SystemCoreClockUpdate+0x100>)
 800031e:	5cd3      	ldrb	r3, [r2, r3]
 8000320:	b2db      	uxtb	r3, r3
 8000322:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000324:	4b07      	ldr	r3, [pc, #28]	; (8000344 <SystemCoreClockUpdate+0xf4>)
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	fa22 f303 	lsr.w	r3, r2, r3
 800032e:	4a05      	ldr	r2, [pc, #20]	; (8000344 <SystemCoreClockUpdate+0xf4>)
 8000330:	6013      	str	r3, [r2, #0]
}
 8000332:	bf00      	nop
 8000334:	371c      	adds	r7, #28
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40023800 	.word	0x40023800
 8000344:	20000000 	.word	0x20000000
 8000348:	00f42400 	.word	0x00f42400
 800034c:	017d7840 	.word	0x017d7840
 8000350:	20000004 	.word	0x20000004

08000354 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000358:	4b23      	ldr	r3, [pc, #140]	; (80003e8 <SetSysClock+0x94>)
 800035a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800035c:	4a22      	ldr	r2, [pc, #136]	; (80003e8 <SetSysClock+0x94>)
 800035e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000362:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000364:	4b21      	ldr	r3, [pc, #132]	; (80003ec <SetSysClock+0x98>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a20      	ldr	r2, [pc, #128]	; (80003ec <SetSysClock+0x98>)
 800036a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800036e:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000370:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <SetSysClock+0x94>)
 8000372:	4a1d      	ldr	r2, [pc, #116]	; (80003e8 <SetSysClock+0x94>)
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000378:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <SetSysClock+0x94>)
 800037a:	4a1b      	ldr	r2, [pc, #108]	; (80003e8 <SetSysClock+0x94>)
 800037c:	689b      	ldr	r3, [r3, #8]
 800037e:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000380:	4b19      	ldr	r3, [pc, #100]	; (80003e8 <SetSysClock+0x94>)
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	4a18      	ldr	r2, [pc, #96]	; (80003e8 <SetSysClock+0x94>)
 8000386:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800038a:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800038c:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <SetSysClock+0x94>)
 800038e:	4a18      	ldr	r2, [pc, #96]	; (80003f0 <SetSysClock+0x9c>)
 8000390:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <SetSysClock+0x94>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <SetSysClock+0x94>)
 8000398:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800039c:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800039e:	bf00      	nop
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <SetSysClock+0x94>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d0f9      	beq.n	80003a0 <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SetSysClock+0xa0>)
 80003ae:	f240 6202 	movw	r2, #1538	; 0x602
 80003b2:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <SetSysClock+0x94>)
 80003b6:	689b      	ldr	r3, [r3, #8]
 80003b8:	4a0b      	ldr	r2, [pc, #44]	; (80003e8 <SetSysClock+0x94>)
 80003ba:	f023 0303 	bic.w	r3, r3, #3
 80003be:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <SetSysClock+0x94>)
 80003c2:	689b      	ldr	r3, [r3, #8]
 80003c4:	4a08      	ldr	r2, [pc, #32]	; (80003e8 <SetSysClock+0x94>)
 80003c6:	f043 0302 	orr.w	r3, r3, #2
 80003ca:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003cc:	bf00      	nop
 80003ce:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <SetSysClock+0x94>)
 80003d0:	689b      	ldr	r3, [r3, #8]
 80003d2:	f003 030c 	and.w	r3, r3, #12
 80003d6:	2b08      	cmp	r3, #8
 80003d8:	d1f9      	bne.n	80003ce <SetSysClock+0x7a>
}
 80003da:	bf00      	nop
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40023800 	.word	0x40023800
 80003ec:	40007000 	.word	0x40007000
 80003f0:	08015410 	.word	0x08015410
 80003f4:	40023c00 	.word	0x40023c00

080003f8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b087      	sub	sp, #28
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
 8000406:	2300      	movs	r3, #0
 8000408:	613b      	str	r3, [r7, #16]
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
 8000412:	e076      	b.n	8000502 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000414:	2201      	movs	r2, #1
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	fa02 f303 	lsl.w	r3, r2, r3
 800041c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	693a      	ldr	r2, [r7, #16]
 8000424:	4013      	ands	r3, r2
 8000426:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000428:	68fa      	ldr	r2, [r7, #12]
 800042a:	693b      	ldr	r3, [r7, #16]
 800042c:	429a      	cmp	r2, r3
 800042e:	d165      	bne.n	80004fc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	005b      	lsls	r3, r3, #1
 8000438:	2103      	movs	r1, #3
 800043a:	fa01 f303 	lsl.w	r3, r1, r3
 800043e:	43db      	mvns	r3, r3
 8000440:	401a      	ands	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	791b      	ldrb	r3, [r3, #4]
 800044e:	4619      	mov	r1, r3
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	fa01 f303 	lsl.w	r3, r1, r3
 8000458:	431a      	orrs	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	791b      	ldrb	r3, [r3, #4]
 8000462:	2b01      	cmp	r3, #1
 8000464:	d003      	beq.n	800046e <GPIO_Init+0x76>
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	791b      	ldrb	r3, [r3, #4]
 800046a:	2b02      	cmp	r3, #2
 800046c:	d12e      	bne.n	80004cc <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	689a      	ldr	r2, [r3, #8]
 8000472:	697b      	ldr	r3, [r7, #20]
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	2103      	movs	r1, #3
 8000478:	fa01 f303 	lsl.w	r3, r1, r3
 800047c:	43db      	mvns	r3, r3
 800047e:	401a      	ands	r2, r3
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	689a      	ldr	r2, [r3, #8]
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	795b      	ldrb	r3, [r3, #5]
 800048c:	4619      	mov	r1, r3
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	fa01 f303 	lsl.w	r3, r1, r3
 8000496:	431a      	orrs	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	685a      	ldr	r2, [r3, #4]
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	4619      	mov	r1, r3
 80004a6:	2301      	movs	r3, #1
 80004a8:	408b      	lsls	r3, r1
 80004aa:	43db      	mvns	r3, r3
 80004ac:	401a      	ands	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	683a      	ldr	r2, [r7, #0]
 80004b8:	7992      	ldrb	r2, [r2, #6]
 80004ba:	4611      	mov	r1, r2
 80004bc:	697a      	ldr	r2, [r7, #20]
 80004be:	b292      	uxth	r2, r2
 80004c0:	fa01 f202 	lsl.w	r2, r1, r2
 80004c4:	b292      	uxth	r2, r2
 80004c6:	431a      	orrs	r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	68da      	ldr	r2, [r3, #12]
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	2103      	movs	r1, #3
 80004d8:	fa01 f303 	lsl.w	r3, r1, r3
 80004dc:	43db      	mvns	r3, r3
 80004de:	401a      	ands	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	68da      	ldr	r2, [r3, #12]
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	79db      	ldrb	r3, [r3, #7]
 80004ec:	4619      	mov	r1, r3
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	431a      	orrs	r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	3301      	adds	r3, #1
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	2b0f      	cmp	r3, #15
 8000506:	d985      	bls.n	8000414 <GPIO_Init+0x1c>
    }
  }
}
 8000508:	bf00      	nop
 800050a:	bf00      	nop
 800050c:	371c      	adds	r7, #28
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000516:	b480      	push	{r7}
 8000518:	b085      	sub	sp, #20
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	460b      	mov	r3, r1
 8000520:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000522:	2300      	movs	r3, #0
 8000524:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	691a      	ldr	r2, [r3, #16]
 800052a:	887b      	ldrh	r3, [r7, #2]
 800052c:	4013      	ands	r3, r2
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000532:	2301      	movs	r3, #1
 8000534:	73fb      	strb	r3, [r7, #15]
 8000536:	e001      	b.n	800053c <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000538:	2300      	movs	r3, #0
 800053a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800053c:	7bfb      	ldrb	r3, [r7, #15]
}
 800053e:	4618      	mov	r0, r3
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr

0800054a <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800054a:	b480      	push	{r7}
 800054c:	b083      	sub	sp, #12
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
 8000552:	460b      	mov	r3, r1
 8000554:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	887a      	ldrh	r2, [r7, #2]
 800055a:	831a      	strh	r2, [r3, #24]
}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	887a      	ldrh	r2, [r7, #2]
 8000578:	835a      	strh	r2, [r3, #26]
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000586:	b480      	push	{r7}
 8000588:	b085      	sub	sp, #20
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
 800058e:	460b      	mov	r3, r1
 8000590:	807b      	strh	r3, [r7, #2]
 8000592:	4613      	mov	r3, r2
 8000594:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800059e:	787a      	ldrb	r2, [r7, #1]
 80005a0:	887b      	ldrh	r3, [r7, #2]
 80005a2:	f003 0307 	and.w	r3, r3, #7
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ac:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005ae:	887b      	ldrh	r3, [r7, #2]
 80005b0:	08db      	lsrs	r3, r3, #3
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	3208      	adds	r2, #8
 80005ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005be:	887b      	ldrh	r3, [r7, #2]
 80005c0:	f003 0307 	and.w	r3, r3, #7
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	210f      	movs	r1, #15
 80005c8:	fa01 f303 	lsl.w	r3, r1, r3
 80005cc:	43db      	mvns	r3, r3
 80005ce:	8879      	ldrh	r1, [r7, #2]
 80005d0:	08c9      	lsrs	r1, r1, #3
 80005d2:	b289      	uxth	r1, r1
 80005d4:	4608      	mov	r0, r1
 80005d6:	ea02 0103 	and.w	r1, r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f100 0208 	add.w	r2, r0, #8
 80005e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80005e4:	887b      	ldrh	r3, [r7, #2]
 80005e6:	08db      	lsrs	r3, r3, #3
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	461a      	mov	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3208      	adds	r2, #8
 80005f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	4313      	orrs	r3, r2
 80005f8:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80005fa:	887b      	ldrh	r3, [r7, #2]
 80005fc:	08db      	lsrs	r3, r3, #3
 80005fe:	b29b      	uxth	r3, r3
 8000600:	461a      	mov	r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	3208      	adds	r2, #8
 8000606:	68b9      	ldr	r1, [r7, #8]
 8000608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000618:	b480      	push	{r7}
 800061a:	b089      	sub	sp, #36	; 0x24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
 800062c:	2302      	movs	r3, #2
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	2302      	movs	r3, #2
 8000636:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000638:	4b4a      	ldr	r3, [pc, #296]	; (8000764 <RCC_GetClocksFreq+0x14c>)
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	f003 030c 	and.w	r3, r3, #12
 8000640:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000642:	69bb      	ldr	r3, [r7, #24]
 8000644:	2b08      	cmp	r3, #8
 8000646:	d011      	beq.n	800066c <RCC_GetClocksFreq+0x54>
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	2b08      	cmp	r3, #8
 800064c:	d844      	bhi.n	80006d8 <RCC_GetClocksFreq+0xc0>
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d003      	beq.n	800065c <RCC_GetClocksFreq+0x44>
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	2b04      	cmp	r3, #4
 8000658:	d004      	beq.n	8000664 <RCC_GetClocksFreq+0x4c>
 800065a:	e03d      	b.n	80006d8 <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a42      	ldr	r2, [pc, #264]	; (8000768 <RCC_GetClocksFreq+0x150>)
 8000660:	601a      	str	r2, [r3, #0]
    break;
 8000662:	e03d      	b.n	80006e0 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a41      	ldr	r2, [pc, #260]	; (800076c <RCC_GetClocksFreq+0x154>)
 8000668:	601a      	str	r2, [r3, #0]
    break;
 800066a:	e039      	b.n	80006e0 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800066c:	4b3d      	ldr	r3, [pc, #244]	; (8000764 <RCC_GetClocksFreq+0x14c>)
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	0d9b      	lsrs	r3, r3, #22
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000678:	4b3a      	ldr	r3, [pc, #232]	; (8000764 <RCC_GetClocksFreq+0x14c>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000680:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d00c      	beq.n	80006a2 <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000688:	4a38      	ldr	r2, [pc, #224]	; (800076c <RCC_GetClocksFreq+0x154>)
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000690:	4a34      	ldr	r2, [pc, #208]	; (8000764 <RCC_GetClocksFreq+0x14c>)
 8000692:	6852      	ldr	r2, [r2, #4]
 8000694:	0992      	lsrs	r2, r2, #6
 8000696:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800069a:	fb02 f303 	mul.w	r3, r2, r3
 800069e:	61fb      	str	r3, [r7, #28]
 80006a0:	e00b      	b.n	80006ba <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80006a2:	4a31      	ldr	r2, [pc, #196]	; (8000768 <RCC_GetClocksFreq+0x150>)
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006aa:	4a2e      	ldr	r2, [pc, #184]	; (8000764 <RCC_GetClocksFreq+0x14c>)
 80006ac:	6852      	ldr	r2, [r2, #4]
 80006ae:	0992      	lsrs	r2, r2, #6
 80006b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80006ba:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <RCC_GetClocksFreq+0x14c>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	0c1b      	lsrs	r3, r3, #16
 80006c0:	f003 0303 	and.w	r3, r3, #3
 80006c4:	3301      	adds	r3, #1
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80006ca:	69fa      	ldr	r2, [r7, #28]
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	601a      	str	r2, [r3, #0]
    break;
 80006d6:	e003      	b.n	80006e0 <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a23      	ldr	r2, [pc, #140]	; (8000768 <RCC_GetClocksFreq+0x150>)
 80006dc:	601a      	str	r2, [r3, #0]
    break;
 80006de:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80006e0:	4b20      	ldr	r3, [pc, #128]	; (8000764 <RCC_GetClocksFreq+0x14c>)
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006e8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	091b      	lsrs	r3, r3, #4
 80006ee:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80006f0:	4a1f      	ldr	r2, [pc, #124]	; (8000770 <RCC_GetClocksFreq+0x158>)
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	4413      	add	r3, r2
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	40da      	lsrs	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <RCC_GetClocksFreq+0x14c>)
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000710:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000712:	69bb      	ldr	r3, [r7, #24]
 8000714:	0a9b      	lsrs	r3, r3, #10
 8000716:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000718:	4a15      	ldr	r2, [pc, #84]	; (8000770 <RCC_GetClocksFreq+0x158>)
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	4413      	add	r3, r2
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	685a      	ldr	r2, [r3, #4]
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	40da      	lsrs	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <RCC_GetClocksFreq+0x14c>)
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000738:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	0b5b      	lsrs	r3, r3, #13
 800073e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000740:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <RCC_GetClocksFreq+0x158>)
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	4413      	add	r3, r2
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	685a      	ldr	r2, [r3, #4]
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	40da      	lsrs	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	60da      	str	r2, [r3, #12]
}
 8000758:	bf00      	nop
 800075a:	3724      	adds	r7, #36	; 0x24
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	40023800 	.word	0x40023800
 8000768:	00f42400 	.word	0x00f42400
 800076c:	017d7840 	.word	0x017d7840
 8000770:	20000014 	.word	0x20000014

08000774 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d006      	beq.n	8000794 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800078a:	4909      	ldr	r1, [pc, #36]	; (80007b0 <RCC_AHB1PeriphClockCmd+0x3c>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4313      	orrs	r3, r2
 8000790:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000792:	e006      	b.n	80007a2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	43db      	mvns	r3, r3
 800079c:	4904      	ldr	r1, [pc, #16]	; (80007b0 <RCC_AHB1PeriphClockCmd+0x3c>)
 800079e:	4013      	ands	r3, r2
 80007a0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800

080007b4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007c0:	78fb      	ldrb	r3, [r7, #3]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d006      	beq.n	80007d4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <RCC_APB2PeriphClockCmd+0x3c>)
 80007c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007ca:	4909      	ldr	r1, [pc, #36]	; (80007f0 <RCC_APB2PeriphClockCmd+0x3c>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4313      	orrs	r3, r2
 80007d0:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80007d2:	e006      	b.n	80007e2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <RCC_APB2PeriphClockCmd+0x3c>)
 80007d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	43db      	mvns	r3, r3
 80007dc:	4904      	ldr	r1, [pc, #16]	; (80007f0 <RCC_APB2PeriphClockCmd+0x3c>)
 80007de:	4013      	ands	r3, r2
 80007e0:	644b      	str	r3, [r1, #68]	; 0x44
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000800:	78fb      	ldrb	r3, [r7, #3]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d006      	beq.n	8000814 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <RCC_APB2PeriphResetCmd+0x3c>)
 8000808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800080a:	4909      	ldr	r1, [pc, #36]	; (8000830 <RCC_APB2PeriphResetCmd+0x3c>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4313      	orrs	r3, r2
 8000810:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000812:	e006      	b.n	8000822 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <RCC_APB2PeriphResetCmd+0x3c>)
 8000816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	43db      	mvns	r3, r3
 800081c:	4904      	ldr	r1, [pc, #16]	; (8000830 <RCC_APB2PeriphResetCmd+0x3c>)
 800081e:	4013      	ands	r3, r2
 8000820:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000848:	89fb      	ldrh	r3, [r7, #14]
 800084a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800084e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	881a      	ldrh	r2, [r3, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	885b      	ldrh	r3, [r3, #2]
 8000858:	4313      	orrs	r3, r2
 800085a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000860:	4313      	orrs	r3, r2
 8000862:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000868:	4313      	orrs	r3, r2
 800086a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000870:	4313      	orrs	r3, r2
 8000872:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000878:	4313      	orrs	r3, r2
 800087a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000880:	4313      	orrs	r3, r2
 8000882:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000888:	4313      	orrs	r3, r2
 800088a:	b29a      	uxth	r2, r3
 800088c:	89fb      	ldrh	r3, [r7, #14]
 800088e:	4313      	orrs	r3, r2
 8000890:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	89fa      	ldrh	r2, [r7, #14]
 8000896:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	8b9b      	ldrh	r3, [r3, #28]
 800089c:	b29b      	uxth	r3, r3
 800089e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	8a1a      	ldrh	r2, [r3, #16]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	821a      	strh	r2, [r3, #16]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d008      	beq.n	80008e0 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d8:	b29a      	uxth	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 80008de:	e007      	b.n	80008f0 <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	801a      	strh	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <buttonInit>:
/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

void buttonInit(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioInitStruct;

	//---------------------------------------------------------------------------B3
	//1. Bat xung clock
	RCC_AHB1PeriphClockCmd(BUTTON_1_2_GPIO_RCC, ENABLE);
 8000902:	2101      	movs	r1, #1
 8000904:	2002      	movs	r0, #2
 8000906:	f7ff ff35 	bl	8000774 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(BUTTON_3_4_GPIO_RCC, ENABLE);
 800090a:	2101      	movs	r1, #1
 800090c:	2004      	movs	r0, #4
 800090e:	f7ff ff31 	bl	8000774 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(BUTTON_5_GPIO_RCC, ENABLE);
 8000912:	2101      	movs	r1, #1
 8000914:	2001      	movs	r0, #1
 8000916:	f7ff ff2d 	bl	8000774 <RCC_AHB1PeriphClockCmd>
	//RCC_AHB1PeriphClockCmd(LED_BUTTON_PORT, ENABLE);
	//2. Config GPIO
	gpioInitStruct.GPIO_Mode = GPIO_Mode_IN;
 800091a:	2300      	movs	r3, #0
 800091c:	713b      	strb	r3, [r7, #4]
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 800091e:	2302      	movs	r3, #2
 8000920:	717b      	strb	r3, [r7, #5]
	gpioInitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000922:	2301      	movs	r3, #1
 8000924:	71fb      	strb	r3, [r7, #7]

	gpioInitStruct.GPIO_Pin = BUTTON_1_PIN|BUTTON_2_PIN;
 8000926:	2306      	movs	r3, #6
 8000928:	603b      	str	r3, [r7, #0]
	GPIO_Init(BUTTON_1_2_PORT, &gpioInitStruct);
 800092a:	463b      	mov	r3, r7
 800092c:	4619      	mov	r1, r3
 800092e:	480e      	ldr	r0, [pc, #56]	; (8000968 <buttonInit+0x6c>)
 8000930:	f7ff fd62 	bl	80003f8 <GPIO_Init>

	gpioInitStruct.GPIO_Pin = BUTTON_3_PIN|BUTTON_4_PIN;
 8000934:	2309      	movs	r3, #9
 8000936:	603b      	str	r3, [r7, #0]
	GPIO_Init(BUTTON_3_4_PORT, &gpioInitStruct);
 8000938:	463b      	mov	r3, r7
 800093a:	4619      	mov	r1, r3
 800093c:	480b      	ldr	r0, [pc, #44]	; (800096c <buttonInit+0x70>)
 800093e:	f7ff fd5b 	bl	80003f8 <GPIO_Init>

	gpioInitStruct.GPIO_Pin = BUTTON_5_PIN;
 8000942:	2320      	movs	r3, #32
 8000944:	603b      	str	r3, [r7, #0]
	GPIO_Init(BUTTON_5_PORT, &gpioInitStruct);
 8000946:	463b      	mov	r3, r7
 8000948:	4619      	mov	r1, r3
 800094a:	4809      	ldr	r0, [pc, #36]	; (8000970 <buttonInit+0x74>)
 800094c:	f7ff fd54 	bl	80003f8 <GPIO_Init>

	gpioInitStruct.GPIO_Pin = LED_BUTTON_PIN;
 8000950:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000954:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_BUTTON_PORT, &gpioInitStruct);
 8000956:	463b      	mov	r3, r7
 8000958:	4619      	mov	r1, r3
 800095a:	4803      	ldr	r0, [pc, #12]	; (8000968 <buttonInit+0x6c>)
 800095c:	f7ff fd4c 	bl	80003f8 <GPIO_Init>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40020400 	.word	0x40020400
 800096c:	40020800 	.word	0x40020800
 8000970:	40020000 	.word	0x40020000

08000974 <dwCalculatorTime>:
	}else
		state = 0;
	return state;
}
static uint32_t dwCalculatorTime(uint32_t dwTimeInit,uint32_t dwTimeCurrent)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
	if(dwTimeCurrent >= dwTimeInit)
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	429a      	cmp	r2, r3
 8000984:	d303      	bcc.n	800098e <dwCalculatorTime+0x1a>
	{
		return (dwTimeCurrent - dwTimeInit);
 8000986:	683a      	ldr	r2, [r7, #0]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	e003      	b.n	8000996 <dwCalculatorTime+0x22>
	}else
	{
		return (0xFFFFFFFF + dwTimeCurrent - dwTimeInit);
 800098e:	683a      	ldr	r2, [r7, #0]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	3b01      	subs	r3, #1
	}
}
 8000996:	4618      	mov	r0, r3
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
	...

080009a4 <processEventButton>:

ValueKey_e processEventButton(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
	ValueKey_e valueKeyTemp = NOKEY;
 80009aa:	2300      	movs	r3, #0
 80009ac:	71fb      	strb	r3, [r7, #7]

	GetEventButton();
 80009ae:	f000 f923 	bl	8000bf8 <GetEventButton>

	switch(button1.buttonEven)
 80009b2:	4b8c      	ldr	r3, [pc, #560]	; (8000be4 <processEventButton+0x240>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	2b05      	cmp	r3, #5
 80009ba:	d833      	bhi.n	8000a24 <processEventButton+0x80>
 80009bc:	a201      	add	r2, pc, #4	; (adr r2, 80009c4 <processEventButton+0x20>)
 80009be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c2:	bf00      	nop
 80009c4:	080009e9 	.word	0x080009e9
 80009c8:	080009f5 	.word	0x080009f5
 80009cc:	08000a01 	.word	0x08000a01
 80009d0:	08000a0d 	.word	0x08000a0d
 80009d4:	08000a19 	.word	0x08000a19
 80009d8:	080009dd 	.word	0x080009dd
	{
	case EVENT_OF_BUTTON_HOLD_500MS:
		valueKeyTemp = DOWN_HOLD;
 80009dc:	230e      	movs	r3, #14
 80009de:	71fb      	strb	r3, [r7, #7]
		button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 80009e0:	4b80      	ldr	r3, [pc, #512]	; (8000be4 <processEventButton+0x240>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
		break;
 80009e6:	e021      	b.n	8000a2c <processEventButton+0x88>
	case EVENT_OF_BUTTON_PRESS_1_TIMES:
		valueKeyTemp = DOWN;
 80009e8:	2309      	movs	r3, #9
 80009ea:	71fb      	strb	r3, [r7, #7]
		button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 80009ec:	4b7d      	ldr	r3, [pc, #500]	; (8000be4 <processEventButton+0x240>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
		break;
 80009f2:	e01b      	b.n	8000a2c <processEventButton+0x88>
	case EVENT_OF_BUTTON_PRESS_2_TIMES:
		valueKeyTemp = DOWN_DOUBLE;
 80009f4:	230a      	movs	r3, #10
 80009f6:	71fb      	strb	r3, [r7, #7]
		button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 80009f8:	4b7a      	ldr	r3, [pc, #488]	; (8000be4 <processEventButton+0x240>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
		break;
 80009fe:	e015      	b.n	8000a2c <processEventButton+0x88>
	case EVENT_OF_BUTTON_PRESS_3_TIMES:
		valueKeyTemp = DOWN_TRIPLE;
 8000a00:	230b      	movs	r3, #11
 8000a02:	71fb      	strb	r3, [r7, #7]
		button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000a04:	4b77      	ldr	r3, [pc, #476]	; (8000be4 <processEventButton+0x240>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
		break;
 8000a0a:	e00f      	b.n	8000a2c <processEventButton+0x88>
	case EVENT_OF_BUTTON_PRESS_4_TIMES:
		valueKeyTemp = DOWN_QUADRUPLE;
 8000a0c:	230c      	movs	r3, #12
 8000a0e:	71fb      	strb	r3, [r7, #7]
		button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000a10:	4b74      	ldr	r3, [pc, #464]	; (8000be4 <processEventButton+0x240>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
		break;
 8000a16:	e009      	b.n	8000a2c <processEventButton+0x88>
	case EVENT_OF_BUTTON_PRESS_5_TIMES:
		valueKeyTemp = DOWN_QUINTUPLE;
 8000a18:	230d      	movs	r3, #13
 8000a1a:	71fb      	strb	r3, [r7, #7]
		button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000a1c:	4b71      	ldr	r3, [pc, #452]	; (8000be4 <processEventButton+0x240>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
		break;
 8000a22:	e003      	b.n	8000a2c <processEventButton+0x88>
	default:
		button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000a24:	4b6f      	ldr	r3, [pc, #444]	; (8000be4 <processEventButton+0x240>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
		break;
 8000a2a:	bf00      	nop
	}
	switch(button2.buttonEven)
 8000a2c:	4b6e      	ldr	r3, [pc, #440]	; (8000be8 <processEventButton+0x244>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	3b01      	subs	r3, #1
 8000a32:	2b05      	cmp	r3, #5
 8000a34:	d828      	bhi.n	8000a88 <processEventButton+0xe4>
 8000a36:	a201      	add	r2, pc, #4	; (adr r2, 8000a3c <processEventButton+0x98>)
 8000a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3c:	08000a5d 	.word	0x08000a5d
 8000a40:	08000a69 	.word	0x08000a69
 8000a44:	08000a71 	.word	0x08000a71
 8000a48:	08000a79 	.word	0x08000a79
 8000a4c:	08000a81 	.word	0x08000a81
 8000a50:	08000a55 	.word	0x08000a55
	{
	case EVENT_OF_BUTTON_HOLD_500MS:
		button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000a54:	4b64      	ldr	r3, [pc, #400]	; (8000be8 <processEventButton+0x244>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
		break;
 8000a5a:	e019      	b.n	8000a90 <processEventButton+0xec>
	case EVENT_OF_BUTTON_PRESS_1_TIMES:
		valueKeyTemp = RIGHT;
 8000a5c:	2310      	movs	r3, #16
 8000a5e:	71fb      	strb	r3, [r7, #7]
		button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000a60:	4b61      	ldr	r3, [pc, #388]	; (8000be8 <processEventButton+0x244>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
		break;
 8000a66:	e013      	b.n	8000a90 <processEventButton+0xec>
	case EVENT_OF_BUTTON_PRESS_2_TIMES:

		button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000a68:	4b5f      	ldr	r3, [pc, #380]	; (8000be8 <processEventButton+0x244>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
		break;
 8000a6e:	e00f      	b.n	8000a90 <processEventButton+0xec>
	case EVENT_OF_BUTTON_PRESS_3_TIMES:

		button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000a70:	4b5d      	ldr	r3, [pc, #372]	; (8000be8 <processEventButton+0x244>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
		break;
 8000a76:	e00b      	b.n	8000a90 <processEventButton+0xec>
	case EVENT_OF_BUTTON_PRESS_4_TIMES:
		button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000a78:	4b5b      	ldr	r3, [pc, #364]	; (8000be8 <processEventButton+0x244>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
		break;
 8000a7e:	e007      	b.n	8000a90 <processEventButton+0xec>
	case EVENT_OF_BUTTON_PRESS_5_TIMES:
		button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000a80:	4b59      	ldr	r3, [pc, #356]	; (8000be8 <processEventButton+0x244>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
		break;
 8000a86:	e003      	b.n	8000a90 <processEventButton+0xec>
	default:
		button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000a88:	4b57      	ldr	r3, [pc, #348]	; (8000be8 <processEventButton+0x244>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
		break;
 8000a8e:	bf00      	nop
	}
	switch(button4.buttonEven)
 8000a90:	4b56      	ldr	r3, [pc, #344]	; (8000bec <processEventButton+0x248>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	2b05      	cmp	r3, #5
 8000a98:	d828      	bhi.n	8000aec <processEventButton+0x148>
 8000a9a:	a201      	add	r2, pc, #4	; (adr r2, 8000aa0 <processEventButton+0xfc>)
 8000a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa0:	08000ac1 	.word	0x08000ac1
 8000aa4:	08000acd 	.word	0x08000acd
 8000aa8:	08000ad5 	.word	0x08000ad5
 8000aac:	08000add 	.word	0x08000add
 8000ab0:	08000ae5 	.word	0x08000ae5
 8000ab4:	08000ab9 	.word	0x08000ab9
	{
	case EVENT_OF_BUTTON_HOLD_500MS:
		button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000ab8:	4b4c      	ldr	r3, [pc, #304]	; (8000bec <processEventButton+0x248>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
		break;
 8000abe:	e019      	b.n	8000af4 <processEventButton+0x150>
	case EVENT_OF_BUTTON_PRESS_1_TIMES:
		valueKeyTemp = LEFT;
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	71fb      	strb	r3, [r7, #7]
		button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000ac4:	4b49      	ldr	r3, [pc, #292]	; (8000bec <processEventButton+0x248>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
		break;
 8000aca:	e013      	b.n	8000af4 <processEventButton+0x150>
	case EVENT_OF_BUTTON_PRESS_2_TIMES:
		button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000acc:	4b47      	ldr	r3, [pc, #284]	; (8000bec <processEventButton+0x248>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
		break;
 8000ad2:	e00f      	b.n	8000af4 <processEventButton+0x150>
	case EVENT_OF_BUTTON_PRESS_3_TIMES:
		button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000ad4:	4b45      	ldr	r3, [pc, #276]	; (8000bec <processEventButton+0x248>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
		break;
 8000ada:	e00b      	b.n	8000af4 <processEventButton+0x150>
	case EVENT_OF_BUTTON_PRESS_4_TIMES:
		button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000adc:	4b43      	ldr	r3, [pc, #268]	; (8000bec <processEventButton+0x248>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
		break;
 8000ae2:	e007      	b.n	8000af4 <processEventButton+0x150>
	case EVENT_OF_BUTTON_PRESS_5_TIMES:
		button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000ae4:	4b41      	ldr	r3, [pc, #260]	; (8000bec <processEventButton+0x248>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
		break;
 8000aea:	e003      	b.n	8000af4 <processEventButton+0x150>
	default:
		button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000aec:	4b3f      	ldr	r3, [pc, #252]	; (8000bec <processEventButton+0x248>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
		break;
 8000af2:	bf00      	nop
	}


	switch(button3.buttonEven)
 8000af4:	4b3e      	ldr	r3, [pc, #248]	; (8000bf0 <processEventButton+0x24c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	2b05      	cmp	r3, #5
 8000afc:	d832      	bhi.n	8000b64 <processEventButton+0x1c0>
 8000afe:	a201      	add	r2, pc, #4	; (adr r2, 8000b04 <processEventButton+0x160>)
 8000b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b04:	08000b29 	.word	0x08000b29
 8000b08:	08000b35 	.word	0x08000b35
 8000b0c:	08000b41 	.word	0x08000b41
 8000b10:	08000b4d 	.word	0x08000b4d
 8000b14:	08000b59 	.word	0x08000b59
 8000b18:	08000b1d 	.word	0x08000b1d
	{
	case EVENT_OF_BUTTON_HOLD_500MS:
		valueKeyTemp = UP_HOLD;
 8000b1c:	2308      	movs	r3, #8
 8000b1e:	71fb      	strb	r3, [r7, #7]
		button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000b20:	4b33      	ldr	r3, [pc, #204]	; (8000bf0 <processEventButton+0x24c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
		break;
 8000b26:	e021      	b.n	8000b6c <processEventButton+0x1c8>
	case EVENT_OF_BUTTON_PRESS_1_TIMES:
		valueKeyTemp = UP;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	71fb      	strb	r3, [r7, #7]
		button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000b2c:	4b30      	ldr	r3, [pc, #192]	; (8000bf0 <processEventButton+0x24c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
		break;
 8000b32:	e01b      	b.n	8000b6c <processEventButton+0x1c8>
	case EVENT_OF_BUTTON_PRESS_2_TIMES:
		valueKeyTemp = UP_DOUBLE;
 8000b34:	2304      	movs	r3, #4
 8000b36:	71fb      	strb	r3, [r7, #7]
		button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000b38:	4b2d      	ldr	r3, [pc, #180]	; (8000bf0 <processEventButton+0x24c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
		break;
 8000b3e:	e015      	b.n	8000b6c <processEventButton+0x1c8>
	case EVENT_OF_BUTTON_PRESS_3_TIMES:
		valueKeyTemp = UP_TRIPLE;
 8000b40:	2305      	movs	r3, #5
 8000b42:	71fb      	strb	r3, [r7, #7]
		button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000b44:	4b2a      	ldr	r3, [pc, #168]	; (8000bf0 <processEventButton+0x24c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
		break;
 8000b4a:	e00f      	b.n	8000b6c <processEventButton+0x1c8>
	case EVENT_OF_BUTTON_PRESS_4_TIMES:
		valueKeyTemp = UP_QUADRUPLE;
 8000b4c:	2306      	movs	r3, #6
 8000b4e:	71fb      	strb	r3, [r7, #7]
		button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000b50:	4b27      	ldr	r3, [pc, #156]	; (8000bf0 <processEventButton+0x24c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
		break;
 8000b56:	e009      	b.n	8000b6c <processEventButton+0x1c8>
	case EVENT_OF_BUTTON_PRESS_5_TIMES:
		valueKeyTemp = UP_QUINTUPLE;
 8000b58:	2307      	movs	r3, #7
 8000b5a:	71fb      	strb	r3, [r7, #7]
		button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000b5c:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <processEventButton+0x24c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
		break;
 8000b62:	e003      	b.n	8000b6c <processEventButton+0x1c8>
	default:
		button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <processEventButton+0x24c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
		break;
 8000b6a:	bf00      	nop
	}


	switch(button5.buttonEven)
 8000b6c:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <processEventButton+0x250>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	2b05      	cmp	r3, #5
 8000b74:	d82c      	bhi.n	8000bd0 <processEventButton+0x22c>
 8000b76:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <processEventButton+0x1d8>)
 8000b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7c:	08000ba1 	.word	0x08000ba1
 8000b80:	08000bad 	.word	0x08000bad
 8000b84:	08000bb9 	.word	0x08000bb9
 8000b88:	08000bc1 	.word	0x08000bc1
 8000b8c:	08000bc9 	.word	0x08000bc9
 8000b90:	08000b95 	.word	0x08000b95
	{
	case EVENT_OF_BUTTON_HOLD_500MS:
		valueKeyTemp = RETURN;
 8000b94:	2311      	movs	r3, #17
 8000b96:	71fb      	strb	r3, [r7, #7]
		button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <processEventButton+0x250>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
		break;
 8000b9e:	e01b      	b.n	8000bd8 <processEventButton+0x234>
	case EVENT_OF_BUTTON_PRESS_1_TIMES:
		valueKeyTemp = SELECT;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	71fb      	strb	r3, [r7, #7]
		button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <processEventButton+0x250>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
		break;
 8000baa:	e015      	b.n	8000bd8 <processEventButton+0x234>
	case EVENT_OF_BUTTON_PRESS_2_TIMES:
		valueKeyTemp = SELECT_DOUBLE;
 8000bac:	2302      	movs	r3, #2
 8000bae:	71fb      	strb	r3, [r7, #7]
		button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000bb0:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <processEventButton+0x250>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
		break;
 8000bb6:	e00f      	b.n	8000bd8 <processEventButton+0x234>
	case EVENT_OF_BUTTON_PRESS_3_TIMES:
		button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <processEventButton+0x250>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
		break;
 8000bbe:	e00b      	b.n	8000bd8 <processEventButton+0x234>
	case EVENT_OF_BUTTON_PRESS_4_TIMES:
		button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <processEventButton+0x250>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
		break;
 8000bc6:	e007      	b.n	8000bd8 <processEventButton+0x234>
	case EVENT_OF_BUTTON_PRESS_5_TIMES:
		button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <processEventButton+0x250>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
		break;
 8000bce:	e003      	b.n	8000bd8 <processEventButton+0x234>
	default:
		button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <processEventButton+0x250>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
		break;
 8000bd6:	bf00      	nop
	}
	return valueKeyTemp;
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200000ac 	.word	0x200000ac
 8000be8:	200000bc 	.word	0x200000bc
 8000bec:	200000dc 	.word	0x200000dc
 8000bf0:	200000cc 	.word	0x200000cc
 8000bf4:	200000ec 	.word	0x200000ec

08000bf8 <GetEventButton>:

static void GetEventButton(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0

	u32 dwDeltaTime = 0,dwTimeNow;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
	dwTimeNow = GetMilSecTick();
 8000c02:	f004 fcc1 	bl	8005588 <GetMilSecTick>
 8000c06:	6038      	str	r0, [r7, #0]
	if(button1.buttonEven ==EVENT_OF_BUTTON_NOCLICK)
 8000c08:	4b4f      	ldr	r3, [pc, #316]	; (8000d48 <GetEventButton+0x150>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	f040 80d3 	bne.w	8000db8 <GetEventButton+0x1c0>
	{
		//Khi nut nhan duoc nhan
			if(BTN1_GET == 0)
 8000c12:	2102      	movs	r1, #2
 8000c14:	484d      	ldr	r0, [pc, #308]	; (8000d4c <GetEventButton+0x154>)
 8000c16:	f7ff fc7e 	bl	8000516 <GPIO_ReadInputDataBit>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d111      	bne.n	8000c44 <GetEventButton+0x4c>
			{
				if(button1.byFlagBtn1Press == 0)
 8000c20:	4b49      	ldr	r3, [pc, #292]	; (8000d48 <GetEventButton+0x150>)
 8000c22:	789b      	ldrb	r3, [r3, #2]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10d      	bne.n	8000c44 <GetEventButton+0x4c>
				{
					button1.dwTimeInit = GetMilSecTick();
 8000c28:	f004 fcae 	bl	8005588 <GetMilSecTick>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4a46      	ldr	r2, [pc, #280]	; (8000d48 <GetEventButton+0x150>)
 8000c30:	6093      	str	r3, [r2, #8]
					button1.byPressCnt++;
 8000c32:	4b45      	ldr	r3, [pc, #276]	; (8000d48 <GetEventButton+0x150>)
 8000c34:	785b      	ldrb	r3, [r3, #1]
 8000c36:	3301      	adds	r3, #1
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b43      	ldr	r3, [pc, #268]	; (8000d48 <GetEventButton+0x150>)
 8000c3c:	705a      	strb	r2, [r3, #1]
					button1.byFlagBtn1Press = 1;
 8000c3e:	4b42      	ldr	r3, [pc, #264]	; (8000d48 <GetEventButton+0x150>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	709a      	strb	r2, [r3, #2]
				}

			}
			//Khi nut nhan ko duoc nhan
			if(BTN1_GET!=0)
 8000c44:	2102      	movs	r1, #2
 8000c46:	4841      	ldr	r0, [pc, #260]	; (8000d4c <GetEventButton+0x154>)
 8000c48:	f7ff fc65 	bl	8000516 <GPIO_ReadInputDataBit>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d00f      	beq.n	8000c72 <GetEventButton+0x7a>
			{
				if((button1.byFlagBtn1Released == 0)&&(button1.byFlagBtn1Press == 1))
 8000c52:	4b3d      	ldr	r3, [pc, #244]	; (8000d48 <GetEventButton+0x150>)
 8000c54:	78db      	ldrb	r3, [r3, #3]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10b      	bne.n	8000c72 <GetEventButton+0x7a>
 8000c5a:	4b3b      	ldr	r3, [pc, #236]	; (8000d48 <GetEventButton+0x150>)
 8000c5c:	789b      	ldrb	r3, [r3, #2]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d107      	bne.n	8000c72 <GetEventButton+0x7a>
				{
					button1.dwTimeCurrent = GetMilSecTick();
 8000c62:	f004 fc91 	bl	8005588 <GetMilSecTick>
 8000c66:	4603      	mov	r3, r0
 8000c68:	4a37      	ldr	r2, [pc, #220]	; (8000d48 <GetEventButton+0x150>)
 8000c6a:	60d3      	str	r3, [r2, #12]
					button1.byFlagBtn1Released = 1;
 8000c6c:	4b36      	ldr	r3, [pc, #216]	; (8000d48 <GetEventButton+0x150>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	70da      	strb	r2, [r3, #3]
				}

			}

			//Xu ly khi nhan giu
			if((button1.byFlagBtn1Press == 1 )&&(button1.byFlagBtn1Released == 0))
 8000c72:	4b35      	ldr	r3, [pc, #212]	; (8000d48 <GetEventButton+0x150>)
 8000c74:	789b      	ldrb	r3, [r3, #2]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d117      	bne.n	8000caa <GetEventButton+0xb2>
 8000c7a:	4b33      	ldr	r3, [pc, #204]	; (8000d48 <GetEventButton+0x150>)
 8000c7c:	78db      	ldrb	r3, [r3, #3]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d113      	bne.n	8000caa <GetEventButton+0xb2>
			{
				dwDeltaTime = dwCalculatorTime(button1.dwTimeInit,dwTimeNow);
 8000c82:	4b31      	ldr	r3, [pc, #196]	; (8000d48 <GetEventButton+0x150>)
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	6839      	ldr	r1, [r7, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fe73 	bl	8000974 <dwCalculatorTime>
 8000c8e:	6078      	str	r0, [r7, #4]
				if(dwDeltaTime>BUTTON_LONG_PRESS_TIME)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c96:	d908      	bls.n	8000caa <GetEventButton+0xb2>
				{
					button1.buttonEven = EVENT_OF_BUTTON_HOLD_500MS;
 8000c98:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <GetEventButton+0x150>)
 8000c9a:	2206      	movs	r2, #6
 8000c9c:	701a      	strb	r2, [r3, #0]
					button1.byFlagBtn1Hold = 1;
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <GetEventButton+0x150>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	711a      	strb	r2, [r3, #4]
					button1.byPressCnt = 0;
 8000ca4:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <GetEventButton+0x150>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	705a      	strb	r2, [r3, #1]
				}
			}
			//Xu ly khi nhan/nha

			if((button1.byFlagBtn1Press == 1)&&(button1.byFlagBtn1Released == 1))
 8000caa:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <GetEventButton+0x150>)
 8000cac:	789b      	ldrb	r3, [r3, #2]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d163      	bne.n	8000d7a <GetEventButton+0x182>
 8000cb2:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <GetEventButton+0x150>)
 8000cb4:	78db      	ldrb	r3, [r3, #3]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d15f      	bne.n	8000d7a <GetEventButton+0x182>
			{
				if(button1.byFlagBtn1Hold == 1)
 8000cba:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <GetEventButton+0x150>)
 8000cbc:	791b      	ldrb	r3, [r3, #4]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d10c      	bne.n	8000cdc <GetEventButton+0xe4>
				{
					button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000cc2:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <GetEventButton+0x150>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
					button1.byFlagBtn1Press = 0;
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <GetEventButton+0x150>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	709a      	strb	r2, [r3, #2]
					button1.byFlagBtn1Released = 0;
 8000cce:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <GetEventButton+0x150>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	70da      	strb	r2, [r3, #3]
					button1.byFlagBtn1Hold = 0;
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <GetEventButton+0x150>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	711a      	strb	r2, [r3, #4]
 8000cda:	e04e      	b.n	8000d7a <GetEventButton+0x182>
				}else
				{
					dwDeltaTime = dwCalculatorTime(button1.dwTimeInit, button1.dwTimeCurrent);
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <GetEventButton+0x150>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	4a19      	ldr	r2, [pc, #100]	; (8000d48 <GetEventButton+0x150>)
 8000ce2:	68d2      	ldr	r2, [r2, #12]
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe44 	bl	8000974 <dwCalculatorTime>
 8000cec:	6078      	str	r0, [r7, #4]
					if((dwDeltaTime > BUTTON_NORMAL_PRESS_TIME)&&(dwDeltaTime < BUTTON_LONG_PRESS_TIME))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b3c      	cmp	r3, #60	; 0x3c
 8000cf2:	d92d      	bls.n	8000d50 <GetEventButton+0x158>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cfa:	d229      	bcs.n	8000d50 <GetEventButton+0x158>
					{
							dwDeltaTime = dwCalculatorTime(button1.dwTimeCurrent, dwTimeNow);
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <GetEventButton+0x150>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	6839      	ldr	r1, [r7, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fe36 	bl	8000974 <dwCalculatorTime>
 8000d08:	6078      	str	r0, [r7, #4]
						if(dwDeltaTime < BW2PRESS_TIME)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000d10:	d206      	bcs.n	8000d20 <GetEventButton+0x128>
						{
							button1.byFlagBtn1Released = 0;
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <GetEventButton+0x150>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	70da      	strb	r2, [r3, #3]
							button1.byFlagBtn1Press = 0;
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <GetEventButton+0x150>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	709a      	strb	r2, [r3, #2]
						if(dwDeltaTime < BW2PRESS_TIME)
 8000d1e:	e02c      	b.n	8000d7a <GetEventButton+0x182>
						}else
						{
							button1.buttonEven = checkEventButton(button1.byPressCnt);
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <GetEventButton+0x150>)
 8000d22:	785b      	ldrb	r3, [r3, #1]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 fbbb 	bl	80014a0 <checkEventButton>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <GetEventButton+0x150>)
 8000d30:	701a      	strb	r2, [r3, #0]
							button1.byPressCnt = 0;
 8000d32:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <GetEventButton+0x150>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	705a      	strb	r2, [r3, #1]
							button1.byFlagBtn1Press = 0;
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <GetEventButton+0x150>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	709a      	strb	r2, [r3, #2]
							button1.byFlagBtn1Released = 0;
 8000d3e:	4b02      	ldr	r3, [pc, #8]	; (8000d48 <GetEventButton+0x150>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	70da      	strb	r2, [r3, #3]
						if(dwDeltaTime < BW2PRESS_TIME)
 8000d44:	e019      	b.n	8000d7a <GetEventButton+0x182>
 8000d46:	bf00      	nop
 8000d48:	200000ac 	.word	0x200000ac
 8000d4c:	40020400 	.word	0x40020400
						}
					}
					else if(dwDeltaTime < BUTTON_NORMAL_PRESS_TIME)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b3b      	cmp	r3, #59	; 0x3b
 8000d54:	d811      	bhi.n	8000d7a <GetEventButton+0x182>
					{
						button1.buttonEven = checkEventButton(button1.byPressCnt);
 8000d56:	4b69      	ldr	r3, [pc, #420]	; (8000efc <GetEventButton+0x304>)
 8000d58:	785b      	ldrb	r3, [r3, #1]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 fba0 	bl	80014a0 <checkEventButton>
 8000d60:	4603      	mov	r3, r0
 8000d62:	461a      	mov	r2, r3
 8000d64:	4b65      	ldr	r3, [pc, #404]	; (8000efc <GetEventButton+0x304>)
 8000d66:	701a      	strb	r2, [r3, #0]
						button1.byPressCnt = 0;
 8000d68:	4b64      	ldr	r3, [pc, #400]	; (8000efc <GetEventButton+0x304>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	705a      	strb	r2, [r3, #1]
						button1.byFlagBtn1Press = 0;
 8000d6e:	4b63      	ldr	r3, [pc, #396]	; (8000efc <GetEventButton+0x304>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	709a      	strb	r2, [r3, #2]
						button1.byFlagBtn1Released = 0;
 8000d74:	4b61      	ldr	r3, [pc, #388]	; (8000efc <GetEventButton+0x304>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	70da      	strb	r2, [r3, #3]
					}
				}
			}

			if((button1.byFlagBtn1Hold == 0)&&(button1.byFlagBtn1Press == 0))
 8000d7a:	4b60      	ldr	r3, [pc, #384]	; (8000efc <GetEventButton+0x304>)
 8000d7c:	791b      	ldrb	r3, [r3, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d11a      	bne.n	8000db8 <GetEventButton+0x1c0>
 8000d82:	4b5e      	ldr	r3, [pc, #376]	; (8000efc <GetEventButton+0x304>)
 8000d84:	789b      	ldrb	r3, [r3, #2]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d116      	bne.n	8000db8 <GetEventButton+0x1c0>
			{
					dwDeltaTime = dwCalculatorTime(button1.dwTimeCurrent, dwTimeNow);
 8000d8a:	4b5c      	ldr	r3, [pc, #368]	; (8000efc <GetEventButton+0x304>)
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	6839      	ldr	r1, [r7, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fdef 	bl	8000974 <dwCalculatorTime>
 8000d96:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime > BW2PRESS_TIME)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000d9e:	d90b      	bls.n	8000db8 <GetEventButton+0x1c0>
					{
						button1.buttonEven = checkEventButton(button1.byPressCnt);
 8000da0:	4b56      	ldr	r3, [pc, #344]	; (8000efc <GetEventButton+0x304>)
 8000da2:	785b      	ldrb	r3, [r3, #1]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 fb7b 	bl	80014a0 <checkEventButton>
 8000daa:	4603      	mov	r3, r0
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b53      	ldr	r3, [pc, #332]	; (8000efc <GetEventButton+0x304>)
 8000db0:	701a      	strb	r2, [r3, #0]
						button1.byPressCnt = 0;
 8000db2:	4b52      	ldr	r3, [pc, #328]	; (8000efc <GetEventButton+0x304>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	705a      	strb	r2, [r3, #1]
					}

			}

	}
		dwTimeNow = GetMilSecTick();
 8000db8:	f004 fbe6 	bl	8005588 <GetMilSecTick>
 8000dbc:	6038      	str	r0, [r7, #0]
		if(button2.buttonEven ==EVENT_OF_BUTTON_NOCLICK)
 8000dbe:	4b50      	ldr	r3, [pc, #320]	; (8000f00 <GetEventButton+0x308>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 80d4 	bne.w	8000f70 <GetEventButton+0x378>
		{
			//Khi nut nhan duoc nhan
				if(BTN2_GET == 0)
 8000dc8:	2104      	movs	r1, #4
 8000dca:	484e      	ldr	r0, [pc, #312]	; (8000f04 <GetEventButton+0x30c>)
 8000dcc:	f7ff fba3 	bl	8000516 <GPIO_ReadInputDataBit>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d111      	bne.n	8000dfa <GetEventButton+0x202>
				{
					if(button2.byFlagBtn1Press == 0)
 8000dd6:	4b4a      	ldr	r3, [pc, #296]	; (8000f00 <GetEventButton+0x308>)
 8000dd8:	789b      	ldrb	r3, [r3, #2]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d10d      	bne.n	8000dfa <GetEventButton+0x202>
					{
						button2.dwTimeInit = GetMilSecTick();
 8000dde:	f004 fbd3 	bl	8005588 <GetMilSecTick>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a46      	ldr	r2, [pc, #280]	; (8000f00 <GetEventButton+0x308>)
 8000de6:	6093      	str	r3, [r2, #8]
						button2.byPressCnt++;
 8000de8:	4b45      	ldr	r3, [pc, #276]	; (8000f00 <GetEventButton+0x308>)
 8000dea:	785b      	ldrb	r3, [r3, #1]
 8000dec:	3301      	adds	r3, #1
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b43      	ldr	r3, [pc, #268]	; (8000f00 <GetEventButton+0x308>)
 8000df2:	705a      	strb	r2, [r3, #1]
						button2.byFlagBtn1Press = 1;
 8000df4:	4b42      	ldr	r3, [pc, #264]	; (8000f00 <GetEventButton+0x308>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	709a      	strb	r2, [r3, #2]
					}

				}
				//Khi nut nhan ko duoc nhan
				if(BTN2_GET!=0)
 8000dfa:	2104      	movs	r1, #4
 8000dfc:	4841      	ldr	r0, [pc, #260]	; (8000f04 <GetEventButton+0x30c>)
 8000dfe:	f7ff fb8a 	bl	8000516 <GPIO_ReadInputDataBit>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00f      	beq.n	8000e28 <GetEventButton+0x230>
				{
					if((button2.byFlagBtn1Released == 0)&&(button2.byFlagBtn1Press == 1))
 8000e08:	4b3d      	ldr	r3, [pc, #244]	; (8000f00 <GetEventButton+0x308>)
 8000e0a:	78db      	ldrb	r3, [r3, #3]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d10b      	bne.n	8000e28 <GetEventButton+0x230>
 8000e10:	4b3b      	ldr	r3, [pc, #236]	; (8000f00 <GetEventButton+0x308>)
 8000e12:	789b      	ldrb	r3, [r3, #2]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d107      	bne.n	8000e28 <GetEventButton+0x230>
					{
						button2.dwTimeCurrent = GetMilSecTick();
 8000e18:	f004 fbb6 	bl	8005588 <GetMilSecTick>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	4a38      	ldr	r2, [pc, #224]	; (8000f00 <GetEventButton+0x308>)
 8000e20:	60d3      	str	r3, [r2, #12]
						button2.byFlagBtn1Released = 1;
 8000e22:	4b37      	ldr	r3, [pc, #220]	; (8000f00 <GetEventButton+0x308>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	70da      	strb	r2, [r3, #3]
					}

				}

				//Xu ly khi nhan giu
				if((button2.byFlagBtn1Press == 1 )&&(button2.byFlagBtn1Released == 0))
 8000e28:	4b35      	ldr	r3, [pc, #212]	; (8000f00 <GetEventButton+0x308>)
 8000e2a:	789b      	ldrb	r3, [r3, #2]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d117      	bne.n	8000e60 <GetEventButton+0x268>
 8000e30:	4b33      	ldr	r3, [pc, #204]	; (8000f00 <GetEventButton+0x308>)
 8000e32:	78db      	ldrb	r3, [r3, #3]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d113      	bne.n	8000e60 <GetEventButton+0x268>
				{
					dwDeltaTime = dwCalculatorTime(button2.dwTimeInit,dwTimeNow);
 8000e38:	4b31      	ldr	r3, [pc, #196]	; (8000f00 <GetEventButton+0x308>)
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	6839      	ldr	r1, [r7, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fd98 	bl	8000974 <dwCalculatorTime>
 8000e44:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime>BUTTON_LONG_PRESS_TIME)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e4c:	d908      	bls.n	8000e60 <GetEventButton+0x268>
					{
						button2.buttonEven = EVENT_OF_BUTTON_HOLD_500MS;
 8000e4e:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <GetEventButton+0x308>)
 8000e50:	2206      	movs	r2, #6
 8000e52:	701a      	strb	r2, [r3, #0]
						button2.byFlagBtn1Hold = 1;
 8000e54:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <GetEventButton+0x308>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	711a      	strb	r2, [r3, #4]
						button2.byPressCnt = 0;
 8000e5a:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <GetEventButton+0x308>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	705a      	strb	r2, [r3, #1]
					}
				}
				//Xu ly khi nhan/nha

				if((button2.byFlagBtn1Press == 1)&&(button2.byFlagBtn1Released == 1))
 8000e60:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <GetEventButton+0x308>)
 8000e62:	789b      	ldrb	r3, [r3, #2]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d164      	bne.n	8000f32 <GetEventButton+0x33a>
 8000e68:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <GetEventButton+0x308>)
 8000e6a:	78db      	ldrb	r3, [r3, #3]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d160      	bne.n	8000f32 <GetEventButton+0x33a>
				{
					if(button2.byFlagBtn1Hold == 1)
 8000e70:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <GetEventButton+0x308>)
 8000e72:	791b      	ldrb	r3, [r3, #4]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d10c      	bne.n	8000e92 <GetEventButton+0x29a>
					{
						button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000e78:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <GetEventButton+0x308>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]
						button2.byFlagBtn1Press = 0;
 8000e7e:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <GetEventButton+0x308>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	709a      	strb	r2, [r3, #2]
						button2.byFlagBtn1Released = 0;
 8000e84:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <GetEventButton+0x308>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	70da      	strb	r2, [r3, #3]
						button2.byFlagBtn1Hold = 0;
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <GetEventButton+0x308>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	711a      	strb	r2, [r3, #4]
 8000e90:	e04f      	b.n	8000f32 <GetEventButton+0x33a>
					}else
					{
						dwDeltaTime = dwCalculatorTime(button2.dwTimeInit, button2.dwTimeCurrent);
 8000e92:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <GetEventButton+0x308>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	4a1a      	ldr	r2, [pc, #104]	; (8000f00 <GetEventButton+0x308>)
 8000e98:	68d2      	ldr	r2, [r2, #12]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fd69 	bl	8000974 <dwCalculatorTime>
 8000ea2:	6078      	str	r0, [r7, #4]
						if((dwDeltaTime > BUTTON_NORMAL_PRESS_TIME)&&(dwDeltaTime < BUTTON_LONG_PRESS_TIME))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b3c      	cmp	r3, #60	; 0x3c
 8000ea8:	d92e      	bls.n	8000f08 <GetEventButton+0x310>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000eb0:	d22a      	bcs.n	8000f08 <GetEventButton+0x310>
						{
								dwDeltaTime = dwCalculatorTime(button2.dwTimeCurrent, dwTimeNow);
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <GetEventButton+0x308>)
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	6839      	ldr	r1, [r7, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fd5b 	bl	8000974 <dwCalculatorTime>
 8000ebe:	6078      	str	r0, [r7, #4]
							if(dwDeltaTime < BW2PRESS_TIME)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000ec6:	d206      	bcs.n	8000ed6 <GetEventButton+0x2de>
							{
								button2.byFlagBtn1Released = 0;
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <GetEventButton+0x308>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	70da      	strb	r2, [r3, #3]
								button2.byFlagBtn1Press = 0;
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <GetEventButton+0x308>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	709a      	strb	r2, [r3, #2]
							if(dwDeltaTime < BW2PRESS_TIME)
 8000ed4:	e02d      	b.n	8000f32 <GetEventButton+0x33a>
							}else
							{
								button2.buttonEven = checkEventButton(button2.byPressCnt);
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <GetEventButton+0x308>)
 8000ed8:	785b      	ldrb	r3, [r3, #1]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 fae0 	bl	80014a0 <checkEventButton>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <GetEventButton+0x308>)
 8000ee6:	701a      	strb	r2, [r3, #0]
								button2.byPressCnt = 0;
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <GetEventButton+0x308>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	705a      	strb	r2, [r3, #1]
								button2.byFlagBtn1Press = 0;
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <GetEventButton+0x308>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	709a      	strb	r2, [r3, #2]
								button2.byFlagBtn1Released = 0;
 8000ef4:	4b02      	ldr	r3, [pc, #8]	; (8000f00 <GetEventButton+0x308>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	70da      	strb	r2, [r3, #3]
							if(dwDeltaTime < BW2PRESS_TIME)
 8000efa:	e01a      	b.n	8000f32 <GetEventButton+0x33a>
 8000efc:	200000ac 	.word	0x200000ac
 8000f00:	200000bc 	.word	0x200000bc
 8000f04:	40020400 	.word	0x40020400
							}
						}
						else if(dwDeltaTime < BUTTON_NORMAL_PRESS_TIME)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b3b      	cmp	r3, #59	; 0x3b
 8000f0c:	d811      	bhi.n	8000f32 <GetEventButton+0x33a>
						{
							button2.buttonEven = checkEventButton(button2.byPressCnt);
 8000f0e:	4b69      	ldr	r3, [pc, #420]	; (80010b4 <GetEventButton+0x4bc>)
 8000f10:	785b      	ldrb	r3, [r3, #1]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 fac4 	bl	80014a0 <checkEventButton>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b65      	ldr	r3, [pc, #404]	; (80010b4 <GetEventButton+0x4bc>)
 8000f1e:	701a      	strb	r2, [r3, #0]
							button2.byPressCnt = 0;
 8000f20:	4b64      	ldr	r3, [pc, #400]	; (80010b4 <GetEventButton+0x4bc>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	705a      	strb	r2, [r3, #1]
							button2.byFlagBtn1Press = 0;
 8000f26:	4b63      	ldr	r3, [pc, #396]	; (80010b4 <GetEventButton+0x4bc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	709a      	strb	r2, [r3, #2]
							button2.byFlagBtn1Released = 0;
 8000f2c:	4b61      	ldr	r3, [pc, #388]	; (80010b4 <GetEventButton+0x4bc>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	70da      	strb	r2, [r3, #3]
						}
					}
				}

				if((button2.byFlagBtn1Hold == 0)&&(button2.byFlagBtn1Press == 0))
 8000f32:	4b60      	ldr	r3, [pc, #384]	; (80010b4 <GetEventButton+0x4bc>)
 8000f34:	791b      	ldrb	r3, [r3, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d11a      	bne.n	8000f70 <GetEventButton+0x378>
 8000f3a:	4b5e      	ldr	r3, [pc, #376]	; (80010b4 <GetEventButton+0x4bc>)
 8000f3c:	789b      	ldrb	r3, [r3, #2]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d116      	bne.n	8000f70 <GetEventButton+0x378>
				{
					dwDeltaTime = dwCalculatorTime(button2.dwTimeCurrent, dwTimeNow);
 8000f42:	4b5c      	ldr	r3, [pc, #368]	; (80010b4 <GetEventButton+0x4bc>)
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	6839      	ldr	r1, [r7, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fd13 	bl	8000974 <dwCalculatorTime>
 8000f4e:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime > BW2PRESS_TIME)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f56:	d90b      	bls.n	8000f70 <GetEventButton+0x378>
					{
						button2.buttonEven = checkEventButton(button2.byPressCnt);
 8000f58:	4b56      	ldr	r3, [pc, #344]	; (80010b4 <GetEventButton+0x4bc>)
 8000f5a:	785b      	ldrb	r3, [r3, #1]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fa9f 	bl	80014a0 <checkEventButton>
 8000f62:	4603      	mov	r3, r0
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b53      	ldr	r3, [pc, #332]	; (80010b4 <GetEventButton+0x4bc>)
 8000f68:	701a      	strb	r2, [r3, #0]
						button2.byPressCnt = 0;
 8000f6a:	4b52      	ldr	r3, [pc, #328]	; (80010b4 <GetEventButton+0x4bc>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	705a      	strb	r2, [r3, #1]
					}
				}

		}
		dwTimeNow = GetMilSecTick();
 8000f70:	f004 fb0a 	bl	8005588 <GetMilSecTick>
 8000f74:	6038      	str	r0, [r7, #0]
		if(button3.buttonEven ==EVENT_OF_BUTTON_NOCLICK)
 8000f76:	4b50      	ldr	r3, [pc, #320]	; (80010b8 <GetEventButton+0x4c0>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f040 80d4 	bne.w	8001128 <GetEventButton+0x530>
		{
			//Khi nut nhan duoc nhan
				if(BTN3_GET == 0)
 8000f80:	2108      	movs	r1, #8
 8000f82:	484e      	ldr	r0, [pc, #312]	; (80010bc <GetEventButton+0x4c4>)
 8000f84:	f7ff fac7 	bl	8000516 <GPIO_ReadInputDataBit>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d111      	bne.n	8000fb2 <GetEventButton+0x3ba>
				{
					if(button3.byFlagBtn1Press == 0)
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <GetEventButton+0x4c0>)
 8000f90:	789b      	ldrb	r3, [r3, #2]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10d      	bne.n	8000fb2 <GetEventButton+0x3ba>
					{
						button3.dwTimeInit = GetMilSecTick();
 8000f96:	f004 faf7 	bl	8005588 <GetMilSecTick>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a46      	ldr	r2, [pc, #280]	; (80010b8 <GetEventButton+0x4c0>)
 8000f9e:	6093      	str	r3, [r2, #8]
						button3.byPressCnt++;
 8000fa0:	4b45      	ldr	r3, [pc, #276]	; (80010b8 <GetEventButton+0x4c0>)
 8000fa2:	785b      	ldrb	r3, [r3, #1]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b43      	ldr	r3, [pc, #268]	; (80010b8 <GetEventButton+0x4c0>)
 8000faa:	705a      	strb	r2, [r3, #1]
						button3.byFlagBtn1Press = 1;
 8000fac:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <GetEventButton+0x4c0>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	709a      	strb	r2, [r3, #2]
					}

				}
				//Khi nut nhan ko duoc nhan
				if(BTN3_GET!=0)
 8000fb2:	2108      	movs	r1, #8
 8000fb4:	4841      	ldr	r0, [pc, #260]	; (80010bc <GetEventButton+0x4c4>)
 8000fb6:	f7ff faae 	bl	8000516 <GPIO_ReadInputDataBit>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d00f      	beq.n	8000fe0 <GetEventButton+0x3e8>
				{
					if((button3.byFlagBtn1Released == 0)&&(button3.byFlagBtn1Press == 1))
 8000fc0:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <GetEventButton+0x4c0>)
 8000fc2:	78db      	ldrb	r3, [r3, #3]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d10b      	bne.n	8000fe0 <GetEventButton+0x3e8>
 8000fc8:	4b3b      	ldr	r3, [pc, #236]	; (80010b8 <GetEventButton+0x4c0>)
 8000fca:	789b      	ldrb	r3, [r3, #2]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d107      	bne.n	8000fe0 <GetEventButton+0x3e8>
					{
						button3.dwTimeCurrent = GetMilSecTick();
 8000fd0:	f004 fada 	bl	8005588 <GetMilSecTick>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4a38      	ldr	r2, [pc, #224]	; (80010b8 <GetEventButton+0x4c0>)
 8000fd8:	60d3      	str	r3, [r2, #12]
						button3.byFlagBtn1Released = 1;
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <GetEventButton+0x4c0>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	70da      	strb	r2, [r3, #3]
					}

				}

				//Xu ly khi nhan giu
				if((button3.byFlagBtn1Press == 1 )&&(button3.byFlagBtn1Released == 0))
 8000fe0:	4b35      	ldr	r3, [pc, #212]	; (80010b8 <GetEventButton+0x4c0>)
 8000fe2:	789b      	ldrb	r3, [r3, #2]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d117      	bne.n	8001018 <GetEventButton+0x420>
 8000fe8:	4b33      	ldr	r3, [pc, #204]	; (80010b8 <GetEventButton+0x4c0>)
 8000fea:	78db      	ldrb	r3, [r3, #3]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d113      	bne.n	8001018 <GetEventButton+0x420>
				{
					dwDeltaTime = dwCalculatorTime(button3.dwTimeInit,dwTimeNow);
 8000ff0:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <GetEventButton+0x4c0>)
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	6839      	ldr	r1, [r7, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fcbc 	bl	8000974 <dwCalculatorTime>
 8000ffc:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime>BUTTON_LONG_PRESS_TIME)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001004:	d908      	bls.n	8001018 <GetEventButton+0x420>
					{
						button3.buttonEven = EVENT_OF_BUTTON_HOLD_500MS;
 8001006:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <GetEventButton+0x4c0>)
 8001008:	2206      	movs	r2, #6
 800100a:	701a      	strb	r2, [r3, #0]
						button3.byFlagBtn1Hold = 1;
 800100c:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <GetEventButton+0x4c0>)
 800100e:	2201      	movs	r2, #1
 8001010:	711a      	strb	r2, [r3, #4]
						button3.byPressCnt = 0;
 8001012:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <GetEventButton+0x4c0>)
 8001014:	2200      	movs	r2, #0
 8001016:	705a      	strb	r2, [r3, #1]
					}
				}
				//Xu ly khi nhan/nha

				if((button3.byFlagBtn1Press == 1)&&(button3.byFlagBtn1Released == 1))
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <GetEventButton+0x4c0>)
 800101a:	789b      	ldrb	r3, [r3, #2]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d164      	bne.n	80010ea <GetEventButton+0x4f2>
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <GetEventButton+0x4c0>)
 8001022:	78db      	ldrb	r3, [r3, #3]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d160      	bne.n	80010ea <GetEventButton+0x4f2>
				{
					if(button3.byFlagBtn1Hold == 1)
 8001028:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <GetEventButton+0x4c0>)
 800102a:	791b      	ldrb	r3, [r3, #4]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d10c      	bne.n	800104a <GetEventButton+0x452>
					{
						button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8001030:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <GetEventButton+0x4c0>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
						button3.byFlagBtn1Press = 0;
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <GetEventButton+0x4c0>)
 8001038:	2200      	movs	r2, #0
 800103a:	709a      	strb	r2, [r3, #2]
						button3.byFlagBtn1Released = 0;
 800103c:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <GetEventButton+0x4c0>)
 800103e:	2200      	movs	r2, #0
 8001040:	70da      	strb	r2, [r3, #3]
						button3.byFlagBtn1Hold = 0;
 8001042:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <GetEventButton+0x4c0>)
 8001044:	2200      	movs	r2, #0
 8001046:	711a      	strb	r2, [r3, #4]
 8001048:	e04f      	b.n	80010ea <GetEventButton+0x4f2>
					}else
					{
						dwDeltaTime = dwCalculatorTime(button3.dwTimeInit, button3.dwTimeCurrent);
 800104a:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <GetEventButton+0x4c0>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	4a1a      	ldr	r2, [pc, #104]	; (80010b8 <GetEventButton+0x4c0>)
 8001050:	68d2      	ldr	r2, [r2, #12]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fc8d 	bl	8000974 <dwCalculatorTime>
 800105a:	6078      	str	r0, [r7, #4]
						if((dwDeltaTime > BUTTON_NORMAL_PRESS_TIME)&&(dwDeltaTime < BUTTON_LONG_PRESS_TIME))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b3c      	cmp	r3, #60	; 0x3c
 8001060:	d92e      	bls.n	80010c0 <GetEventButton+0x4c8>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001068:	d22a      	bcs.n	80010c0 <GetEventButton+0x4c8>
						{
								dwDeltaTime = dwCalculatorTime(button3.dwTimeCurrent, dwTimeNow);
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <GetEventButton+0x4c0>)
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	6839      	ldr	r1, [r7, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fc7f 	bl	8000974 <dwCalculatorTime>
 8001076:	6078      	str	r0, [r7, #4]
							if(dwDeltaTime < BW2PRESS_TIME)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800107e:	d206      	bcs.n	800108e <GetEventButton+0x496>
							{
								button3.byFlagBtn1Released = 0;
 8001080:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <GetEventButton+0x4c0>)
 8001082:	2200      	movs	r2, #0
 8001084:	70da      	strb	r2, [r3, #3]
								button3.byFlagBtn1Press = 0;
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <GetEventButton+0x4c0>)
 8001088:	2200      	movs	r2, #0
 800108a:	709a      	strb	r2, [r3, #2]
							if(dwDeltaTime < BW2PRESS_TIME)
 800108c:	e02d      	b.n	80010ea <GetEventButton+0x4f2>
							}else
							{
								button3.buttonEven = checkEventButton(button3.byPressCnt);
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <GetEventButton+0x4c0>)
 8001090:	785b      	ldrb	r3, [r3, #1]
 8001092:	4618      	mov	r0, r3
 8001094:	f000 fa04 	bl	80014a0 <checkEventButton>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <GetEventButton+0x4c0>)
 800109e:	701a      	strb	r2, [r3, #0]
								button3.byPressCnt = 0;
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <GetEventButton+0x4c0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	705a      	strb	r2, [r3, #1]
								button3.byFlagBtn1Press = 0;
 80010a6:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <GetEventButton+0x4c0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	709a      	strb	r2, [r3, #2]
								button3.byFlagBtn1Released = 0;
 80010ac:	4b02      	ldr	r3, [pc, #8]	; (80010b8 <GetEventButton+0x4c0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	70da      	strb	r2, [r3, #3]
							if(dwDeltaTime < BW2PRESS_TIME)
 80010b2:	e01a      	b.n	80010ea <GetEventButton+0x4f2>
 80010b4:	200000bc 	.word	0x200000bc
 80010b8:	200000cc 	.word	0x200000cc
 80010bc:	40020800 	.word	0x40020800
							}
						}
						else if(dwDeltaTime < BUTTON_NORMAL_PRESS_TIME)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b3b      	cmp	r3, #59	; 0x3b
 80010c4:	d811      	bhi.n	80010ea <GetEventButton+0x4f2>
						{
							button3.buttonEven = checkEventButton(button3.byPressCnt);
 80010c6:	4b69      	ldr	r3, [pc, #420]	; (800126c <GetEventButton+0x674>)
 80010c8:	785b      	ldrb	r3, [r3, #1]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f9e8 	bl	80014a0 <checkEventButton>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b65      	ldr	r3, [pc, #404]	; (800126c <GetEventButton+0x674>)
 80010d6:	701a      	strb	r2, [r3, #0]
							button3.byPressCnt = 0;
 80010d8:	4b64      	ldr	r3, [pc, #400]	; (800126c <GetEventButton+0x674>)
 80010da:	2200      	movs	r2, #0
 80010dc:	705a      	strb	r2, [r3, #1]
							button3.byFlagBtn1Press = 0;
 80010de:	4b63      	ldr	r3, [pc, #396]	; (800126c <GetEventButton+0x674>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	709a      	strb	r2, [r3, #2]
							button3.byFlagBtn1Released = 0;
 80010e4:	4b61      	ldr	r3, [pc, #388]	; (800126c <GetEventButton+0x674>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	70da      	strb	r2, [r3, #3]
						}
					}
				}

				if((button3.byFlagBtn1Hold == 0)&&(button3.byFlagBtn1Press == 0))
 80010ea:	4b60      	ldr	r3, [pc, #384]	; (800126c <GetEventButton+0x674>)
 80010ec:	791b      	ldrb	r3, [r3, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d11a      	bne.n	8001128 <GetEventButton+0x530>
 80010f2:	4b5e      	ldr	r3, [pc, #376]	; (800126c <GetEventButton+0x674>)
 80010f4:	789b      	ldrb	r3, [r3, #2]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d116      	bne.n	8001128 <GetEventButton+0x530>
				{
					dwDeltaTime = dwCalculatorTime(button3.dwTimeCurrent, dwTimeNow);
 80010fa:	4b5c      	ldr	r3, [pc, #368]	; (800126c <GetEventButton+0x674>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	6839      	ldr	r1, [r7, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fc37 	bl	8000974 <dwCalculatorTime>
 8001106:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime > BW2PRESS_TIME)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800110e:	d90b      	bls.n	8001128 <GetEventButton+0x530>
					{
						button3.buttonEven = checkEventButton(button3.byPressCnt);
 8001110:	4b56      	ldr	r3, [pc, #344]	; (800126c <GetEventButton+0x674>)
 8001112:	785b      	ldrb	r3, [r3, #1]
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f9c3 	bl	80014a0 <checkEventButton>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	4b53      	ldr	r3, [pc, #332]	; (800126c <GetEventButton+0x674>)
 8001120:	701a      	strb	r2, [r3, #0]
						button3.byPressCnt = 0;
 8001122:	4b52      	ldr	r3, [pc, #328]	; (800126c <GetEventButton+0x674>)
 8001124:	2200      	movs	r2, #0
 8001126:	705a      	strb	r2, [r3, #1]
					}
				}

		}
		dwTimeNow = GetMilSecTick();
 8001128:	f004 fa2e 	bl	8005588 <GetMilSecTick>
 800112c:	6038      	str	r0, [r7, #0]
		if(button4.buttonEven ==EVENT_OF_BUTTON_NOCLICK)
 800112e:	4b50      	ldr	r3, [pc, #320]	; (8001270 <GetEventButton+0x678>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f040 80d4 	bne.w	80012e0 <GetEventButton+0x6e8>
		{
			//Khi nut nhan duoc nhan
				if(BTN4_GET == 0)
 8001138:	2101      	movs	r1, #1
 800113a:	484e      	ldr	r0, [pc, #312]	; (8001274 <GetEventButton+0x67c>)
 800113c:	f7ff f9eb 	bl	8000516 <GPIO_ReadInputDataBit>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d111      	bne.n	800116a <GetEventButton+0x572>
				{
					if(button4.byFlagBtn1Press == 0)
 8001146:	4b4a      	ldr	r3, [pc, #296]	; (8001270 <GetEventButton+0x678>)
 8001148:	789b      	ldrb	r3, [r3, #2]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10d      	bne.n	800116a <GetEventButton+0x572>
					{
						button4.dwTimeInit = GetMilSecTick();
 800114e:	f004 fa1b 	bl	8005588 <GetMilSecTick>
 8001152:	4603      	mov	r3, r0
 8001154:	4a46      	ldr	r2, [pc, #280]	; (8001270 <GetEventButton+0x678>)
 8001156:	6093      	str	r3, [r2, #8]
						button4.byPressCnt++;
 8001158:	4b45      	ldr	r3, [pc, #276]	; (8001270 <GetEventButton+0x678>)
 800115a:	785b      	ldrb	r3, [r3, #1]
 800115c:	3301      	adds	r3, #1
 800115e:	b2da      	uxtb	r2, r3
 8001160:	4b43      	ldr	r3, [pc, #268]	; (8001270 <GetEventButton+0x678>)
 8001162:	705a      	strb	r2, [r3, #1]
						button4.byFlagBtn1Press = 1;
 8001164:	4b42      	ldr	r3, [pc, #264]	; (8001270 <GetEventButton+0x678>)
 8001166:	2201      	movs	r2, #1
 8001168:	709a      	strb	r2, [r3, #2]
					}

				}
				//Khi nut nhan ko duoc nhan
				if(BTN4_GET!=0)
 800116a:	2101      	movs	r1, #1
 800116c:	4841      	ldr	r0, [pc, #260]	; (8001274 <GetEventButton+0x67c>)
 800116e:	f7ff f9d2 	bl	8000516 <GPIO_ReadInputDataBit>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00f      	beq.n	8001198 <GetEventButton+0x5a0>
				{
					if((button4.byFlagBtn1Released == 0)&&(button4.byFlagBtn1Press == 1))
 8001178:	4b3d      	ldr	r3, [pc, #244]	; (8001270 <GetEventButton+0x678>)
 800117a:	78db      	ldrb	r3, [r3, #3]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10b      	bne.n	8001198 <GetEventButton+0x5a0>
 8001180:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <GetEventButton+0x678>)
 8001182:	789b      	ldrb	r3, [r3, #2]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d107      	bne.n	8001198 <GetEventButton+0x5a0>
					{
						button4.dwTimeCurrent = GetMilSecTick();
 8001188:	f004 f9fe 	bl	8005588 <GetMilSecTick>
 800118c:	4603      	mov	r3, r0
 800118e:	4a38      	ldr	r2, [pc, #224]	; (8001270 <GetEventButton+0x678>)
 8001190:	60d3      	str	r3, [r2, #12]
						button4.byFlagBtn1Released = 1;
 8001192:	4b37      	ldr	r3, [pc, #220]	; (8001270 <GetEventButton+0x678>)
 8001194:	2201      	movs	r2, #1
 8001196:	70da      	strb	r2, [r3, #3]
					}

				}

				//Xu ly khi nhan giu
				if((button4.byFlagBtn1Press == 1 )&&(button4.byFlagBtn1Released == 0))
 8001198:	4b35      	ldr	r3, [pc, #212]	; (8001270 <GetEventButton+0x678>)
 800119a:	789b      	ldrb	r3, [r3, #2]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d117      	bne.n	80011d0 <GetEventButton+0x5d8>
 80011a0:	4b33      	ldr	r3, [pc, #204]	; (8001270 <GetEventButton+0x678>)
 80011a2:	78db      	ldrb	r3, [r3, #3]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d113      	bne.n	80011d0 <GetEventButton+0x5d8>
				{
					dwDeltaTime = dwCalculatorTime(button3.dwTimeInit,dwTimeNow);
 80011a8:	4b30      	ldr	r3, [pc, #192]	; (800126c <GetEventButton+0x674>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	6839      	ldr	r1, [r7, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fbe0 	bl	8000974 <dwCalculatorTime>
 80011b4:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime>BUTTON_LONG_PRESS_TIME)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011bc:	d908      	bls.n	80011d0 <GetEventButton+0x5d8>
					{
						button4.buttonEven = EVENT_OF_BUTTON_HOLD_500MS;
 80011be:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <GetEventButton+0x678>)
 80011c0:	2206      	movs	r2, #6
 80011c2:	701a      	strb	r2, [r3, #0]
						button4.byFlagBtn1Hold = 1;
 80011c4:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <GetEventButton+0x678>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	711a      	strb	r2, [r3, #4]
						button4.byPressCnt = 0;
 80011ca:	4b29      	ldr	r3, [pc, #164]	; (8001270 <GetEventButton+0x678>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	705a      	strb	r2, [r3, #1]
					}
				}
				//Xu ly khi nhan/nha

				if((button4.byFlagBtn1Press == 1)&&(button4.byFlagBtn1Released == 1))
 80011d0:	4b27      	ldr	r3, [pc, #156]	; (8001270 <GetEventButton+0x678>)
 80011d2:	789b      	ldrb	r3, [r3, #2]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d164      	bne.n	80012a2 <GetEventButton+0x6aa>
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <GetEventButton+0x678>)
 80011da:	78db      	ldrb	r3, [r3, #3]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d160      	bne.n	80012a2 <GetEventButton+0x6aa>
				{
					if(button4.byFlagBtn1Hold == 1)
 80011e0:	4b23      	ldr	r3, [pc, #140]	; (8001270 <GetEventButton+0x678>)
 80011e2:	791b      	ldrb	r3, [r3, #4]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d10c      	bne.n	8001202 <GetEventButton+0x60a>
					{
						button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 80011e8:	4b21      	ldr	r3, [pc, #132]	; (8001270 <GetEventButton+0x678>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
						button4.byFlagBtn1Press = 0;
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <GetEventButton+0x678>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	709a      	strb	r2, [r3, #2]
						button4.byFlagBtn1Released = 0;
 80011f4:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <GetEventButton+0x678>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	70da      	strb	r2, [r3, #3]
						button4.byFlagBtn1Hold = 0;
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <GetEventButton+0x678>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	711a      	strb	r2, [r3, #4]
 8001200:	e04f      	b.n	80012a2 <GetEventButton+0x6aa>
					}else
					{
						dwDeltaTime = dwCalculatorTime(button4.dwTimeInit, button4.dwTimeCurrent);
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <GetEventButton+0x678>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	4a1a      	ldr	r2, [pc, #104]	; (8001270 <GetEventButton+0x678>)
 8001208:	68d2      	ldr	r2, [r2, #12]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fbb1 	bl	8000974 <dwCalculatorTime>
 8001212:	6078      	str	r0, [r7, #4]
						if((dwDeltaTime > BUTTON_NORMAL_PRESS_TIME)&&(dwDeltaTime < BUTTON_LONG_PRESS_TIME))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b3c      	cmp	r3, #60	; 0x3c
 8001218:	d92e      	bls.n	8001278 <GetEventButton+0x680>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001220:	d22a      	bcs.n	8001278 <GetEventButton+0x680>
						{
								dwDeltaTime = dwCalculatorTime(button4.dwTimeCurrent, dwTimeNow);
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <GetEventButton+0x678>)
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	6839      	ldr	r1, [r7, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fba3 	bl	8000974 <dwCalculatorTime>
 800122e:	6078      	str	r0, [r7, #4]
							if(dwDeltaTime < BW2PRESS_TIME)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001236:	d206      	bcs.n	8001246 <GetEventButton+0x64e>
							{
								button4.byFlagBtn1Released = 0;
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <GetEventButton+0x678>)
 800123a:	2200      	movs	r2, #0
 800123c:	70da      	strb	r2, [r3, #3]
								button4.byFlagBtn1Press = 0;
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <GetEventButton+0x678>)
 8001240:	2200      	movs	r2, #0
 8001242:	709a      	strb	r2, [r3, #2]
							if(dwDeltaTime < BW2PRESS_TIME)
 8001244:	e02d      	b.n	80012a2 <GetEventButton+0x6aa>
							}else
							{
								button4.buttonEven = checkEventButton(button4.byPressCnt);
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <GetEventButton+0x678>)
 8001248:	785b      	ldrb	r3, [r3, #1]
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f928 	bl	80014a0 <checkEventButton>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <GetEventButton+0x678>)
 8001256:	701a      	strb	r2, [r3, #0]
								button4.byPressCnt = 0;
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <GetEventButton+0x678>)
 800125a:	2200      	movs	r2, #0
 800125c:	705a      	strb	r2, [r3, #1]
								button4.byFlagBtn1Press = 0;
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <GetEventButton+0x678>)
 8001260:	2200      	movs	r2, #0
 8001262:	709a      	strb	r2, [r3, #2]
								button4.byFlagBtn1Released = 0;
 8001264:	4b02      	ldr	r3, [pc, #8]	; (8001270 <GetEventButton+0x678>)
 8001266:	2200      	movs	r2, #0
 8001268:	70da      	strb	r2, [r3, #3]
							if(dwDeltaTime < BW2PRESS_TIME)
 800126a:	e01a      	b.n	80012a2 <GetEventButton+0x6aa>
 800126c:	200000cc 	.word	0x200000cc
 8001270:	200000dc 	.word	0x200000dc
 8001274:	40020800 	.word	0x40020800
							}
						}
						else if(dwDeltaTime < BUTTON_NORMAL_PRESS_TIME)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b3b      	cmp	r3, #59	; 0x3b
 800127c:	d811      	bhi.n	80012a2 <GetEventButton+0x6aa>
						{
							button4.buttonEven = checkEventButton(button4.byPressCnt);
 800127e:	4b85      	ldr	r3, [pc, #532]	; (8001494 <GetEventButton+0x89c>)
 8001280:	785b      	ldrb	r3, [r3, #1]
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f90c 	bl	80014a0 <checkEventButton>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	4b81      	ldr	r3, [pc, #516]	; (8001494 <GetEventButton+0x89c>)
 800128e:	701a      	strb	r2, [r3, #0]
							button4.byPressCnt = 0;
 8001290:	4b80      	ldr	r3, [pc, #512]	; (8001494 <GetEventButton+0x89c>)
 8001292:	2200      	movs	r2, #0
 8001294:	705a      	strb	r2, [r3, #1]
							button4.byFlagBtn1Press = 0;
 8001296:	4b7f      	ldr	r3, [pc, #508]	; (8001494 <GetEventButton+0x89c>)
 8001298:	2200      	movs	r2, #0
 800129a:	709a      	strb	r2, [r3, #2]
							button4.byFlagBtn1Released = 0;
 800129c:	4b7d      	ldr	r3, [pc, #500]	; (8001494 <GetEventButton+0x89c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	70da      	strb	r2, [r3, #3]
						}
					}
				}

				if((button4.byFlagBtn1Hold == 0)&&(button4.byFlagBtn1Press == 0))
 80012a2:	4b7c      	ldr	r3, [pc, #496]	; (8001494 <GetEventButton+0x89c>)
 80012a4:	791b      	ldrb	r3, [r3, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d11a      	bne.n	80012e0 <GetEventButton+0x6e8>
 80012aa:	4b7a      	ldr	r3, [pc, #488]	; (8001494 <GetEventButton+0x89c>)
 80012ac:	789b      	ldrb	r3, [r3, #2]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d116      	bne.n	80012e0 <GetEventButton+0x6e8>
				{
					dwDeltaTime = dwCalculatorTime(button4.dwTimeCurrent, dwTimeNow);
 80012b2:	4b78      	ldr	r3, [pc, #480]	; (8001494 <GetEventButton+0x89c>)
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	6839      	ldr	r1, [r7, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fb5b 	bl	8000974 <dwCalculatorTime>
 80012be:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime > BW2PRESS_TIME)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80012c6:	d90b      	bls.n	80012e0 <GetEventButton+0x6e8>
					{
						button4.buttonEven = checkEventButton(button4.byPressCnt);
 80012c8:	4b72      	ldr	r3, [pc, #456]	; (8001494 <GetEventButton+0x89c>)
 80012ca:	785b      	ldrb	r3, [r3, #1]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 f8e7 	bl	80014a0 <checkEventButton>
 80012d2:	4603      	mov	r3, r0
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b6f      	ldr	r3, [pc, #444]	; (8001494 <GetEventButton+0x89c>)
 80012d8:	701a      	strb	r2, [r3, #0]
						button4.byPressCnt = 0;
 80012da:	4b6e      	ldr	r3, [pc, #440]	; (8001494 <GetEventButton+0x89c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	705a      	strb	r2, [r3, #1]
					}
				}

		}
		dwTimeNow = GetMilSecTick();
 80012e0:	f004 f952 	bl	8005588 <GetMilSecTick>
 80012e4:	6038      	str	r0, [r7, #0]
		if(button5.buttonEven ==EVENT_OF_BUTTON_NOCLICK)
 80012e6:	4b6c      	ldr	r3, [pc, #432]	; (8001498 <GetEventButton+0x8a0>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f040 80ce 	bne.w	800148c <GetEventButton+0x894>
		{
			//Khi nut nhan duoc nhan
				if(BTN5_GET == 0)
 80012f0:	2120      	movs	r1, #32
 80012f2:	486a      	ldr	r0, [pc, #424]	; (800149c <GetEventButton+0x8a4>)
 80012f4:	f7ff f90f 	bl	8000516 <GPIO_ReadInputDataBit>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d111      	bne.n	8001322 <GetEventButton+0x72a>
				{
					if(button5.byFlagBtn1Press == 0)
 80012fe:	4b66      	ldr	r3, [pc, #408]	; (8001498 <GetEventButton+0x8a0>)
 8001300:	789b      	ldrb	r3, [r3, #2]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10d      	bne.n	8001322 <GetEventButton+0x72a>
					{
						button5.dwTimeInit = GetMilSecTick();
 8001306:	f004 f93f 	bl	8005588 <GetMilSecTick>
 800130a:	4603      	mov	r3, r0
 800130c:	4a62      	ldr	r2, [pc, #392]	; (8001498 <GetEventButton+0x8a0>)
 800130e:	6093      	str	r3, [r2, #8]
						button5.byPressCnt++;
 8001310:	4b61      	ldr	r3, [pc, #388]	; (8001498 <GetEventButton+0x8a0>)
 8001312:	785b      	ldrb	r3, [r3, #1]
 8001314:	3301      	adds	r3, #1
 8001316:	b2da      	uxtb	r2, r3
 8001318:	4b5f      	ldr	r3, [pc, #380]	; (8001498 <GetEventButton+0x8a0>)
 800131a:	705a      	strb	r2, [r3, #1]
						button5.byFlagBtn1Press = 1;
 800131c:	4b5e      	ldr	r3, [pc, #376]	; (8001498 <GetEventButton+0x8a0>)
 800131e:	2201      	movs	r2, #1
 8001320:	709a      	strb	r2, [r3, #2]
					}

				}
				//Khi nut nhan ko duoc nhan
				if(BTN5_GET!=0)
 8001322:	2120      	movs	r1, #32
 8001324:	485d      	ldr	r0, [pc, #372]	; (800149c <GetEventButton+0x8a4>)
 8001326:	f7ff f8f6 	bl	8000516 <GPIO_ReadInputDataBit>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00f      	beq.n	8001350 <GetEventButton+0x758>
				{
					if((button5.byFlagBtn1Released == 0)&&(button5.byFlagBtn1Press == 1))
 8001330:	4b59      	ldr	r3, [pc, #356]	; (8001498 <GetEventButton+0x8a0>)
 8001332:	78db      	ldrb	r3, [r3, #3]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10b      	bne.n	8001350 <GetEventButton+0x758>
 8001338:	4b57      	ldr	r3, [pc, #348]	; (8001498 <GetEventButton+0x8a0>)
 800133a:	789b      	ldrb	r3, [r3, #2]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d107      	bne.n	8001350 <GetEventButton+0x758>
					{
						button5.dwTimeCurrent = GetMilSecTick();
 8001340:	f004 f922 	bl	8005588 <GetMilSecTick>
 8001344:	4603      	mov	r3, r0
 8001346:	4a54      	ldr	r2, [pc, #336]	; (8001498 <GetEventButton+0x8a0>)
 8001348:	60d3      	str	r3, [r2, #12]
						button5.byFlagBtn1Released = 1;
 800134a:	4b53      	ldr	r3, [pc, #332]	; (8001498 <GetEventButton+0x8a0>)
 800134c:	2201      	movs	r2, #1
 800134e:	70da      	strb	r2, [r3, #3]
					}

				}

				//Xu ly khi nhan giu
				if((button5.byFlagBtn1Press == 1 )&&(button5.byFlagBtn1Released == 0))
 8001350:	4b51      	ldr	r3, [pc, #324]	; (8001498 <GetEventButton+0x8a0>)
 8001352:	789b      	ldrb	r3, [r3, #2]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d117      	bne.n	8001388 <GetEventButton+0x790>
 8001358:	4b4f      	ldr	r3, [pc, #316]	; (8001498 <GetEventButton+0x8a0>)
 800135a:	78db      	ldrb	r3, [r3, #3]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d113      	bne.n	8001388 <GetEventButton+0x790>
				{
					dwDeltaTime = dwCalculatorTime(button5.dwTimeInit,dwTimeNow);
 8001360:	4b4d      	ldr	r3, [pc, #308]	; (8001498 <GetEventButton+0x8a0>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	6839      	ldr	r1, [r7, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fb04 	bl	8000974 <dwCalculatorTime>
 800136c:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime>BUTTON_LONG_PRESS_TIME)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001374:	d908      	bls.n	8001388 <GetEventButton+0x790>
					{
						button5.buttonEven = EVENT_OF_BUTTON_HOLD_500MS;
 8001376:	4b48      	ldr	r3, [pc, #288]	; (8001498 <GetEventButton+0x8a0>)
 8001378:	2206      	movs	r2, #6
 800137a:	701a      	strb	r2, [r3, #0]
						button5.byFlagBtn1Hold = 1;
 800137c:	4b46      	ldr	r3, [pc, #280]	; (8001498 <GetEventButton+0x8a0>)
 800137e:	2201      	movs	r2, #1
 8001380:	711a      	strb	r2, [r3, #4]
						button5.byPressCnt = 0;
 8001382:	4b45      	ldr	r3, [pc, #276]	; (8001498 <GetEventButton+0x8a0>)
 8001384:	2200      	movs	r2, #0
 8001386:	705a      	strb	r2, [r3, #1]
					}
				}
				//Xu ly khi nhan/nha

				if((button5.byFlagBtn1Press == 1)&&(button5.byFlagBtn1Released == 1))
 8001388:	4b43      	ldr	r3, [pc, #268]	; (8001498 <GetEventButton+0x8a0>)
 800138a:	789b      	ldrb	r3, [r3, #2]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d15e      	bne.n	800144e <GetEventButton+0x856>
 8001390:	4b41      	ldr	r3, [pc, #260]	; (8001498 <GetEventButton+0x8a0>)
 8001392:	78db      	ldrb	r3, [r3, #3]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d15a      	bne.n	800144e <GetEventButton+0x856>
				{
					if(button5.byFlagBtn1Hold == 1)
 8001398:	4b3f      	ldr	r3, [pc, #252]	; (8001498 <GetEventButton+0x8a0>)
 800139a:	791b      	ldrb	r3, [r3, #4]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d10c      	bne.n	80013ba <GetEventButton+0x7c2>
					{
						button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 80013a0:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <GetEventButton+0x8a0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
						button5.byFlagBtn1Press = 0;
 80013a6:	4b3c      	ldr	r3, [pc, #240]	; (8001498 <GetEventButton+0x8a0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	709a      	strb	r2, [r3, #2]
						button5.byFlagBtn1Released = 0;
 80013ac:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <GetEventButton+0x8a0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	70da      	strb	r2, [r3, #3]
						button5.byFlagBtn1Hold = 0;
 80013b2:	4b39      	ldr	r3, [pc, #228]	; (8001498 <GetEventButton+0x8a0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	711a      	strb	r2, [r3, #4]
 80013b8:	e049      	b.n	800144e <GetEventButton+0x856>
					}else
					{
						dwDeltaTime = dwCalculatorTime(button5.dwTimeInit, button5.dwTimeCurrent);
 80013ba:	4b37      	ldr	r3, [pc, #220]	; (8001498 <GetEventButton+0x8a0>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	4a36      	ldr	r2, [pc, #216]	; (8001498 <GetEventButton+0x8a0>)
 80013c0:	68d2      	ldr	r2, [r2, #12]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fad5 	bl	8000974 <dwCalculatorTime>
 80013ca:	6078      	str	r0, [r7, #4]
						if((dwDeltaTime > BUTTON_NORMAL_PRESS_TIME)&&(dwDeltaTime < BUTTON_LONG_PRESS_TIME))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b3c      	cmp	r3, #60	; 0x3c
 80013d0:	d928      	bls.n	8001424 <GetEventButton+0x82c>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013d8:	d224      	bcs.n	8001424 <GetEventButton+0x82c>
						{
								dwDeltaTime = dwCalculatorTime(button5.dwTimeCurrent, dwTimeNow);
 80013da:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <GetEventButton+0x8a0>)
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	6839      	ldr	r1, [r7, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fac7 	bl	8000974 <dwCalculatorTime>
 80013e6:	6078      	str	r0, [r7, #4]
							if(dwDeltaTime < BW2PRESS_TIME)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80013ee:	d206      	bcs.n	80013fe <GetEventButton+0x806>
							{
								button5.byFlagBtn1Released = 0;
 80013f0:	4b29      	ldr	r3, [pc, #164]	; (8001498 <GetEventButton+0x8a0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	70da      	strb	r2, [r3, #3]
								button5.byFlagBtn1Press = 0;
 80013f6:	4b28      	ldr	r3, [pc, #160]	; (8001498 <GetEventButton+0x8a0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	709a      	strb	r2, [r3, #2]
							if(dwDeltaTime < BW2PRESS_TIME)
 80013fc:	e027      	b.n	800144e <GetEventButton+0x856>
							}else
							{
								button5.buttonEven = checkEventButton(button5.byPressCnt);
 80013fe:	4b26      	ldr	r3, [pc, #152]	; (8001498 <GetEventButton+0x8a0>)
 8001400:	785b      	ldrb	r3, [r3, #1]
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f84c 	bl	80014a0 <checkEventButton>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	4b22      	ldr	r3, [pc, #136]	; (8001498 <GetEventButton+0x8a0>)
 800140e:	701a      	strb	r2, [r3, #0]
								button5.byPressCnt = 0;
 8001410:	4b21      	ldr	r3, [pc, #132]	; (8001498 <GetEventButton+0x8a0>)
 8001412:	2200      	movs	r2, #0
 8001414:	705a      	strb	r2, [r3, #1]
								button5.byFlagBtn1Press = 0;
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <GetEventButton+0x8a0>)
 8001418:	2200      	movs	r2, #0
 800141a:	709a      	strb	r2, [r3, #2]
								button5.byFlagBtn1Released = 0;
 800141c:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <GetEventButton+0x8a0>)
 800141e:	2200      	movs	r2, #0
 8001420:	70da      	strb	r2, [r3, #3]
							if(dwDeltaTime < BW2PRESS_TIME)
 8001422:	e014      	b.n	800144e <GetEventButton+0x856>
							}
						}
						else if(dwDeltaTime < BUTTON_NORMAL_PRESS_TIME)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b3b      	cmp	r3, #59	; 0x3b
 8001428:	d811      	bhi.n	800144e <GetEventButton+0x856>
						{
							button5.buttonEven = checkEventButton(button5.byPressCnt);
 800142a:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <GetEventButton+0x8a0>)
 800142c:	785b      	ldrb	r3, [r3, #1]
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f836 	bl	80014a0 <checkEventButton>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	4b17      	ldr	r3, [pc, #92]	; (8001498 <GetEventButton+0x8a0>)
 800143a:	701a      	strb	r2, [r3, #0]
							button5.byPressCnt = 0;
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <GetEventButton+0x8a0>)
 800143e:	2200      	movs	r2, #0
 8001440:	705a      	strb	r2, [r3, #1]
							button5.byFlagBtn1Press = 0;
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <GetEventButton+0x8a0>)
 8001444:	2200      	movs	r2, #0
 8001446:	709a      	strb	r2, [r3, #2]
							button5.byFlagBtn1Released = 0;
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <GetEventButton+0x8a0>)
 800144a:	2200      	movs	r2, #0
 800144c:	70da      	strb	r2, [r3, #3]
						}
					}
				}

				if((button5.byFlagBtn1Hold == 0)&&(button5.byFlagBtn1Press == 0))
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <GetEventButton+0x8a0>)
 8001450:	791b      	ldrb	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d11a      	bne.n	800148c <GetEventButton+0x894>
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <GetEventButton+0x8a0>)
 8001458:	789b      	ldrb	r3, [r3, #2]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d116      	bne.n	800148c <GetEventButton+0x894>
				{
					dwDeltaTime = dwCalculatorTime(button5.dwTimeCurrent, dwTimeNow);
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <GetEventButton+0x8a0>)
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	6839      	ldr	r1, [r7, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fa85 	bl	8000974 <dwCalculatorTime>
 800146a:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime > BW2PRESS_TIME)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001472:	d90b      	bls.n	800148c <GetEventButton+0x894>
					{
						button5.buttonEven = checkEventButton(button5.byPressCnt);
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <GetEventButton+0x8a0>)
 8001476:	785b      	ldrb	r3, [r3, #1]
 8001478:	4618      	mov	r0, r3
 800147a:	f000 f811 	bl	80014a0 <checkEventButton>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <GetEventButton+0x8a0>)
 8001484:	701a      	strb	r2, [r3, #0]
						button5.byPressCnt = 0;
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <GetEventButton+0x8a0>)
 8001488:	2200      	movs	r2, #0
 800148a:	705a      	strb	r2, [r3, #1]
					}
				}

		}

}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200000dc 	.word	0x200000dc
 8001498:	200000ec 	.word	0x200000ec
 800149c:	40020000 	.word	0x40020000

080014a0 <checkEventButton>:

static EventButton_e checkEventButton(u8 pressCnt)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
	EventButton_e event;
	switch(pressCnt)
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	d81b      	bhi.n	80014ea <checkEventButton+0x4a>
 80014b2:	a201      	add	r2, pc, #4	; (adr r2, 80014b8 <checkEventButton+0x18>)
 80014b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b8:	080014cd 	.word	0x080014cd
 80014bc:	080014d3 	.word	0x080014d3
 80014c0:	080014d9 	.word	0x080014d9
 80014c4:	080014df 	.word	0x080014df
 80014c8:	080014e5 	.word	0x080014e5
	{
	case 1:
		event = EVENT_OF_BUTTON_PRESS_1_TIMES;
 80014cc:	2301      	movs	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
		break;
 80014d0:	e00e      	b.n	80014f0 <checkEventButton+0x50>
	case 2:
		event = EVENT_OF_BUTTON_PRESS_2_TIMES;
 80014d2:	2302      	movs	r3, #2
 80014d4:	73fb      	strb	r3, [r7, #15]
		break;
 80014d6:	e00b      	b.n	80014f0 <checkEventButton+0x50>
	case 3:
		event = EVENT_OF_BUTTON_PRESS_3_TIMES;
 80014d8:	2303      	movs	r3, #3
 80014da:	73fb      	strb	r3, [r7, #15]
		break;
 80014dc:	e008      	b.n	80014f0 <checkEventButton+0x50>
	case 4:
		event = EVENT_OF_BUTTON_PRESS_4_TIMES;
 80014de:	2304      	movs	r3, #4
 80014e0:	73fb      	strb	r3, [r7, #15]
		break;
 80014e2:	e005      	b.n	80014f0 <checkEventButton+0x50>
	case 5:
		event = EVENT_OF_BUTTON_PRESS_5_TIMES;
 80014e4:	2305      	movs	r3, #5
 80014e6:	73fb      	strb	r3, [r7, #15]
		break;
 80014e8:	e002      	b.n	80014f0 <checkEventButton+0x50>
	default:
		event = EVENT_OF_BUTTON_NOCLICK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]
		break;
 80014ee:	bf00      	nop
	}
	return event;
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop

08001500 <GUI_DrawPoint>:
                y:the y coordinate of the point
								color:the color value of the point
 * @retvalue   :None
********************************************************************/
void GUI_DrawPoint(u16 x,u16 y,u16 color)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
 800150a:	460b      	mov	r3, r1
 800150c:	80bb      	strh	r3, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	807b      	strh	r3, [r7, #2]
	LCD_SetCursor(x,y);
 8001512:	88ba      	ldrh	r2, [r7, #4]
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f001 fee9 	bl	80032f0 <LCD_SetCursor>
	Lcd_WriteData_16Bit(color); 
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	4618      	mov	r0, r3
 8001522:	f001 fc4f 	bl	8002dc4 <Lcd_WriteData_16Bit>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <LCD_Fill>:
								ey:the ending y coordinate of the specified area
								color:the filled color value
 * @retvalue   :None
********************************************************************/
void LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 color)
{  	
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	4604      	mov	r4, r0
 8001538:	4608      	mov	r0, r1
 800153a:	4611      	mov	r1, r2
 800153c:	461a      	mov	r2, r3
 800153e:	4623      	mov	r3, r4
 8001540:	80fb      	strh	r3, [r7, #6]
 8001542:	4603      	mov	r3, r0
 8001544:	80bb      	strh	r3, [r7, #4]
 8001546:	460b      	mov	r3, r1
 8001548:	807b      	strh	r3, [r7, #2]
 800154a:	4613      	mov	r3, r2
 800154c:	803b      	strh	r3, [r7, #0]
	u16 i,j;			
	u16 width=ex-sx+1;
 800154e:	887a      	ldrh	r2, [r7, #2]
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	b29b      	uxth	r3, r3
 8001556:	3301      	adds	r3, #1
 8001558:	817b      	strh	r3, [r7, #10]
	u16 height=ey-sy+1;
 800155a:	883a      	ldrh	r2, [r7, #0]
 800155c:	88bb      	ldrh	r3, [r7, #4]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	b29b      	uxth	r3, r3
 8001562:	3301      	adds	r3, #1
 8001564:	813b      	strh	r3, [r7, #8]
	LCD_SetWindows(sx,sy,ex,ey);
 8001566:	883b      	ldrh	r3, [r7, #0]
 8001568:	887a      	ldrh	r2, [r7, #2]
 800156a:	88b9      	ldrh	r1, [r7, #4]
 800156c:	88f8      	ldrh	r0, [r7, #6]
 800156e:	f001 fe6b 	bl	8003248 <LCD_SetWindows>
	for(i=0;i<height;i++)
 8001572:	2300      	movs	r3, #0
 8001574:	81fb      	strh	r3, [r7, #14]
 8001576:	e010      	b.n	800159a <LCD_Fill+0x6a>
	{
		for(j=0;j<width;j++)
 8001578:	2300      	movs	r3, #0
 800157a:	81bb      	strh	r3, [r7, #12]
 800157c:	e006      	b.n	800158c <LCD_Fill+0x5c>
		Lcd_WriteData_16Bit(color);
 800157e:	8c3b      	ldrh	r3, [r7, #32]
 8001580:	4618      	mov	r0, r3
 8001582:	f001 fc1f 	bl	8002dc4 <Lcd_WriteData_16Bit>
		for(j=0;j<width;j++)
 8001586:	89bb      	ldrh	r3, [r7, #12]
 8001588:	3301      	adds	r3, #1
 800158a:	81bb      	strh	r3, [r7, #12]
 800158c:	89ba      	ldrh	r2, [r7, #12]
 800158e:	897b      	ldrh	r3, [r7, #10]
 8001590:	429a      	cmp	r2, r3
 8001592:	d3f4      	bcc.n	800157e <LCD_Fill+0x4e>
	for(i=0;i<height;i++)
 8001594:	89fb      	ldrh	r3, [r7, #14]
 8001596:	3301      	adds	r3, #1
 8001598:	81fb      	strh	r3, [r7, #14]
 800159a:	89fa      	ldrh	r2, [r7, #14]
 800159c:	893b      	ldrh	r3, [r7, #8]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d3ea      	bcc.n	8001578 <LCD_Fill+0x48>
	}
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <LCD_Fill+0x94>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <LCD_Fill+0x94>)
 80015ac:	885b      	ldrh	r3, [r3, #2]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	2100      	movs	r1, #0
 80015b4:	2000      	movs	r0, #0
 80015b6:	f001 fe47 	bl	8003248 <LCD_SetWindows>
}
 80015ba:	bf00      	nop
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd90      	pop	{r4, r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200000fc 	.word	0x200000fc

080015c8 <LCD_DrawLine>:
								x2:the ending x coordinate of the line
								y2:the ending y coordinate of the line
 * @retvalue   :None
********************************************************************/
void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
{
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b08d      	sub	sp, #52	; 0x34
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4604      	mov	r4, r0
 80015d0:	4608      	mov	r0, r1
 80015d2:	4611      	mov	r1, r2
 80015d4:	461a      	mov	r2, r3
 80015d6:	4623      	mov	r3, r4
 80015d8:	80fb      	strh	r3, [r7, #6]
 80015da:	4603      	mov	r3, r0
 80015dc:	80bb      	strh	r3, [r7, #4]
 80015de:	460b      	mov	r3, r1
 80015e0:	807b      	strh	r3, [r7, #2]
 80015e2:	4613      	mov	r3, r2
 80015e4:	803b      	strh	r3, [r7, #0]
	u16 t; 
	int xerr=0,yerr=0,delta_x,delta_y,distance; 
 80015e6:	2300      	movs	r3, #0
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol; 

	delta_x=x2-x1;
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1; 
 80015f6:	883a      	ldrh	r2, [r7, #0]
 80015f8:	88bb      	ldrh	r3, [r7, #4]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	61fb      	str	r3, [r7, #28]
	uRow=x1; 
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	60fb      	str	r3, [r7, #12]
	uCol=y1; 
 8001602:	88bb      	ldrh	r3, [r7, #4]
 8001604:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001606:	6a3b      	ldr	r3, [r7, #32]
 8001608:	2b00      	cmp	r3, #0
 800160a:	dd02      	ble.n	8001612 <LCD_DrawLine+0x4a>
 800160c:	2301      	movs	r3, #1
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	e00b      	b.n	800162a <LCD_DrawLine+0x62>
	else if(delta_x==0)incx=0;
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <LCD_DrawLine+0x56>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	e005      	b.n	800162a <LCD_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;} 
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	6a3b      	ldr	r3, [r7, #32]
 8001626:	425b      	negs	r3, r3
 8001628:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1; 
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	2b00      	cmp	r3, #0
 800162e:	dd02      	ble.n	8001636 <LCD_DrawLine+0x6e>
 8001630:	2301      	movs	r3, #1
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	e00b      	b.n	800164e <LCD_DrawLine+0x86>
	else if(delta_y==0)incy=0;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <LCD_DrawLine+0x7a>
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	e005      	b.n	800164e <LCD_DrawLine+0x86>
	else{incy=-1;delta_y=-delta_y;} 
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	425b      	negs	r3, r3
 800164c:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x;
 800164e:	6a3a      	ldr	r2, [r7, #32]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	429a      	cmp	r2, r3
 8001654:	dd02      	ble.n	800165c <LCD_DrawLine+0x94>
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	61bb      	str	r3, [r7, #24]
 800165a:	e001      	b.n	8001660 <LCD_DrawLine+0x98>
	else distance=delta_y; 
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )
 8001660:	2300      	movs	r3, #0
 8001662:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001664:	e02a      	b.n	80016bc <LCD_DrawLine+0xf4>
	{  
		LCD_DrawPoint(uRow,uCol);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	b29b      	uxth	r3, r3
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	b292      	uxth	r2, r2
 800166e:	4611      	mov	r1, r2
 8001670:	4618      	mov	r0, r3
 8001672:	f001 fbdd 	bl	8002e30 <LCD_DrawPoint>
		xerr+=delta_x ; 
 8001676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	4413      	add	r3, r2
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y ; 
 800167e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	4413      	add	r3, r2
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance) 
 8001686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	429a      	cmp	r2, r3
 800168c:	dd07      	ble.n	800169e <LCD_DrawLine+0xd6>
		{ 
			xerr-=distance; 
 800168e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx; 
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	4413      	add	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
		} 
		if(yerr>distance) 
 800169e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	dd07      	ble.n	80016b6 <LCD_DrawLine+0xee>
		{ 
			yerr-=distance; 
 80016a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy; 
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4413      	add	r3, r2
 80016b4:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )
 80016b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016b8:	3301      	adds	r3, #1
 80016ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80016bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	3301      	adds	r3, #1
 80016c2:	429a      	cmp	r2, r3
 80016c4:	ddcf      	ble.n	8001666 <LCD_DrawLine+0x9e>
		} 
	}  
} 
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
 80016ca:	3734      	adds	r7, #52	; 0x34
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd90      	pop	{r4, r7, pc}

080016d0 <LCD_DrawRectangle>:
								x2:the ending x coordinate of the rectangle
								y2:the ending y coordinate of the rectangle
 * @retvalue   :None
******************************************************************************/
void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2)
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4604      	mov	r4, r0
 80016d8:	4608      	mov	r0, r1
 80016da:	4611      	mov	r1, r2
 80016dc:	461a      	mov	r2, r3
 80016de:	4623      	mov	r3, r4
 80016e0:	80fb      	strh	r3, [r7, #6]
 80016e2:	4603      	mov	r3, r0
 80016e4:	80bb      	strh	r3, [r7, #4]
 80016e6:	460b      	mov	r3, r1
 80016e8:	807b      	strh	r3, [r7, #2]
 80016ea:	4613      	mov	r3, r2
 80016ec:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x1,y1,x2,y1);
 80016ee:	88bb      	ldrh	r3, [r7, #4]
 80016f0:	887a      	ldrh	r2, [r7, #2]
 80016f2:	88b9      	ldrh	r1, [r7, #4]
 80016f4:	88f8      	ldrh	r0, [r7, #6]
 80016f6:	f7ff ff67 	bl	80015c8 <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x1,y2);
 80016fa:	883b      	ldrh	r3, [r7, #0]
 80016fc:	88fa      	ldrh	r2, [r7, #6]
 80016fe:	88b9      	ldrh	r1, [r7, #4]
 8001700:	88f8      	ldrh	r0, [r7, #6]
 8001702:	f7ff ff61 	bl	80015c8 <LCD_DrawLine>
	LCD_DrawLine(x1,y2,x2,y2);
 8001706:	883b      	ldrh	r3, [r7, #0]
 8001708:	887a      	ldrh	r2, [r7, #2]
 800170a:	8839      	ldrh	r1, [r7, #0]
 800170c:	88f8      	ldrh	r0, [r7, #6]
 800170e:	f7ff ff5b 	bl	80015c8 <LCD_DrawLine>
	LCD_DrawLine(x2,y1,x2,y2);
 8001712:	883b      	ldrh	r3, [r7, #0]
 8001714:	887a      	ldrh	r2, [r7, #2]
 8001716:	88b9      	ldrh	r1, [r7, #4]
 8001718:	8878      	ldrh	r0, [r7, #2]
 800171a:	f7ff ff55 	bl	80015c8 <LCD_DrawLine>
	LCD_SetColorPoint(BLACK);
 800171e:	2000      	movs	r0, #0
 8001720:	f001 fb76 	bl	8002e10 <LCD_SetColorPoint>
}  
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	bd90      	pop	{r4, r7, pc}

0800172c <_draw_circle_8>:
								y:the y coordinate relative to the Circular center 
								c:the color value of the circle
 * @retvalue   :None
******************************************************************************/  
void _draw_circle_8(int xc, int yc, int x, int y, u16 c)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	603b      	str	r3, [r7, #0]
	GUI_DrawPoint(xc + x, yc + y, c);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	b29a      	uxth	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	b29b      	uxth	r3, r3
 8001742:	4413      	add	r3, r2
 8001744:	b298      	uxth	r0, r3
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	b29a      	uxth	r2, r3
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b29b      	uxth	r3, r3
 800174e:	4413      	add	r3, r2
 8001750:	b29b      	uxth	r3, r3
 8001752:	8b3a      	ldrh	r2, [r7, #24]
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff fed3 	bl	8001500 <GUI_DrawPoint>

	GUI_DrawPoint(xc - x, yc + y, c);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	b29a      	uxth	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	b29b      	uxth	r3, r3
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	b298      	uxth	r0, r3
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	b29a      	uxth	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b29b      	uxth	r3, r3
 800176e:	4413      	add	r3, r2
 8001770:	b29b      	uxth	r3, r3
 8001772:	8b3a      	ldrh	r2, [r7, #24]
 8001774:	4619      	mov	r1, r3
 8001776:	f7ff fec3 	bl	8001500 <GUI_DrawPoint>

	GUI_DrawPoint(xc + x, yc - y, c);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	b29a      	uxth	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	b29b      	uxth	r3, r3
 8001782:	4413      	add	r3, r2
 8001784:	b298      	uxth	r0, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	b29a      	uxth	r2, r3
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	b29b      	uxth	r3, r3
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	b29b      	uxth	r3, r3
 8001792:	8b3a      	ldrh	r2, [r7, #24]
 8001794:	4619      	mov	r1, r3
 8001796:	f7ff feb3 	bl	8001500 <GUI_DrawPoint>

	GUI_DrawPoint(xc - x, yc - y, c);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	b29a      	uxth	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	b298      	uxth	r0, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	8b3a      	ldrh	r2, [r7, #24]
 80017b4:	4619      	mov	r1, r3
 80017b6:	f7ff fea3 	bl	8001500 <GUI_DrawPoint>

	GUI_DrawPoint(xc + y, yc + x, c);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	b298      	uxth	r0, r3
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	8b3a      	ldrh	r2, [r7, #24]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff fe93 	bl	8001500 <GUI_DrawPoint>

	GUI_DrawPoint(xc - y, yc + x, c);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	b29a      	uxth	r2, r3
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	b298      	uxth	r0, r3
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	4413      	add	r3, r2
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	8b3a      	ldrh	r2, [r7, #24]
 80017f4:	4619      	mov	r1, r3
 80017f6:	f7ff fe83 	bl	8001500 <GUI_DrawPoint>

	GUI_DrawPoint(xc + y, yc - x, c);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	b29b      	uxth	r3, r3
 8001802:	4413      	add	r3, r2
 8001804:	b298      	uxth	r0, r3
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	b29a      	uxth	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	b29b      	uxth	r3, r3
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	b29b      	uxth	r3, r3
 8001812:	8b3a      	ldrh	r2, [r7, #24]
 8001814:	4619      	mov	r1, r3
 8001816:	f7ff fe73 	bl	8001500 <GUI_DrawPoint>

	GUI_DrawPoint(xc - y, yc - x, c);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	b29a      	uxth	r2, r3
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	b29b      	uxth	r3, r3
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	b298      	uxth	r0, r3
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	b29a      	uxth	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	b29b      	uxth	r3, r3
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	b29b      	uxth	r3, r3
 8001832:	8b3a      	ldrh	r2, [r7, #24]
 8001834:	4619      	mov	r1, r3
 8001836:	f7ff fe63 	bl	8001500 <GUI_DrawPoint>
}
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <gui_circle>:
								r:Circular radius
								fill:1-filling,0-no filling
 * @retvalue   :None
******************************************************************************/  
void gui_circle(int xc, int yc,u16 c,int r, int fill)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b08a      	sub	sp, #40	; 0x28
 8001846:	af02      	add	r7, sp, #8
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	4613      	mov	r3, r2
 8001850:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	f1c3 0303 	rsb	r3, r3, #3
 8001862:	613b      	str	r3, [r7, #16]


	if (fill) 
 8001864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001866:	2b00      	cmp	r3, #0
 8001868:	d04f      	beq.n	800190a <gui_circle+0xc8>
	{
		// �����䣨��ʵ��Բ��
		while (x <= y) {
 800186a:	e029      	b.n	80018c0 <gui_circle+0x7e>
			for (yi = x; yi <= y; yi++)
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	e00a      	b.n	8001888 <gui_circle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	69fa      	ldr	r2, [r7, #28]
 800187a:	68b9      	ldr	r1, [r7, #8]
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f7ff ff55 	bl	800172c <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	429a      	cmp	r2, r3
 800188e:	ddf0      	ble.n	8001872 <gui_circle+0x30>

			if (d < 0) {
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	2b00      	cmp	r3, #0
 8001894:	da06      	bge.n	80018a4 <gui_circle+0x62>
				d = d + 4 * x + 6;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	009a      	lsls	r2, r3, #2
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4413      	add	r3, r2
 800189e:	3306      	adds	r3, #6
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	e00a      	b.n	80018ba <gui_circle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80018a4:	69fa      	ldr	r2, [r7, #28]
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	009a      	lsls	r2, r3, #2
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4413      	add	r3, r2
 80018b0:	330a      	adds	r3, #10
 80018b2:	613b      	str	r3, [r7, #16]
				y--;
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	61bb      	str	r3, [r7, #24]
			}
			x++;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3301      	adds	r3, #1
 80018be:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80018c0:	69fa      	ldr	r2, [r7, #28]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	ddd1      	ble.n	800186c <gui_circle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80018c8:	e023      	b.n	8001912 <gui_circle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f7ff ff29 	bl	800172c <_draw_circle_8>
			if (d < 0) {
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	da06      	bge.n	80018ee <gui_circle+0xac>
				d = d + 4 * x + 6;
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	009a      	lsls	r2, r3, #2
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	4413      	add	r3, r2
 80018e8:	3306      	adds	r3, #6
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	e00a      	b.n	8001904 <gui_circle+0xc2>
				d = d + 4 * (x - y) + 10;
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	009a      	lsls	r2, r3, #2
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	4413      	add	r3, r2
 80018fa:	330a      	adds	r3, #10
 80018fc:	613b      	str	r3, [r7, #16]
				y--;
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	3b01      	subs	r3, #1
 8001902:	61bb      	str	r3, [r7, #24]
			x++;
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	3301      	adds	r3, #1
 8001908:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	429a      	cmp	r2, r3
 8001910:	dddb      	ble.n	80018ca <gui_circle+0x88>
}
 8001912:	bf00      	nop
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <_swap>:
	LCD_DrawLine(x1,y1,x2,y2);
	LCD_DrawLine(x2,y2,x0,y0);
}

static void _swap(u16 *a, u16 *b)
{
 800191a:	b480      	push	{r7}
 800191c:	b085      	sub	sp, #20
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
	u16 tmp;
  tmp = *a;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	81fb      	strh	r3, [r7, #14]
	*a = *b;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	881a      	ldrh	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	801a      	strh	r2, [r3, #0]
	*b = tmp;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	89fa      	ldrh	r2, [r7, #14]
 8001936:	801a      	strh	r2, [r3, #0]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <Fill_Triangel>:
								x2:the ending x coordinate of the triangular edge 
								y2:the ending y coordinate of the triangular edge 
 * @retvalue   :None
******************************************************************************/ 
void Fill_Triangel(u16 x0,u16 y0,u16 x1,u16 y1,u16 x2,u16 y2)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b08f      	sub	sp, #60	; 0x3c
 8001948:	af02      	add	r7, sp, #8
 800194a:	4604      	mov	r4, r0
 800194c:	4608      	mov	r0, r1
 800194e:	4611      	mov	r1, r2
 8001950:	461a      	mov	r2, r3
 8001952:	4623      	mov	r3, r4
 8001954:	80fb      	strh	r3, [r7, #6]
 8001956:	4603      	mov	r3, r0
 8001958:	80bb      	strh	r3, [r7, #4]
 800195a:	460b      	mov	r3, r1
 800195c:	807b      	strh	r3, [r7, #2]
 800195e:	4613      	mov	r3, r2
 8001960:	803b      	strh	r3, [r7, #0]
	u16 a, b, y, last;
	int dx01, dy01, dx02, dy02, dx12, dy12;
	long sa = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
	long sb = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
 	if (y0 > y1) 
 800196a:	88ba      	ldrh	r2, [r7, #4]
 800196c:	883b      	ldrh	r3, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d90b      	bls.n	800198a <Fill_Triangel+0x46>
	{
    _swap(&y0,&y1); 
 8001972:	463a      	mov	r2, r7
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ffce 	bl	800191a <_swap>
		_swap(&x0,&x1);
 800197e:	1cba      	adds	r2, r7, #2
 8001980:	1dbb      	adds	r3, r7, #6
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ffc8 	bl	800191a <_swap>
 	}
 	if (y1 > y2) 
 800198a:	883a      	ldrh	r2, [r7, #0]
 800198c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001990:	429a      	cmp	r2, r3
 8001992:	d90c      	bls.n	80019ae <Fill_Triangel+0x6a>
	{
    _swap(&y2,&y1); 
 8001994:	463a      	mov	r2, r7
 8001996:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ffbc 	bl	800191a <_swap>
		_swap(&x2,&x1);
 80019a2:	1cbb      	adds	r3, r7, #2
 80019a4:	4619      	mov	r1, r3
 80019a6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80019aa:	f7ff ffb6 	bl	800191a <_swap>
 	}
  if (y0 > y1) 
 80019ae:	88ba      	ldrh	r2, [r7, #4]
 80019b0:	883b      	ldrh	r3, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d90b      	bls.n	80019ce <Fill_Triangel+0x8a>
	{
    _swap(&y0,&y1); 
 80019b6:	463a      	mov	r2, r7
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ffac 	bl	800191a <_swap>
		_swap(&x0,&x1);
 80019c2:	1cba      	adds	r2, r7, #2
 80019c4:	1dbb      	adds	r3, r7, #6
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ffa6 	bl	800191a <_swap>
  }
	if(y0 == y2) 
 80019ce:	88ba      	ldrh	r2, [r7, #4]
 80019d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d12c      	bne.n	8001a32 <Fill_Triangel+0xee>
	{ 
		a = b = x0;
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	813b      	strh	r3, [r7, #8]
 80019dc:	893b      	ldrh	r3, [r7, #8]
 80019de:	817b      	strh	r3, [r7, #10]
		if(x1 < a)
 80019e0:	887a      	ldrh	r2, [r7, #2]
 80019e2:	897b      	ldrh	r3, [r7, #10]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d202      	bcs.n	80019ee <Fill_Triangel+0xaa>
    {
			a = x1;
 80019e8:	887b      	ldrh	r3, [r7, #2]
 80019ea:	817b      	strh	r3, [r7, #10]
 80019ec:	e005      	b.n	80019fa <Fill_Triangel+0xb6>
    }
    else if(x1 > b)
 80019ee:	887a      	ldrh	r2, [r7, #2]
 80019f0:	893b      	ldrh	r3, [r7, #8]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d901      	bls.n	80019fa <Fill_Triangel+0xb6>
    {
			b = x1;
 80019f6:	887b      	ldrh	r3, [r7, #2]
 80019f8:	813b      	strh	r3, [r7, #8]
    }
    if(x2 < a)
 80019fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80019fe:	897b      	ldrh	r3, [r7, #10]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d203      	bcs.n	8001a0c <Fill_Triangel+0xc8>
    {
			a = x2;
 8001a04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001a08:	817b      	strh	r3, [r7, #10]
 8001a0a:	e007      	b.n	8001a1c <Fill_Triangel+0xd8>
    }
		else if(x2 > b)
 8001a0c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001a10:	893b      	ldrh	r3, [r7, #8]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d902      	bls.n	8001a1c <Fill_Triangel+0xd8>
    {
			b = x2;
 8001a16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001a1a:	813b      	strh	r3, [r7, #8]
    }
		LCD_Fill(a,y0,b,y0,POINT_COLOR);
 8001a1c:	8978      	ldrh	r0, [r7, #10]
 8001a1e:	88b9      	ldrh	r1, [r7, #4]
 8001a20:	893a      	ldrh	r2, [r7, #8]
 8001a22:	88bc      	ldrh	r4, [r7, #4]
 8001a24:	4b5b      	ldr	r3, [pc, #364]	; (8001b94 <Fill_Triangel+0x250>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	4623      	mov	r3, r4
 8001a2c:	f7ff fd80 	bl	8001530 <LCD_Fill>
 8001a30:	e0ad      	b.n	8001b8e <Fill_Triangel+0x24a>
    return;
	}
	dx01 = x1 - x0;
 8001a32:	887b      	ldrh	r3, [r7, #2]
 8001a34:	461a      	mov	r2, r3
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	623b      	str	r3, [r7, #32]
	dy01 = y1 - y0;
 8001a3c:	883b      	ldrh	r3, [r7, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	88bb      	ldrh	r3, [r7, #4]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	61fb      	str	r3, [r7, #28]
	dx02 = x2 - x0;
 8001a46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	61bb      	str	r3, [r7, #24]
	dy02 = y2 - y0;
 8001a52:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001a56:	461a      	mov	r2, r3
 8001a58:	88bb      	ldrh	r3, [r7, #4]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	617b      	str	r3, [r7, #20]
	dx12 = x2 - x1;
 8001a5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001a62:	461a      	mov	r2, r3
 8001a64:	887b      	ldrh	r3, [r7, #2]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	613b      	str	r3, [r7, #16]
	dy12 = y2 - y1;
 8001a6a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001a6e:	461a      	mov	r2, r3
 8001a70:	883b      	ldrh	r3, [r7, #0]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	60fb      	str	r3, [r7, #12]
	
	if(y1 == y2)
 8001a76:	883a      	ldrh	r2, [r7, #0]
 8001a78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d102      	bne.n	8001a86 <Fill_Triangel+0x142>
	{
		last = y1; 
 8001a80:	883b      	ldrh	r3, [r7, #0]
 8001a82:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001a84:	e002      	b.n	8001a8c <Fill_Triangel+0x148>
	}
  else
	{
		last = y1-1; 
 8001a86:	883b      	ldrh	r3, [r7, #0]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	}
	for(y=y0; y<=last; y++) 
 8001a8c:	88bb      	ldrh	r3, [r7, #4]
 8001a8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001a90:	e032      	b.n	8001af8 <Fill_Triangel+0x1b4>
	{
		a = x0 + sa / dy01;
 8001a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	817b      	strh	r3, [r7, #10]
		b = x0 + sb / dy02;
 8001aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	813b      	strh	r3, [r7, #8]
		sa += dx01;
 8001ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
 8001aba:	4413      	add	r3, r2
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
    sb += dx02;
 8001abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
    if(a > b)
 8001ac6:	897a      	ldrh	r2, [r7, #10]
 8001ac8:	893b      	ldrh	r3, [r7, #8]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d907      	bls.n	8001ade <Fill_Triangel+0x19a>
    {
			_swap(&a,&b);
 8001ace:	f107 0208 	add.w	r2, r7, #8
 8001ad2:	f107 030a 	add.w	r3, r7, #10
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff1e 	bl	800191a <_swap>
		}
		LCD_Fill(a,y,b,y,POINT_COLOR);
 8001ade:	8978      	ldrh	r0, [r7, #10]
 8001ae0:	893a      	ldrh	r2, [r7, #8]
 8001ae2:	4b2c      	ldr	r3, [pc, #176]	; (8001b94 <Fill_Triangel+0x250>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8001ae8:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	4623      	mov	r3, r4
 8001aee:	f7ff fd1f 	bl	8001530 <LCD_Fill>
	for(y=y0; y<=last; y++) 
 8001af2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001af4:	3301      	adds	r3, #1
 8001af6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001af8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001afa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d9c8      	bls.n	8001a92 <Fill_Triangel+0x14e>
	}
	sa = dx12 * (y - y1);
 8001b00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b02:	883a      	ldrh	r2, [r7, #0]
 8001b04:	1a9a      	subs	r2, r3, r2
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	fb02 f303 	mul.w	r3, r2, r3
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
	sb = dx02 * (y - y0);
 8001b0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b10:	88ba      	ldrh	r2, [r7, #4]
 8001b12:	1a9a      	subs	r2, r3, r2
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	fb02 f303 	mul.w	r3, r2, r3
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
	for(; y<=y2; y++) 
 8001b1c:	e032      	b.n	8001b84 <Fill_Triangel+0x240>
	{
		a = x1 + sa / dy12;
 8001b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	887b      	ldrh	r3, [r7, #2]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	817b      	strh	r3, [r7, #10]
		b = x0 + sb / dy02;
 8001b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	813b      	strh	r3, [r7, #8]
		sa += dx12;
 8001b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4413      	add	r3, r2
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
		sb += dx02;
 8001b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	4413      	add	r3, r2
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
		if(a > b)
 8001b52:	897a      	ldrh	r2, [r7, #10]
 8001b54:	893b      	ldrh	r3, [r7, #8]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d907      	bls.n	8001b6a <Fill_Triangel+0x226>
		{
			_swap(&a,&b);
 8001b5a:	f107 0208 	add.w	r2, r7, #8
 8001b5e:	f107 030a 	add.w	r3, r7, #10
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fed8 	bl	800191a <_swap>
		}
		LCD_Fill(a,y,b,y,POINT_COLOR);
 8001b6a:	8978      	ldrh	r0, [r7, #10]
 8001b6c:	893a      	ldrh	r2, [r7, #8]
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <Fill_Triangel+0x250>)
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8001b74:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	4623      	mov	r3, r4
 8001b7a:	f7ff fcd9 	bl	8001530 <LCD_Fill>
	for(; y<=y2; y++) 
 8001b7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b80:	3301      	adds	r3, #1
 8001b82:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001b84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001b88:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d9c7      	bls.n	8001b1e <Fill_Triangel+0x1da>
	}
}
 8001b8e:	3734      	adds	r7, #52	; 0x34
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd90      	pop	{r4, r7, pc}
 8001b94:	2000010a 	.word	0x2000010a

08001b98 <LCD_ShowTitle>:
				size:the size of display character
				mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void LCD_ShowTitle(u16 sizeBox,u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af04      	add	r7, sp, #16
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	81fb      	strh	r3, [r7, #14]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	81bb      	strh	r3, [r7, #12]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	817b      	strh	r3, [r7, #10]
	LCD_ClearCursor(0, 0, 320, sizeBox, WHITE);
 8001bac:	89fb      	ldrh	r3, [r7, #14]
 8001bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bb2:	9200      	str	r2, [sp, #0]
 8001bb4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bb8:	2100      	movs	r1, #0
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f001 f992 	bl	8002ee4 <LCD_ClearCursor>
	LCD_Fill(0, 0, 320, sizeBox, bc);
 8001bc0:	89fa      	ldrh	r2, [r7, #14]
 8001bc2:	897b      	ldrh	r3, [r7, #10]
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f7ff fcae 	bl	8001530 <LCD_Fill>
	Gui_StrCenter(0,sizeBox-size,fc,bc,str,16,1);
 8001bd4:	7e3b      	ldrb	r3, [r7, #24]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	89fa      	ldrh	r2, [r7, #14]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	b299      	uxth	r1, r3
 8001bde:	8978      	ldrh	r0, [r7, #10]
 8001be0:	89ba      	ldrh	r2, [r7, #12]
 8001be2:	2301      	movs	r3, #1
 8001be4:	9302      	str	r3, [sp, #8]
 8001be6:	2310      	movs	r3, #16
 8001be8:	9301      	str	r3, [sp, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f001 f851 	bl	8002c98 <Gui_StrCenter>
}
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <LCD_ShowOption>:
				size:the size of display character
				mode:0-no overlying,1-overlying
 * @retvalue   :(u16) Cursor of the next option
******************************************************************************/
u16 LCD_ShowOption(u16 sizeBox,u16 y,u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{
 8001bfe:	b590      	push	{r4, r7, lr}
 8001c00:	b089      	sub	sp, #36	; 0x24
 8001c02:	af04      	add	r7, sp, #16
 8001c04:	4604      	mov	r4, r0
 8001c06:	4608      	mov	r0, r1
 8001c08:	4611      	mov	r1, r2
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4623      	mov	r3, r4
 8001c0e:	80fb      	strh	r3, [r7, #6]
 8001c10:	4603      	mov	r3, r0
 8001c12:	80bb      	strh	r3, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	807b      	strh	r3, [r7, #2]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	803b      	strh	r3, [r7, #0]
	u16 wCursor;
	LCD_ClearCursor(10, y, 310, sizeBox+y, bc);
 8001c1c:	88fa      	ldrh	r2, [r7, #6]
 8001c1e:	88bb      	ldrh	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	88b9      	ldrh	r1, [r7, #4]
 8001c26:	883b      	ldrh	r3, [r7, #0]
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	f44f 729b 	mov.w	r2, #310	; 0x136
 8001c30:	200a      	movs	r0, #10
 8001c32:	f001 f957 	bl	8002ee4 <LCD_ClearCursor>
	LCD_Fill(10, y, 310, y+sizeBox, bc);
 8001c36:	88ba      	ldrh	r2, [r7, #4]
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	88b9      	ldrh	r1, [r7, #4]
 8001c40:	883b      	ldrh	r3, [r7, #0]
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	4613      	mov	r3, r2
 8001c46:	f44f 729b 	mov.w	r2, #310	; 0x136
 8001c4a:	200a      	movs	r0, #10
 8001c4c:	f7ff fc70 	bl	8001530 <LCD_Fill>
	Gui_StrCenter(0, y, fc, bc, str, size, mode);
 8001c50:	8838      	ldrh	r0, [r7, #0]
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	88b9      	ldrh	r1, [r7, #4]
 8001c56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c5a:	9302      	str	r3, [sp, #8]
 8001c5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	4603      	mov	r3, r0
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f001 f815 	bl	8002c98 <Gui_StrCenter>
	wCursor = sizeBox+y+10;
 8001c6e:	88fa      	ldrh	r2, [r7, #6]
 8001c70:	88bb      	ldrh	r3, [r7, #4]
 8001c72:	4413      	add	r3, r2
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	330a      	adds	r3, #10
 8001c78:	81fb      	strh	r3, [r7, #14]
	return wCursor;
 8001c7a:	89fb      	ldrh	r3, [r7, #14]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd90      	pop	{r4, r7, pc}

08001c84 <LCD_ShowChar>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void LCD_ShowChar(u16 x,u16 y,u16 fc, u16 bc, u8 num,u8 size,u8 mode)
{  
 8001c84:	b590      	push	{r4, r7, lr}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	4608      	mov	r0, r1
 8001c8e:	4611      	mov	r1, r2
 8001c90:	461a      	mov	r2, r3
 8001c92:	4623      	mov	r3, r4
 8001c94:	80fb      	strh	r3, [r7, #6]
 8001c96:	4603      	mov	r3, r0
 8001c98:	80bb      	strh	r3, [r7, #4]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	807b      	strh	r3, [r7, #2]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	803b      	strh	r3, [r7, #0]
    u8 temp;
    u8 pos,t;
	u16 colortemp=POINT_COLOR;      
 8001ca2:	4b62      	ldr	r3, [pc, #392]	; (8001e2c <LCD_ShowChar+0x1a8>)
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	817b      	strh	r3, [r7, #10]
		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8001ca8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cac:	3b20      	subs	r3, #32
 8001cae:	f887 3020 	strb.w	r3, [r7, #32]
	LCD_SetWindows(x,y,x+size/2-1,y+size-1);//���õ���������ʾ����
 8001cb2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001cb6:	085b      	lsrs	r3, r3, #1
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29c      	uxth	r4, r3
 8001cc6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	88bb      	ldrh	r3, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	88b9      	ldrh	r1, [r7, #4]
 8001cd8:	88f8      	ldrh	r0, [r7, #6]
 8001cda:	4622      	mov	r2, r4
 8001cdc:	f001 fab4 	bl	8003248 <LCD_SetWindows>
	if(!mode) //�ǵ��ӷ�ʽ
 8001ce0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d143      	bne.n	8001d70 <LCD_ShowChar+0xec>
	{		
		for(pos=0;pos<size;pos++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	73bb      	strb	r3, [r7, #14]
 8001cec:	e03a      	b.n	8001d64 <LCD_ShowChar+0xe0>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 8001cee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001cf2:	2b0c      	cmp	r3, #12
 8001cf4:	d10c      	bne.n	8001d10 <LCD_ShowChar+0x8c>
 8001cf6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001cfa:	7bb9      	ldrb	r1, [r7, #14]
 8001cfc:	484c      	ldr	r0, [pc, #304]	; (8001e30 <LCD_ShowChar+0x1ac>)
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4403      	add	r3, r0
 8001d08:	440b      	add	r3, r1
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	73fb      	strb	r3, [r7, #15]
 8001d0e:	e008      	b.n	8001d22 <LCD_ShowChar+0x9e>
			else temp=asc2_1608[num][pos];		 //����1608����
 8001d10:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d14:	7bbb      	ldrb	r3, [r7, #14]
 8001d16:	4947      	ldr	r1, [pc, #284]	; (8001e34 <LCD_ShowChar+0x1b0>)
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	440a      	add	r2, r1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	737b      	strb	r3, [r7, #13]
 8001d26:	e013      	b.n	8001d50 <LCD_ShowChar+0xcc>
		    {                 
		        if(temp&0x01)Lcd_WriteData_16Bit(fc); 
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d004      	beq.n	8001d3c <LCD_ShowChar+0xb8>
 8001d32:	887b      	ldrh	r3, [r7, #2]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f001 f845 	bl	8002dc4 <Lcd_WriteData_16Bit>
 8001d3a:	e003      	b.n	8001d44 <LCD_ShowChar+0xc0>
				else Lcd_WriteData_16Bit(bc); 
 8001d3c:	883b      	ldrh	r3, [r7, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f001 f840 	bl	8002dc4 <Lcd_WriteData_16Bit>
				temp>>=1; 
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	085b      	lsrs	r3, r3, #1
 8001d48:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8001d4a:	7b7b      	ldrb	r3, [r7, #13]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	737b      	strb	r3, [r7, #13]
 8001d50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d54:	085b      	lsrs	r3, r3, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	7b7a      	ldrb	r2, [r7, #13]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d3e4      	bcc.n	8001d28 <LCD_ShowChar+0xa4>
		for(pos=0;pos<size;pos++)
 8001d5e:	7bbb      	ldrb	r3, [r7, #14]
 8001d60:	3301      	adds	r3, #1
 8001d62:	73bb      	strb	r3, [r7, #14]
 8001d64:	7bba      	ldrb	r2, [r7, #14]
 8001d66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d3bf      	bcc.n	8001cee <LCD_ShowChar+0x6a>
 8001d6e:	e049      	b.n	8001e04 <LCD_ShowChar+0x180>
		    }
			
		}	
	}else//���ӷ�ʽ
	{
		for(pos=0;pos<size;pos++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	73bb      	strb	r3, [r7, #14]
 8001d74:	e041      	b.n	8001dfa <LCD_ShowChar+0x176>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 8001d76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d7a:	2b0c      	cmp	r3, #12
 8001d7c:	d10c      	bne.n	8001d98 <LCD_ShowChar+0x114>
 8001d7e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d82:	7bb9      	ldrb	r1, [r7, #14]
 8001d84:	482a      	ldr	r0, [pc, #168]	; (8001e30 <LCD_ShowChar+0x1ac>)
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4403      	add	r3, r0
 8001d90:	440b      	add	r3, r1
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	73fb      	strb	r3, [r7, #15]
 8001d96:	e008      	b.n	8001daa <LCD_ShowChar+0x126>
			else temp=asc2_1608[num][pos];		 //����1608����
 8001d98:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d9c:	7bbb      	ldrb	r3, [r7, #14]
 8001d9e:	4925      	ldr	r1, [pc, #148]	; (8001e34 <LCD_ShowChar+0x1b0>)
 8001da0:	0112      	lsls	r2, r2, #4
 8001da2:	440a      	add	r2, r1
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	737b      	strb	r3, [r7, #13]
 8001dae:	e01a      	b.n	8001de6 <LCD_ShowChar+0x162>
		    {   
				POINT_COLOR=fc;              
 8001db0:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <LCD_ShowChar+0x1a8>)
 8001db2:	887b      	ldrh	r3, [r7, #2]
 8001db4:	8013      	strh	r3, [r2, #0]
		        if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//��һ����    
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00c      	beq.n	8001dda <LCD_ShowChar+0x156>
 8001dc0:	7b7b      	ldrb	r3, [r7, #13]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	b298      	uxth	r0, r3
 8001dca:	7bbb      	ldrb	r3, [r7, #14]
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	88bb      	ldrh	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f001 f82b 	bl	8002e30 <LCD_DrawPoint>
		        temp>>=1; 
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	085b      	lsrs	r3, r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8001de0:	7b7b      	ldrb	r3, [r7, #13]
 8001de2:	3301      	adds	r3, #1
 8001de4:	737b      	strb	r3, [r7, #13]
 8001de6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001dea:	085b      	lsrs	r3, r3, #1
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	7b7a      	ldrb	r2, [r7, #13]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d3dd      	bcc.n	8001db0 <LCD_ShowChar+0x12c>
		for(pos=0;pos<size;pos++)
 8001df4:	7bbb      	ldrb	r3, [r7, #14]
 8001df6:	3301      	adds	r3, #1
 8001df8:	73bb      	strb	r3, [r7, #14]
 8001dfa:	7bba      	ldrb	r2, [r7, #14]
 8001dfc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d3b8      	bcc.n	8001d76 <LCD_ShowChar+0xf2>
		    }
		}
	}
	POINT_COLOR=colortemp;	
 8001e04:	4a09      	ldr	r2, [pc, #36]	; (8001e2c <LCD_ShowChar+0x1a8>)
 8001e06:	897b      	ldrh	r3, [r7, #10]
 8001e08:	8013      	strh	r3, [r2, #0]
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��    	   	 	  
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <LCD_ShowChar+0x1b4>)
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <LCD_ShowChar+0x1b4>)
 8001e14:	885b      	ldrh	r3, [r3, #2]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f001 fa13 	bl	8003248 <LCD_SetWindows>
}
 8001e22:	bf00      	nop
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd90      	pop	{r4, r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	2000010a 	.word	0x2000010a
 8001e30:	0800610c 	.word	0x0800610c
 8001e34:	08006580 	.word	0x08006580
 8001e38:	200000fc 	.word	0x200000fc

08001e3c <LCD_ShowString>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/   	  
void LCD_ShowString(u16 x,u16 y,u8 size,u8 *p,u8 mode)
{         
 8001e3c:	b5b0      	push	{r4, r5, r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af04      	add	r7, sp, #16
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	4603      	mov	r3, r0
 8001e46:	81fb      	strh	r3, [r7, #14]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	81bb      	strh	r3, [r7, #12]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	72fb      	strb	r3, [r7, #11]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8001e50:	e025      	b.n	8001e9e <LCD_ShowString+0x62>
    {   
		if(x>(lcddev.width-1)||y>(lcddev.height-1)) 
 8001e52:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <LCD_ShowString+0x7c>)
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	89fa      	ldrh	r2, [r7, #14]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d229      	bcs.n	8001eb0 <LCD_ShowString+0x74>
 8001e5c:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <LCD_ShowString+0x7c>)
 8001e5e:	885b      	ldrh	r3, [r3, #2]
 8001e60:	89ba      	ldrh	r2, [r7, #12]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d224      	bcs.n	8001eb0 <LCD_ShowString+0x74>
		return;     
        LCD_ShowChar(x,y,POINT_COLOR,BACK_COLOR,*p,size,mode);
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <LCD_ShowString+0x80>)
 8001e68:	881c      	ldrh	r4, [r3, #0]
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <LCD_ShowString+0x84>)
 8001e6c:	881d      	ldrh	r5, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	89b9      	ldrh	r1, [r7, #12]
 8001e74:	89f8      	ldrh	r0, [r7, #14]
 8001e76:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e7a:	9202      	str	r2, [sp, #8]
 8001e7c:	7afa      	ldrb	r2, [r7, #11]
 8001e7e:	9201      	str	r2, [sp, #4]
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	462b      	mov	r3, r5
 8001e84:	4622      	mov	r2, r4
 8001e86:	f7ff fefd 	bl	8001c84 <LCD_ShowChar>
        x+=size/2;
 8001e8a:	7afb      	ldrb	r3, [r7, #11]
 8001e8c:	085b      	lsrs	r3, r3, #1
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	89fb      	ldrh	r3, [r7, #14]
 8001e94:	4413      	add	r3, r2
 8001e96:	81fb      	strh	r3, [r7, #14]
        p++;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	607b      	str	r3, [r7, #4]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b7e      	cmp	r3, #126	; 0x7e
 8001ea4:	d805      	bhi.n	8001eb2 <LCD_ShowString+0x76>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b1f      	cmp	r3, #31
 8001eac:	d8d1      	bhi.n	8001e52 <LCD_ShowString+0x16>
 8001eae:	e000      	b.n	8001eb2 <LCD_ShowString+0x76>
		return;     
 8001eb0:	bf00      	nop
    }  
} 
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb8:	200000fc 	.word	0x200000fc
 8001ebc:	2000010a 	.word	0x2000010a
 8001ec0:	20000024 	.word	0x20000024

08001ec4 <LCD_ShowNumAndStr>:
 * @parameters :m:the multiplier
                n:the power
 * @retvalue   :the nth power of m
******************************************************************************/ 
void LCD_ShowNumAndStr(u16 x,u16 y,u8 size,char *pStr1,u8 lengthStr,u32 num,u8 lengthNum,u8 mode)
{
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b08f      	sub	sp, #60	; 0x3c
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	4603      	mov	r3, r0
 8001ece:	81fb      	strh	r3, [r7, #14]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	81bb      	strh	r3, [r7, #12]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	72fb      	strb	r3, [r7, #11]
	char StrNum[8],StrNumFinal[8];
	memset(StrNum,0,sizeof(StrNum));
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	2208      	movs	r2, #8
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f004 f885 	bl	8005ff0 <memset>
	memset(StrNumFinal,0,sizeof(StrNumFinal));
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	2208      	movs	r2, #8
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f004 f87e 	bl	8005ff0 <memset>
	u32 numTemp,temp;
	u8 i = 0,length;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	LCD_ShowString(x,y,size,(u8*)pStr1,mode);
 8001efa:	7afa      	ldrb	r2, [r7, #11]
 8001efc:	89b9      	ldrh	r1, [r7, #12]
 8001efe:	89f8      	ldrh	r0, [r7, #14]
 8001f00:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f7ff ff98 	bl	8001e3c <LCD_ShowString>
	numTemp = num;
 8001f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	LCD_DrawLine(x, y+ size, 320-x , y+ size);
 8001f10:	7afb      	ldrb	r3, [r7, #11]
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	89bb      	ldrh	r3, [r7, #12]
 8001f16:	4413      	add	r3, r2
 8001f18:	b299      	uxth	r1, r3
 8001f1a:	89fb      	ldrh	r3, [r7, #14]
 8001f1c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001f20:	b29c      	uxth	r4, r3
 8001f22:	7afb      	ldrb	r3, [r7, #11]
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	89bb      	ldrh	r3, [r7, #12]
 8001f28:	4413      	add	r3, r2
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	89f8      	ldrh	r0, [r7, #14]
 8001f2e:	4622      	mov	r2, r4
 8001f30:	f7ff fb4a 	bl	80015c8 <LCD_DrawLine>
	LCD_DrawLine(x + lengthStr-2, y - 4, x+ lengthStr-2, y + size );
 8001f34:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	89fb      	ldrh	r3, [r7, #14]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	3b02      	subs	r3, #2
 8001f42:	b298      	uxth	r0, r3
 8001f44:	89bb      	ldrh	r3, [r7, #12]
 8001f46:	3b04      	subs	r3, #4
 8001f48:	b299      	uxth	r1, r3
 8001f4a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	89fb      	ldrh	r3, [r7, #14]
 8001f52:	4413      	add	r3, r2
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3b02      	subs	r3, #2
 8001f58:	b29c      	uxth	r4, r3
 8001f5a:	7afb      	ldrb	r3, [r7, #11]
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	89bb      	ldrh	r3, [r7, #12]
 8001f60:	4413      	add	r3, r2
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	4622      	mov	r2, r4
 8001f66:	f7ff fb2f 	bl	80015c8 <LCD_DrawLine>
	if(numTemp == 0)
 8001f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d12c      	bne.n	8001fca <LCD_ShowNumAndStr+0x106>
	{
		StrNumFinal[0] += 48;
 8001f70:	7d3b      	ldrb	r3, [r7, #20]
 8001f72:	3330      	adds	r3, #48	; 0x30
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	753b      	strb	r3, [r7, #20]
 8001f78:	e04f      	b.n	800201a <LCD_ShowNumAndStr+0x156>
	}else{
		while(numTemp !=0)
		{
			temp = numTemp %10;
 8001f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f7c:	4b31      	ldr	r3, [pc, #196]	; (8002044 <LCD_ShowNumAndStr+0x180>)
 8001f7e:	fba3 1302 	umull	r1, r3, r3, r2
 8001f82:	08d9      	lsrs	r1, r3, #3
 8001f84:	460b      	mov	r3, r1
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	62bb      	str	r3, [r7, #40]	; 0x28
			if(temp<10)
 8001f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f92:	2b09      	cmp	r3, #9
 8001f94:	d803      	bhi.n	8001f9e <LCD_ShowNumAndStr+0xda>
			{
				temp +=48;
 8001f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f98:	3330      	adds	r3, #48	; 0x30
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f9c:	e002      	b.n	8001fa4 <LCD_ShowNumAndStr+0xe0>
			}else
			{
				temp +=55;
 8001f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa0:	3337      	adds	r3, #55	; 0x37
 8001fa2:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			StrNum[i] = temp;
 8001fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	3330      	adds	r3, #48	; 0x30
 8001fae:	443b      	add	r3, r7
 8001fb0:	f803 2c14 	strb.w	r2, [r3, #-20]
			i++;
 8001fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fb8:	3301      	adds	r3, #1
 8001fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			numTemp /=10;
 8001fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc0:	4a20      	ldr	r2, [pc, #128]	; (8002044 <LCD_ShowNumAndStr+0x180>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	08db      	lsrs	r3, r3, #3
 8001fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
		while(numTemp !=0)
 8001fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1d4      	bne.n	8001f7a <LCD_ShowNumAndStr+0xb6>
		}
		length = i-1;
 8001fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		for(u8 k = 0; k <= length; k++)
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001fe0:	e015      	b.n	800200e <LCD_ShowNumAndStr+0x14a>
		{
			i--;
 8001fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			StrNumFinal[k] = StrNum[i];
 8001fec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001ff0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ff4:	3230      	adds	r2, #48	; 0x30
 8001ff6:	443a      	add	r2, r7
 8001ff8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8001ffc:	3330      	adds	r3, #48	; 0x30
 8001ffe:	443b      	add	r3, r7
 8002000:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(u8 k = 0; k <= length; k++)
 8002004:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002008:	3301      	adds	r3, #1
 800200a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800200e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002012:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002016:	429a      	cmp	r2, r3
 8002018:	d9e3      	bls.n	8001fe2 <LCD_ShowNumAndStr+0x11e>
		}
	}

	LCD_ShowString(x+lengthStr,y,size,(u8*)StrNumFinal,mode);
 800201a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800201e:	b29a      	uxth	r2, r3
 8002020:	89fb      	ldrh	r3, [r7, #14]
 8002022:	4413      	add	r3, r2
 8002024:	b298      	uxth	r0, r3
 8002026:	f107 0414 	add.w	r4, r7, #20
 800202a:	7afa      	ldrb	r2, [r7, #11]
 800202c:	89b9      	ldrh	r1, [r7, #12]
 800202e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	4623      	mov	r3, r4
 8002036:	f7ff ff01 	bl	8001e3c <LCD_ShowString>


}
 800203a:	bf00      	nop
 800203c:	3734      	adds	r7, #52	; 0x34
 800203e:	46bd      	mov	sp, r7
 8002040:	bd90      	pop	{r4, r7, pc}
 8002042:	bf00      	nop
 8002044:	cccccccd 	.word	0xcccccccd

08002048 <LCD_ShowStrAndStr>:
 * @parameters :m:the multiplier
                n:the power
 * @retvalue   :the nth power of m
******************************************************************************/
void LCD_ShowStrAndStr(u16 x,u16 y,u8 size,char *pStr1,u8 length1,char *pStr2,u8 length2,u8 mode)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b087      	sub	sp, #28
 800204c:	af02      	add	r7, sp, #8
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	4603      	mov	r3, r0
 8002052:	81fb      	strh	r3, [r7, #14]
 8002054:	460b      	mov	r3, r1
 8002056:	81bb      	strh	r3, [r7, #12]
 8002058:	4613      	mov	r3, r2
 800205a:	72fb      	strb	r3, [r7, #11]
	LCD_ShowString(x,y,size,(u8*)pStr1,mode);
 800205c:	7afa      	ldrb	r2, [r7, #11]
 800205e:	89b9      	ldrh	r1, [r7, #12]
 8002060:	89f8      	ldrh	r0, [r7, #14]
 8002062:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f7ff fee7 	bl	8001e3c <LCD_ShowString>
	LCD_ShowString(x+length1,y,size,(u8*)pStr2,mode);
 800206e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002072:	b29a      	uxth	r2, r3
 8002074:	89fb      	ldrh	r3, [r7, #14]
 8002076:	4413      	add	r3, r2
 8002078:	b298      	uxth	r0, r3
 800207a:	7afa      	ldrb	r2, [r7, #11]
 800207c:	89b9      	ldrh	r1, [r7, #12]
 800207e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	f7ff fed9 	bl	8001e3c <LCD_ShowString>

	LCD_DrawLine(x, y+ size, 320-x , y+ size);
 800208a:	7afb      	ldrb	r3, [r7, #11]
 800208c:	b29a      	uxth	r2, r3
 800208e:	89bb      	ldrh	r3, [r7, #12]
 8002090:	4413      	add	r3, r2
 8002092:	b299      	uxth	r1, r3
 8002094:	89fb      	ldrh	r3, [r7, #14]
 8002096:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800209a:	b29c      	uxth	r4, r3
 800209c:	7afb      	ldrb	r3, [r7, #11]
 800209e:	b29a      	uxth	r2, r3
 80020a0:	89bb      	ldrh	r3, [r7, #12]
 80020a2:	4413      	add	r3, r2
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	89f8      	ldrh	r0, [r7, #14]
 80020a8:	4622      	mov	r2, r4
 80020aa:	f7ff fa8d 	bl	80015c8 <LCD_DrawLine>
	LCD_DrawLine(x + length1-2, y - 4, x+ length1-2, y + size );
 80020ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	89fb      	ldrh	r3, [r7, #14]
 80020b6:	4413      	add	r3, r2
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3b02      	subs	r3, #2
 80020bc:	b298      	uxth	r0, r3
 80020be:	89bb      	ldrh	r3, [r7, #12]
 80020c0:	3b04      	subs	r3, #4
 80020c2:	b299      	uxth	r1, r3
 80020c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	89fb      	ldrh	r3, [r7, #14]
 80020cc:	4413      	add	r3, r2
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b02      	subs	r3, #2
 80020d2:	b29c      	uxth	r4, r3
 80020d4:	7afb      	ldrb	r3, [r7, #11]
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	89bb      	ldrh	r3, [r7, #12]
 80020da:	4413      	add	r3, r2
 80020dc:	b29b      	uxth	r3, r3
 80020de:	4622      	mov	r2, r4
 80020e0:	f7ff fa72 	bl	80015c8 <LCD_DrawLine>
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd90      	pop	{r4, r7, pc}

080020ec <LCD_ShowButton>:
 * @parameters :m:the multiplier
                n:the power
 * @retvalue   :the nth power of m
******************************************************************************/
void LCD_ShowButton(u16 x,u16 y,u16 width,u16 height,u8 *pStr,u8 state)
{
 80020ec:	b5b0      	push	{r4, r5, r7, lr}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af06      	add	r7, sp, #24
 80020f2:	4604      	mov	r4, r0
 80020f4:	4608      	mov	r0, r1
 80020f6:	4611      	mov	r1, r2
 80020f8:	461a      	mov	r2, r3
 80020fa:	4623      	mov	r3, r4
 80020fc:	80fb      	strh	r3, [r7, #6]
 80020fe:	4603      	mov	r3, r0
 8002100:	80bb      	strh	r3, [r7, #4]
 8002102:	460b      	mov	r3, r1
 8002104:	807b      	strh	r3, [r7, #2]
 8002106:	4613      	mov	r3, r2
 8002108:	803b      	strh	r3, [r7, #0]
	u16 size = 16;
 800210a:	2310      	movs	r3, #16
 800210c:	81fb      	strh	r3, [r7, #14]
	LCD_ClearCursor(x, y, x+width, y + height, WHITE);
 800210e:	88fa      	ldrh	r2, [r7, #6]
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	4413      	add	r3, r2
 8002114:	b29c      	uxth	r4, r3
 8002116:	88ba      	ldrh	r2, [r7, #4]
 8002118:	883b      	ldrh	r3, [r7, #0]
 800211a:	4413      	add	r3, r2
 800211c:	b29b      	uxth	r3, r3
 800211e:	88b9      	ldrh	r1, [r7, #4]
 8002120:	88f8      	ldrh	r0, [r7, #6]
 8002122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002126:	9200      	str	r2, [sp, #0]
 8002128:	4622      	mov	r2, r4
 800212a:	f000 fedb 	bl	8002ee4 <LCD_ClearCursor>
	if(state == 1)
 800212e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002132:	2b01      	cmp	r3, #1
 8002134:	d123      	bne.n	800217e <LCD_ShowButton+0x92>
	{
		LCD_Fill(x , y, x+width, y + height, GREEN);
 8002136:	88fa      	ldrh	r2, [r7, #6]
 8002138:	887b      	ldrh	r3, [r7, #2]
 800213a:	4413      	add	r3, r2
 800213c:	b29c      	uxth	r4, r3
 800213e:	88ba      	ldrh	r2, [r7, #4]
 8002140:	883b      	ldrh	r3, [r7, #0]
 8002142:	4413      	add	r3, r2
 8002144:	b29b      	uxth	r3, r3
 8002146:	88b9      	ldrh	r1, [r7, #4]
 8002148:	88f8      	ldrh	r0, [r7, #6]
 800214a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800214e:	9200      	str	r2, [sp, #0]
 8002150:	4622      	mov	r2, r4
 8002152:	f7ff f9ed 	bl	8001530 <LCD_Fill>
		Gui_StrCenterV2(x, y,width, height, BLACK, WHITE, (u8*)pStr, size, 1);
 8002156:	89fb      	ldrh	r3, [r7, #14]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	883c      	ldrh	r4, [r7, #0]
 800215c:	887a      	ldrh	r2, [r7, #2]
 800215e:	88b9      	ldrh	r1, [r7, #4]
 8002160:	88f8      	ldrh	r0, [r7, #6]
 8002162:	2501      	movs	r5, #1
 8002164:	9504      	str	r5, [sp, #16]
 8002166:	9303      	str	r3, [sp, #12]
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	9302      	str	r3, [sp, #8]
 800216c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002170:	9301      	str	r3, [sp, #4]
 8002172:	2300      	movs	r3, #0
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	4623      	mov	r3, r4
 8002178:	f000 fd56 	bl	8002c28 <Gui_StrCenterV2>
	}else
	{
		LCD_Fill(x, y, x+width, y + height, RED);
		Gui_StrCenterV2(x, y,width, height, BLACK, WHITE, (u8*)pStr, size, 1);
	}
}
 800217c:	e022      	b.n	80021c4 <LCD_ShowButton+0xd8>
		LCD_Fill(x, y, x+width, y + height, RED);
 800217e:	88fa      	ldrh	r2, [r7, #6]
 8002180:	887b      	ldrh	r3, [r7, #2]
 8002182:	4413      	add	r3, r2
 8002184:	b29c      	uxth	r4, r3
 8002186:	88ba      	ldrh	r2, [r7, #4]
 8002188:	883b      	ldrh	r3, [r7, #0]
 800218a:	4413      	add	r3, r2
 800218c:	b29b      	uxth	r3, r3
 800218e:	88b9      	ldrh	r1, [r7, #4]
 8002190:	88f8      	ldrh	r0, [r7, #6]
 8002192:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002196:	9200      	str	r2, [sp, #0]
 8002198:	4622      	mov	r2, r4
 800219a:	f7ff f9c9 	bl	8001530 <LCD_Fill>
		Gui_StrCenterV2(x, y,width, height, BLACK, WHITE, (u8*)pStr, size, 1);
 800219e:	89fb      	ldrh	r3, [r7, #14]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	883c      	ldrh	r4, [r7, #0]
 80021a4:	887a      	ldrh	r2, [r7, #2]
 80021a6:	88b9      	ldrh	r1, [r7, #4]
 80021a8:	88f8      	ldrh	r0, [r7, #6]
 80021aa:	2501      	movs	r5, #1
 80021ac:	9504      	str	r5, [sp, #16]
 80021ae:	9303      	str	r3, [sp, #12]
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	9302      	str	r3, [sp, #8]
 80021b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	2300      	movs	r3, #0
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	4623      	mov	r3, r4
 80021c0:	f000 fd32 	bl	8002c28 <Gui_StrCenterV2>
}
 80021c4:	bf00      	nop
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bdb0      	pop	{r4, r5, r7, pc}

080021cc <LCD_ShowDevice>:
 * @parameters :m:the multiplier
                n:the power
 * @retvalue   :the nth power of m
******************************************************************************/
u16 LCD_ShowDevice(u16 x,u16 y,u16 r,u8 *pStr,u8 state)
{
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b08b      	sub	sp, #44	; 0x2c
 80021d0:	af04      	add	r7, sp, #16
 80021d2:	607b      	str	r3, [r7, #4]
 80021d4:	4603      	mov	r3, r0
 80021d6:	81fb      	strh	r3, [r7, #14]
 80021d8:	460b      	mov	r3, r1
 80021da:	81bb      	strh	r3, [r7, #12]
 80021dc:	4613      	mov	r3, r2
 80021de:	817b      	strh	r3, [r7, #10]
	//gui_circle(lcddev.width/2-80+(i*25),lcddev.height/2-50+(i*25),ColorTab[i],30,0);
	u16 size = 16;
 80021e0:	2310      	movs	r3, #16
 80021e2:	82fb      	strh	r3, [r7, #22]
	u16 len = strlen((const char*)pStr);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7fd fff5 	bl	80001d4 <strlen>
 80021ea:	4603      	mov	r3, r0
 80021ec:	82bb      	strh	r3, [r7, #20]
	u16 str_width = len*(size/2);
 80021ee:	8afb      	ldrh	r3, [r7, #22]
 80021f0:	085b      	lsrs	r3, r3, #1
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	8aba      	ldrh	r2, [r7, #20]
 80021f6:	fb12 f303 	smulbb	r3, r2, r3
 80021fa:	827b      	strh	r3, [r7, #18]
	LCD_ClearCursor(x+str_width, y, x+2*r+str_width, y + 2*r, WHITE);
 80021fc:	89fa      	ldrh	r2, [r7, #14]
 80021fe:	8a7b      	ldrh	r3, [r7, #18]
 8002200:	4413      	add	r3, r2
 8002202:	b298      	uxth	r0, r3
 8002204:	897b      	ldrh	r3, [r7, #10]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	89fb      	ldrh	r3, [r7, #14]
 800220c:	4413      	add	r3, r2
 800220e:	b29a      	uxth	r2, r3
 8002210:	8a7b      	ldrh	r3, [r7, #18]
 8002212:	4413      	add	r3, r2
 8002214:	b29c      	uxth	r4, r3
 8002216:	897b      	ldrh	r3, [r7, #10]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	89bb      	ldrh	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	b29b      	uxth	r3, r3
 8002222:	89b9      	ldrh	r1, [r7, #12]
 8002224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002228:	9200      	str	r2, [sp, #0]
 800222a:	4622      	mov	r2, r4
 800222c:	f000 fe5a 	bl	8002ee4 <LCD_ClearCursor>
	if(state == 1)
 8002230:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002234:	2b01      	cmp	r3, #1
 8002236:	d12c      	bne.n	8002292 <LCD_ShowDevice+0xc6>
	{
		Show_Str(x, y, BLACK, WHITE, pStr, size, 1);
 8002238:	8afb      	ldrh	r3, [r7, #22]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	89b9      	ldrh	r1, [r7, #12]
 800223e:	89f8      	ldrh	r0, [r7, #14]
 8002240:	2201      	movs	r2, #1
 8002242:	9202      	str	r2, [sp, #8]
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800224e:	2200      	movs	r2, #0
 8002250:	f000 fc18 	bl	8002a84 <Show_Str>
		gui_circle(150+r, y+size/2, BLACK, r+2, 1);
 8002254:	897b      	ldrh	r3, [r7, #10]
 8002256:	f103 0096 	add.w	r0, r3, #150	; 0x96
 800225a:	89bb      	ldrh	r3, [r7, #12]
 800225c:	8afa      	ldrh	r2, [r7, #22]
 800225e:	0852      	lsrs	r2, r2, #1
 8002260:	b292      	uxth	r2, r2
 8002262:	1899      	adds	r1, r3, r2
 8002264:	897b      	ldrh	r3, [r7, #10]
 8002266:	3302      	adds	r3, #2
 8002268:	2201      	movs	r2, #1
 800226a:	9200      	str	r2, [sp, #0]
 800226c:	2200      	movs	r2, #0
 800226e:	f7ff fae8 	bl	8001842 <gui_circle>
		gui_circle(150+r, y+size/2, GREEN, r, 1);
 8002272:	897b      	ldrh	r3, [r7, #10]
 8002274:	f103 0096 	add.w	r0, r3, #150	; 0x96
 8002278:	89bb      	ldrh	r3, [r7, #12]
 800227a:	8afa      	ldrh	r2, [r7, #22]
 800227c:	0852      	lsrs	r2, r2, #1
 800227e:	b292      	uxth	r2, r2
 8002280:	1899      	adds	r1, r3, r2
 8002282:	897b      	ldrh	r3, [r7, #10]
 8002284:	2201      	movs	r2, #1
 8002286:	9200      	str	r2, [sp, #0]
 8002288:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800228c:	f7ff fad9 	bl	8001842 <gui_circle>
 8002290:	e02b      	b.n	80022ea <LCD_ShowDevice+0x11e>
	}else
	{
		Show_Str(x, y, BLACK, WHITE, pStr, size, 1);
 8002292:	8afb      	ldrh	r3, [r7, #22]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	89b9      	ldrh	r1, [r7, #12]
 8002298:	89f8      	ldrh	r0, [r7, #14]
 800229a:	2201      	movs	r2, #1
 800229c:	9202      	str	r2, [sp, #8]
 800229e:	9301      	str	r3, [sp, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022a8:	2200      	movs	r2, #0
 80022aa:	f000 fbeb 	bl	8002a84 <Show_Str>
		gui_circle(150+r, y+size/2, BLACK, r+2, 1);
 80022ae:	897b      	ldrh	r3, [r7, #10]
 80022b0:	f103 0096 	add.w	r0, r3, #150	; 0x96
 80022b4:	89bb      	ldrh	r3, [r7, #12]
 80022b6:	8afa      	ldrh	r2, [r7, #22]
 80022b8:	0852      	lsrs	r2, r2, #1
 80022ba:	b292      	uxth	r2, r2
 80022bc:	1899      	adds	r1, r3, r2
 80022be:	897b      	ldrh	r3, [r7, #10]
 80022c0:	3302      	adds	r3, #2
 80022c2:	2201      	movs	r2, #1
 80022c4:	9200      	str	r2, [sp, #0]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f7ff fabb 	bl	8001842 <gui_circle>
		gui_circle(150+r, y+size/2, RED, r, 1);
 80022cc:	897b      	ldrh	r3, [r7, #10]
 80022ce:	f103 0096 	add.w	r0, r3, #150	; 0x96
 80022d2:	89bb      	ldrh	r3, [r7, #12]
 80022d4:	8afa      	ldrh	r2, [r7, #22]
 80022d6:	0852      	lsrs	r2, r2, #1
 80022d8:	b292      	uxth	r2, r2
 80022da:	1899      	adds	r1, r3, r2
 80022dc:	897b      	ldrh	r3, [r7, #10]
 80022de:	2201      	movs	r2, #1
 80022e0:	9200      	str	r2, [sp, #0]
 80022e2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80022e6:	f7ff faac 	bl	8001842 <gui_circle>
	}
	return 150+r;
 80022ea:	897b      	ldrh	r3, [r7, #10]
 80022ec:	3396      	adds	r3, #150	; 0x96
 80022ee:	b29b      	uxth	r3, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd90      	pop	{r4, r7, pc}

080022f8 <LCD_UpdateDeviceState>:
 * @parameters :m:the multiplier
                n:the power
 * @retvalue   :the nth power of m
******************************************************************************/
void LCD_UpdateDeviceState(u16 x,u16 y,u16 r,u8 state)
{
 80022f8:	b590      	push	{r4, r7, lr}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	4604      	mov	r4, r0
 8002300:	4608      	mov	r0, r1
 8002302:	4611      	mov	r1, r2
 8002304:	461a      	mov	r2, r3
 8002306:	4623      	mov	r3, r4
 8002308:	80fb      	strh	r3, [r7, #6]
 800230a:	4603      	mov	r3, r0
 800230c:	80bb      	strh	r3, [r7, #4]
 800230e:	460b      	mov	r3, r1
 8002310:	807b      	strh	r3, [r7, #2]
 8002312:	4613      	mov	r3, r2
 8002314:	707b      	strb	r3, [r7, #1]
	//gui_circle(lcddev.width/2-80+(i*25),lcddev.height/2-50+(i*25),ColorTab[i],30,0);
	u16 size = 16;
 8002316:	2310      	movs	r3, #16
 8002318:	81fb      	strh	r3, [r7, #14]
	if(state == 1)
 800231a:	787b      	ldrb	r3, [r7, #1]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d10d      	bne.n	800233c <LCD_UpdateDeviceState+0x44>
	{
		gui_circle(x, y+size/2, GREEN, r, 1);
 8002320:	88f8      	ldrh	r0, [r7, #6]
 8002322:	88bb      	ldrh	r3, [r7, #4]
 8002324:	89fa      	ldrh	r2, [r7, #14]
 8002326:	0852      	lsrs	r2, r2, #1
 8002328:	b292      	uxth	r2, r2
 800232a:	1899      	adds	r1, r3, r2
 800232c:	887b      	ldrh	r3, [r7, #2]
 800232e:	2201      	movs	r2, #1
 8002330:	9200      	str	r2, [sp, #0]
 8002332:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002336:	f7ff fa84 	bl	8001842 <gui_circle>
	}else
	{
		gui_circle(x, y+size/2, RED, r, 1);
	}
}
 800233a:	e00c      	b.n	8002356 <LCD_UpdateDeviceState+0x5e>
		gui_circle(x, y+size/2, RED, r, 1);
 800233c:	88f8      	ldrh	r0, [r7, #6]
 800233e:	88bb      	ldrh	r3, [r7, #4]
 8002340:	89fa      	ldrh	r2, [r7, #14]
 8002342:	0852      	lsrs	r2, r2, #1
 8002344:	b292      	uxth	r2, r2
 8002346:	1899      	adds	r1, r3, r2
 8002348:	887b      	ldrh	r3, [r7, #2]
 800234a:	2201      	movs	r2, #1
 800234c:	9200      	str	r2, [sp, #0]
 800234e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002352:	f7ff fa76 	bl	8001842 <gui_circle>
}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	bd90      	pop	{r4, r7, pc}

0800235e <LCD_ShowEditNum>:
 * @parameters :m:the multiplier
                n:the power
 * @retvalue   :the nth power of m
******************************************************************************/
void LCD_ShowEditNum(u16 x,u16 y,u8 *pStr,u8 lengthNum)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b08c      	sub	sp, #48	; 0x30
 8002362:	af04      	add	r7, sp, #16
 8002364:	60ba      	str	r2, [r7, #8]
 8002366:	461a      	mov	r2, r3
 8002368:	4603      	mov	r3, r0
 800236a:	81fb      	strh	r3, [r7, #14]
 800236c:	460b      	mov	r3, r1
 800236e:	81bb      	strh	r3, [r7, #12]
 8002370:	4613      	mov	r3, r2
 8002372:	71fb      	strb	r3, [r7, #7]
	u16 size = 16;
 8002374:	2310      	movs	r3, #16
 8002376:	83fb      	strh	r3, [r7, #30]
	u16 widthStr = 100;
 8002378:	2364      	movs	r3, #100	; 0x64
 800237a:	83bb      	strh	r3, [r7, #28]
	u16 widthBox = lengthNum*(size/2);
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	b29a      	uxth	r2, r3
 8002380:	8bfb      	ldrh	r3, [r7, #30]
 8002382:	085b      	lsrs	r3, r3, #1
 8002384:	b29b      	uxth	r3, r3
 8002386:	fb12 f303 	smulbb	r3, r2, r3
 800238a:	837b      	strh	r3, [r7, #26]
	u16 heightBox = 20;
 800238c:	2314      	movs	r3, #20
 800238e:	833b      	strh	r3, [r7, #24]
	u16 XsBox = x + widthStr - 5;
 8002390:	89fa      	ldrh	r2, [r7, #14]
 8002392:	8bbb      	ldrh	r3, [r7, #28]
 8002394:	4413      	add	r3, r2
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b05      	subs	r3, #5
 800239a:	82fb      	strh	r3, [r7, #22]
	u16 YsBox = y - 5;
 800239c:	89bb      	ldrh	r3, [r7, #12]
 800239e:	3b05      	subs	r3, #5
 80023a0:	82bb      	strh	r3, [r7, #20]
	u16 XeBox = XsBox + widthBox + 5;
 80023a2:	8afa      	ldrh	r2, [r7, #22]
 80023a4:	8b7b      	ldrh	r3, [r7, #26]
 80023a6:	4413      	add	r3, r2
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3305      	adds	r3, #5
 80023ac:	827b      	strh	r3, [r7, #18]
	u16 YeBox = YsBox + heightBox+ 5;
 80023ae:	8aba      	ldrh	r2, [r7, #20]
 80023b0:	8b3b      	ldrh	r3, [r7, #24]
 80023b2:	4413      	add	r3, r2
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3305      	adds	r3, #5
 80023b8:	823b      	strh	r3, [r7, #16]


	//Draw str
	Show_Str(x, y, BLACK, WHITE, pStr, size, 1);
 80023ba:	8bfb      	ldrh	r3, [r7, #30]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	89b9      	ldrh	r1, [r7, #12]
 80023c0:	89f8      	ldrh	r0, [r7, #14]
 80023c2:	2201      	movs	r2, #1
 80023c4:	9202      	str	r2, [sp, #8]
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023d0:	2200      	movs	r2, #0
 80023d2:	f000 fb57 	bl	8002a84 <Show_Str>
	//Draw edit box
	LCD_DrawRectangle(XsBox,YsBox,XeBox,YeBox);
 80023d6:	8a3b      	ldrh	r3, [r7, #16]
 80023d8:	8a7a      	ldrh	r2, [r7, #18]
 80023da:	8ab9      	ldrh	r1, [r7, #20]
 80023dc:	8af8      	ldrh	r0, [r7, #22]
 80023de:	f7ff f977 	bl	80016d0 <LCD_DrawRectangle>

}
 80023e2:	bf00      	nop
 80023e4:	3720      	adds	r7, #32
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <LCD_UpdateEditNum>:
 * @parameters :m:the multiplier
                n:the power
 * @retvalue   :the nth power of m
******************************************************************************/
void LCD_UpdateEditNum(u16 xS,u16 yS,u16 xE,u16 yE,u32 num)
{
 80023ec:	b5b0      	push	{r4, r5, r7, lr}
 80023ee:	b090      	sub	sp, #64	; 0x40
 80023f0:	af06      	add	r7, sp, #24
 80023f2:	4604      	mov	r4, r0
 80023f4:	4608      	mov	r0, r1
 80023f6:	4611      	mov	r1, r2
 80023f8:	461a      	mov	r2, r3
 80023fa:	4623      	mov	r3, r4
 80023fc:	80fb      	strh	r3, [r7, #6]
 80023fe:	4603      	mov	r3, r0
 8002400:	80bb      	strh	r3, [r7, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	807b      	strh	r3, [r7, #2]
 8002406:	4613      	mov	r3, r2
 8002408:	803b      	strh	r3, [r7, #0]
	u16 size = 16;
 800240a:	2310      	movs	r3, #16
 800240c:	83bb      	strh	r3, [r7, #28]
	u8 mode = 1;
 800240e:	2301      	movs	r3, #1
 8002410:	76fb      	strb	r3, [r7, #27]
	//Convert hex to str
	char StrNum[8],StrNumFinal[8];
	u32 numTemp,temp;
	u8 i = 0,length;
 8002412:	2300      	movs	r3, #0
 8002414:	77fb      	strb	r3, [r7, #31]
	numTemp = num;
 8002416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
	memset(StrNum,0,sizeof(StrNum));
 800241a:	f107 0310 	add.w	r3, r7, #16
 800241e:	2208      	movs	r2, #8
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f003 fde4 	bl	8005ff0 <memset>
	memset(StrNumFinal,0,sizeof(StrNumFinal));
 8002428:	f107 0308 	add.w	r3, r7, #8
 800242c:	2208      	movs	r2, #8
 800242e:	2100      	movs	r1, #0
 8002430:	4618      	mov	r0, r3
 8002432:	f003 fddd 	bl	8005ff0 <memset>
	if(numTemp == 0)
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	2b00      	cmp	r3, #0
 800243a:	d129      	bne.n	8002490 <LCD_UpdateEditNum+0xa4>
	{
		StrNumFinal[0] += 48;
 800243c:	7a3b      	ldrb	r3, [r7, #8]
 800243e:	3330      	adds	r3, #48	; 0x30
 8002440:	b2db      	uxtb	r3, r3
 8002442:	723b      	strb	r3, [r7, #8]
 8002444:	e041      	b.n	80024ca <LCD_UpdateEditNum+0xde>
	}else{
		while(numTemp !=0)
		{
			temp = numTemp %10;
 8002446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002448:	4b34      	ldr	r3, [pc, #208]	; (800251c <LCD_UpdateEditNum+0x130>)
 800244a:	fba3 1302 	umull	r1, r3, r3, r2
 800244e:	08d9      	lsrs	r1, r3, #3
 8002450:	460b      	mov	r3, r1
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	623b      	str	r3, [r7, #32]
			if(temp<10)
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	2b09      	cmp	r3, #9
 8002460:	d803      	bhi.n	800246a <LCD_UpdateEditNum+0x7e>
			{
				temp +=48;
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	3330      	adds	r3, #48	; 0x30
 8002466:	623b      	str	r3, [r7, #32]
 8002468:	e002      	b.n	8002470 <LCD_UpdateEditNum+0x84>
			}else
			{
				temp +=55;
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	3337      	adds	r3, #55	; 0x37
 800246e:	623b      	str	r3, [r7, #32]
			}
			StrNum[i] = temp;
 8002470:	7ffb      	ldrb	r3, [r7, #31]
 8002472:	6a3a      	ldr	r2, [r7, #32]
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	3328      	adds	r3, #40	; 0x28
 8002478:	443b      	add	r3, r7
 800247a:	f803 2c18 	strb.w	r2, [r3, #-24]
			i++;
 800247e:	7ffb      	ldrb	r3, [r7, #31]
 8002480:	3301      	adds	r3, #1
 8002482:	77fb      	strb	r3, [r7, #31]
			numTemp /=10;
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	4a25      	ldr	r2, [pc, #148]	; (800251c <LCD_UpdateEditNum+0x130>)
 8002488:	fba2 2303 	umull	r2, r3, r2, r3
 800248c:	08db      	lsrs	r3, r3, #3
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
		while(numTemp !=0)
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1d7      	bne.n	8002446 <LCD_UpdateEditNum+0x5a>
		}
		length = i-1;
 8002496:	7ffb      	ldrb	r3, [r7, #31]
 8002498:	3b01      	subs	r3, #1
 800249a:	76bb      	strb	r3, [r7, #26]

		for(u8 k = 0; k <= length; k++)
 800249c:	2300      	movs	r3, #0
 800249e:	77bb      	strb	r3, [r7, #30]
 80024a0:	e00f      	b.n	80024c2 <LCD_UpdateEditNum+0xd6>
		{
			i--;
 80024a2:	7ffb      	ldrb	r3, [r7, #31]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	77fb      	strb	r3, [r7, #31]
			StrNumFinal[k] = StrNum[i];
 80024a8:	7ffa      	ldrb	r2, [r7, #31]
 80024aa:	7fbb      	ldrb	r3, [r7, #30]
 80024ac:	3228      	adds	r2, #40	; 0x28
 80024ae:	443a      	add	r2, r7
 80024b0:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80024b4:	3328      	adds	r3, #40	; 0x28
 80024b6:	443b      	add	r3, r7
 80024b8:	f803 2c20 	strb.w	r2, [r3, #-32]
		for(u8 k = 0; k <= length; k++)
 80024bc:	7fbb      	ldrb	r3, [r7, #30]
 80024be:	3301      	adds	r3, #1
 80024c0:	77bb      	strb	r3, [r7, #30]
 80024c2:	7fba      	ldrb	r2, [r7, #30]
 80024c4:	7ebb      	ldrb	r3, [r7, #26]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d9eb      	bls.n	80024a2 <LCD_UpdateEditNum+0xb6>
	for(u8 k = 0; k <= length; k++)
	{
		i--;
		StrNumFinal[k] = StrNum[i];
	}*/
	LCD_ClearCursor(xS, yS, xE, yE, WHITE);
 80024ca:	883b      	ldrh	r3, [r7, #0]
 80024cc:	887a      	ldrh	r2, [r7, #2]
 80024ce:	88b9      	ldrh	r1, [r7, #4]
 80024d0:	88f8      	ldrh	r0, [r7, #6]
 80024d2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80024d6:	9400      	str	r4, [sp, #0]
 80024d8:	f000 fd04 	bl	8002ee4 <LCD_ClearCursor>
	Gui_StrCenterV2(xS, yS, xE-xS, yE-yS, BLACK, WHITE,(u8*) StrNumFinal, size, mode);
 80024dc:	887a      	ldrh	r2, [r7, #2]
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	b29c      	uxth	r4, r3
 80024e4:	883a      	ldrh	r2, [r7, #0]
 80024e6:	88bb      	ldrh	r3, [r7, #4]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	b29d      	uxth	r5, r3
 80024ec:	8bbb      	ldrh	r3, [r7, #28]
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	88b9      	ldrh	r1, [r7, #4]
 80024f2:	88f8      	ldrh	r0, [r7, #6]
 80024f4:	7efa      	ldrb	r2, [r7, #27]
 80024f6:	9204      	str	r2, [sp, #16]
 80024f8:	9303      	str	r3, [sp, #12]
 80024fa:	f107 0308 	add.w	r3, r7, #8
 80024fe:	9302      	str	r3, [sp, #8]
 8002500:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	2300      	movs	r3, #0
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	462b      	mov	r3, r5
 800250c:	4622      	mov	r2, r4
 800250e:	f000 fb8b 	bl	8002c28 <Gui_StrCenterV2>
}
 8002512:	bf00      	nop
 8002514:	3728      	adds	r7, #40	; 0x28
 8002516:	46bd      	mov	sp, r7
 8002518:	bdb0      	pop	{r4, r5, r7, pc}
 800251a:	bf00      	nop
 800251c:	cccccccd 	.word	0xcccccccd

08002520 <LCD_ShowBtnUpDown>:
 * @parameters :m:the multiplier
                n:the power
 * @retvalue   :the nth power of m
******************************************************************************/
void LCD_ShowBtnUpDown(u16 x0,u16 y0,u16 width,u16 height)
{
 8002520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002522:	b085      	sub	sp, #20
 8002524:	af02      	add	r7, sp, #8
 8002526:	4604      	mov	r4, r0
 8002528:	4608      	mov	r0, r1
 800252a:	4611      	mov	r1, r2
 800252c:	461a      	mov	r2, r3
 800252e:	4623      	mov	r3, r4
 8002530:	80fb      	strh	r3, [r7, #6]
 8002532:	4603      	mov	r3, r0
 8002534:	80bb      	strh	r3, [r7, #4]
 8002536:	460b      	mov	r3, r1
 8002538:	807b      	strh	r3, [r7, #2]
 800253a:	4613      	mov	r3, r2
 800253c:	803b      	strh	r3, [r7, #0]
	//LCD_Fill(x0 , y0, x0+width, y0 + height, GRED);
	LCD_DrawRectangle(x0 , y0, x0+width, y0 + height);
 800253e:	88fa      	ldrh	r2, [r7, #6]
 8002540:	887b      	ldrh	r3, [r7, #2]
 8002542:	4413      	add	r3, r2
 8002544:	b29c      	uxth	r4, r3
 8002546:	88ba      	ldrh	r2, [r7, #4]
 8002548:	883b      	ldrh	r3, [r7, #0]
 800254a:	4413      	add	r3, r2
 800254c:	b29b      	uxth	r3, r3
 800254e:	88b9      	ldrh	r1, [r7, #4]
 8002550:	88f8      	ldrh	r0, [r7, #6]
 8002552:	4622      	mov	r2, r4
 8002554:	f7ff f8bc 	bl	80016d0 <LCD_DrawRectangle>
	LCD_SetColorPoint(BLACK);
 8002558:	2000      	movs	r0, #0
 800255a:	f000 fc59 	bl	8002e10 <LCD_SetColorPoint>
	Fill_Triangel(x0+width/2, y0 + 3, x0 + width/2+width/4, y0+height/3, x0 + width/4, y0+height/3);
 800255e:	887b      	ldrh	r3, [r7, #2]
 8002560:	085b      	lsrs	r3, r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	4413      	add	r3, r2
 8002568:	b298      	uxth	r0, r3
 800256a:	88bb      	ldrh	r3, [r7, #4]
 800256c:	3303      	adds	r3, #3
 800256e:	b29c      	uxth	r4, r3
 8002570:	887b      	ldrh	r3, [r7, #2]
 8002572:	085b      	lsrs	r3, r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	4413      	add	r3, r2
 800257a:	b29a      	uxth	r2, r3
 800257c:	887b      	ldrh	r3, [r7, #2]
 800257e:	089b      	lsrs	r3, r3, #2
 8002580:	b29b      	uxth	r3, r3
 8002582:	4413      	add	r3, r2
 8002584:	b29d      	uxth	r5, r3
 8002586:	883b      	ldrh	r3, [r7, #0]
 8002588:	4a2d      	ldr	r2, [pc, #180]	; (8002640 <LCD_ShowBtnUpDown+0x120>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	085b      	lsrs	r3, r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	88bb      	ldrh	r3, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	b29e      	uxth	r6, r3
 8002598:	887b      	ldrh	r3, [r7, #2]
 800259a:	089b      	lsrs	r3, r3, #2
 800259c:	b29a      	uxth	r2, r3
 800259e:	88fb      	ldrh	r3, [r7, #6]
 80025a0:	4413      	add	r3, r2
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	883a      	ldrh	r2, [r7, #0]
 80025a6:	4926      	ldr	r1, [pc, #152]	; (8002640 <LCD_ShowBtnUpDown+0x120>)
 80025a8:	fba1 1202 	umull	r1, r2, r1, r2
 80025ac:	0852      	lsrs	r2, r2, #1
 80025ae:	b291      	uxth	r1, r2
 80025b0:	88ba      	ldrh	r2, [r7, #4]
 80025b2:	440a      	add	r2, r1
 80025b4:	b292      	uxth	r2, r2
 80025b6:	9201      	str	r2, [sp, #4]
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	4633      	mov	r3, r6
 80025bc:	462a      	mov	r2, r5
 80025be:	4621      	mov	r1, r4
 80025c0:	f7ff f9c0 	bl	8001944 <Fill_Triangel>
	Fill_Triangel(x0+width/4, y0 + height*2/3, x0 + width/2+width/4, y0+height*2/3, x0 + width/2, y0+height-3);
 80025c4:	887b      	ldrh	r3, [r7, #2]
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	4413      	add	r3, r2
 80025ce:	b298      	uxth	r0, r3
 80025d0:	883b      	ldrh	r3, [r7, #0]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4a1b      	ldr	r2, [pc, #108]	; (8002644 <LCD_ShowBtnUpDown+0x124>)
 80025d6:	fb82 1203 	smull	r1, r2, r2, r3
 80025da:	17db      	asrs	r3, r3, #31
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	b29a      	uxth	r2, r3
 80025e0:	88bb      	ldrh	r3, [r7, #4]
 80025e2:	4413      	add	r3, r2
 80025e4:	b29c      	uxth	r4, r3
 80025e6:	887b      	ldrh	r3, [r7, #2]
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	4413      	add	r3, r2
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	887b      	ldrh	r3, [r7, #2]
 80025f4:	089b      	lsrs	r3, r3, #2
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	b29d      	uxth	r5, r3
 80025fc:	883b      	ldrh	r3, [r7, #0]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4a10      	ldr	r2, [pc, #64]	; (8002644 <LCD_ShowBtnUpDown+0x124>)
 8002602:	fb82 1203 	smull	r1, r2, r2, r3
 8002606:	17db      	asrs	r3, r3, #31
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	b29a      	uxth	r2, r3
 800260c:	88bb      	ldrh	r3, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	b29e      	uxth	r6, r3
 8002612:	887b      	ldrh	r3, [r7, #2]
 8002614:	085b      	lsrs	r3, r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	88fb      	ldrh	r3, [r7, #6]
 800261a:	4413      	add	r3, r2
 800261c:	b29b      	uxth	r3, r3
 800261e:	88b9      	ldrh	r1, [r7, #4]
 8002620:	883a      	ldrh	r2, [r7, #0]
 8002622:	440a      	add	r2, r1
 8002624:	b292      	uxth	r2, r2
 8002626:	3a03      	subs	r2, #3
 8002628:	b292      	uxth	r2, r2
 800262a:	9201      	str	r2, [sp, #4]
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	4633      	mov	r3, r6
 8002630:	462a      	mov	r2, r5
 8002632:	4621      	mov	r1, r4
 8002634:	f7ff f986 	bl	8001944 <Fill_Triangel>
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002640:	aaaaaaab 	.word	0xaaaaaaab
 8002644:	55555556 	.word	0x55555556

08002648 <GUI_DrawFont16>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void GUI_DrawFont16(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	4604      	mov	r4, r0
 8002650:	4608      	mov	r0, r1
 8002652:	4611      	mov	r1, r2
 8002654:	461a      	mov	r2, r3
 8002656:	4623      	mov	r3, r4
 8002658:	80fb      	strh	r3, [r7, #6]
 800265a:	4603      	mov	r3, r0
 800265c:	80bb      	strh	r3, [r7, #4]
 800265e:	460b      	mov	r3, r1
 8002660:	807b      	strh	r3, [r7, #2]
 8002662:	4613      	mov	r3, r2
 8002664:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont16)/sizeof(typFNT_GB16);	//�Զ�ͳ�ƺ�����Ŀ
 800266a:	233e      	movs	r3, #62	; 0x3e
 800266c:	813b      	strh	r3, [r7, #8]
	
			
	for (k=0;k<HZnum;k++) 
 800266e:	2300      	movs	r3, #0
 8002670:	81bb      	strh	r3, [r7, #12]
 8002672:	e083      	b.n	800277c <GUI_DrawFont16+0x134>
	{
	  if ((tfont16[k].Index[0]==*(s))&&(tfont16[k].Index[1]==*(s+1)))
 8002674:	89ba      	ldrh	r2, [r7, #12]
 8002676:	494c      	ldr	r1, [pc, #304]	; (80027a8 <GUI_DrawFont16+0x160>)
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	4413      	add	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	440b      	add	r3, r1
 8002682:	781a      	ldrb	r2, [r3, #0]
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d174      	bne.n	8002776 <GUI_DrawFont16+0x12e>
 800268c:	89ba      	ldrh	r2, [r7, #12]
 800268e:	4946      	ldr	r1, [pc, #280]	; (80027a8 <GUI_DrawFont16+0x160>)
 8002690:	4613      	mov	r3, r2
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	4413      	add	r3, r2
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	440b      	add	r3, r1
 800269a:	3301      	adds	r3, #1
 800269c:	781a      	ldrb	r2, [r3, #0]
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	3301      	adds	r3, #1
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d166      	bne.n	8002776 <GUI_DrawFont16+0x12e>
	  { 	LCD_SetWindows(x,y,x+16-1,y+16-1);
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	330f      	adds	r3, #15
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	88bb      	ldrh	r3, [r7, #4]
 80026b0:	330f      	adds	r3, #15
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	88b9      	ldrh	r1, [r7, #4]
 80026b6:	88f8      	ldrh	r0, [r7, #6]
 80026b8:	f000 fdc6 	bl	8003248 <LCD_SetWindows>
		    for(i=0;i<16*2;i++)
 80026bc:	2300      	movs	r3, #0
 80026be:	73fb      	strb	r3, [r7, #15]
 80026c0:	e056      	b.n	8002770 <GUI_DrawFont16+0x128>
		    {
				for(j=0;j<8;j++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	73bb      	strb	r3, [r7, #14]
 80026c6:	e04d      	b.n	8002764 <GUI_DrawFont16+0x11c>
		    	{	
					if(!mode) //�ǵ��ӷ�ʽ
 80026c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d11c      	bne.n	800270a <GUI_DrawFont16+0xc2>
					{
						if(tfont16[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 80026d0:	89ba      	ldrh	r2, [r7, #12]
 80026d2:	7bf9      	ldrb	r1, [r7, #15]
 80026d4:	4834      	ldr	r0, [pc, #208]	; (80027a8 <GUI_DrawFont16+0x160>)
 80026d6:	4613      	mov	r3, r2
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	4413      	add	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4403      	add	r3, r0
 80026e0:	440b      	add	r3, r1
 80026e2:	3302      	adds	r3, #2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	4619      	mov	r1, r3
 80026e8:	7bbb      	ldrb	r3, [r7, #14]
 80026ea:	2280      	movs	r2, #128	; 0x80
 80026ec:	fa42 f303 	asr.w	r3, r2, r3
 80026f0:	400b      	ands	r3, r1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d004      	beq.n	8002700 <GUI_DrawFont16+0xb8>
 80026f6:	887b      	ldrh	r3, [r7, #2]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fb63 	bl	8002dc4 <Lcd_WriteData_16Bit>
 80026fe:	e02e      	b.n	800275e <GUI_DrawFont16+0x116>
						else Lcd_WriteData_16Bit(bc);
 8002700:	883b      	ldrh	r3, [r7, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f000 fb5e 	bl	8002dc4 <Lcd_WriteData_16Bit>
 8002708:	e029      	b.n	800275e <GUI_DrawFont16+0x116>
					}
					else
					{
						POINT_COLOR=fc;
 800270a:	4a28      	ldr	r2, [pc, #160]	; (80027ac <GUI_DrawFont16+0x164>)
 800270c:	887b      	ldrh	r3, [r7, #2]
 800270e:	8013      	strh	r3, [r2, #0]
						if(tfont16[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 8002710:	89ba      	ldrh	r2, [r7, #12]
 8002712:	7bf9      	ldrb	r1, [r7, #15]
 8002714:	4824      	ldr	r0, [pc, #144]	; (80027a8 <GUI_DrawFont16+0x160>)
 8002716:	4613      	mov	r3, r2
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	4413      	add	r3, r2
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4403      	add	r3, r0
 8002720:	440b      	add	r3, r1
 8002722:	3302      	adds	r3, #2
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	4619      	mov	r1, r3
 8002728:	7bbb      	ldrb	r3, [r7, #14]
 800272a:	2280      	movs	r2, #128	; 0x80
 800272c:	fa42 f303 	asr.w	r3, r2, r3
 8002730:	400b      	ands	r3, r1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <GUI_DrawFont16+0xfa>
 8002736:	88ba      	ldrh	r2, [r7, #4]
 8002738:	88fb      	ldrh	r3, [r7, #6]
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fb77 	bl	8002e30 <LCD_DrawPoint>
						x++;
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	3301      	adds	r3, #1
 8002746:	80fb      	strh	r3, [r7, #6]
						if((x-x0)==16)
 8002748:	88fa      	ldrh	r2, [r7, #6]
 800274a:	897b      	ldrh	r3, [r7, #10]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b10      	cmp	r3, #16
 8002750:	d105      	bne.n	800275e <GUI_DrawFont16+0x116>
						{
							x=x0;
 8002752:	897b      	ldrh	r3, [r7, #10]
 8002754:	80fb      	strh	r3, [r7, #6]
							y++;
 8002756:	88bb      	ldrh	r3, [r7, #4]
 8002758:	3301      	adds	r3, #1
 800275a:	80bb      	strh	r3, [r7, #4]
							break;
 800275c:	e005      	b.n	800276a <GUI_DrawFont16+0x122>
				for(j=0;j<8;j++)
 800275e:	7bbb      	ldrb	r3, [r7, #14]
 8002760:	3301      	adds	r3, #1
 8002762:	73bb      	strb	r3, [r7, #14]
 8002764:	7bbb      	ldrb	r3, [r7, #14]
 8002766:	2b07      	cmp	r3, #7
 8002768:	d9ae      	bls.n	80026c8 <GUI_DrawFont16+0x80>
		    for(i=0;i<16*2;i++)
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	3301      	adds	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	2b1f      	cmp	r3, #31
 8002774:	d9a5      	bls.n	80026c2 <GUI_DrawFont16+0x7a>
	for (k=0;k<HZnum;k++) 
 8002776:	89bb      	ldrh	r3, [r7, #12]
 8002778:	3301      	adds	r3, #1
 800277a:	81bb      	strh	r3, [r7, #12]
 800277c:	89ba      	ldrh	r2, [r7, #12]
 800277e:	893b      	ldrh	r3, [r7, #8]
 8002780:	429a      	cmp	r2, r3
 8002782:	f4ff af77 	bcc.w	8002674 <GUI_DrawFont16+0x2c>
			
		}				  	
		continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
	}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��  
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <GUI_DrawFont16+0x168>)
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <GUI_DrawFont16+0x168>)
 8002790:	885b      	ldrh	r3, [r3, #2]
 8002792:	3b01      	subs	r3, #1
 8002794:	b29b      	uxth	r3, r3
 8002796:	2100      	movs	r1, #0
 8002798:	2000      	movs	r0, #0
 800279a:	f000 fd55 	bl	8003248 <LCD_SetWindows>
} 
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd90      	pop	{r4, r7, pc}
 80027a6:	bf00      	nop
 80027a8:	08006b70 	.word	0x08006b70
 80027ac:	2000010a 	.word	0x2000010a
 80027b0:	200000fc 	.word	0x200000fc

080027b4 <GUI_DrawFont24>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void GUI_DrawFont24(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4604      	mov	r4, r0
 80027bc:	4608      	mov	r0, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	461a      	mov	r2, r3
 80027c2:	4623      	mov	r3, r4
 80027c4:	80fb      	strh	r3, [r7, #6]
 80027c6:	4603      	mov	r3, r0
 80027c8:	80bb      	strh	r3, [r7, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	807b      	strh	r3, [r7, #2]
 80027ce:	4613      	mov	r3, r2
 80027d0:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont24)/sizeof(typFNT_GB24);	//�Զ�ͳ�ƺ�����Ŀ
 80027d6:	2307      	movs	r3, #7
 80027d8:	813b      	strh	r3, [r7, #8]
		
			for (k=0;k<HZnum;k++) 
 80027da:	2300      	movs	r3, #0
 80027dc:	81bb      	strh	r3, [r7, #12]
 80027de:	e07f      	b.n	80028e0 <GUI_DrawFont24+0x12c>
			{
			  if ((tfont24[k].Index[0]==*(s))&&(tfont24[k].Index[1]==*(s+1)))
 80027e0:	89bb      	ldrh	r3, [r7, #12]
 80027e2:	4a4a      	ldr	r2, [pc, #296]	; (800290c <GUI_DrawFont24+0x158>)
 80027e4:	214a      	movs	r1, #74	; 0x4a
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	781a      	ldrb	r2, [r3, #0]
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d171      	bne.n	80028da <GUI_DrawFont24+0x126>
 80027f6:	89bb      	ldrh	r3, [r7, #12]
 80027f8:	4a44      	ldr	r2, [pc, #272]	; (800290c <GUI_DrawFont24+0x158>)
 80027fa:	214a      	movs	r1, #74	; 0x4a
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	3301      	adds	r3, #1
 8002804:	781a      	ldrb	r2, [r3, #0]
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	3301      	adds	r3, #1
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d164      	bne.n	80028da <GUI_DrawFont24+0x126>
			  { 	LCD_SetWindows(x,y,x+24-1,y+24-1);
 8002810:	88fb      	ldrh	r3, [r7, #6]
 8002812:	3317      	adds	r3, #23
 8002814:	b29a      	uxth	r2, r3
 8002816:	88bb      	ldrh	r3, [r7, #4]
 8002818:	3317      	adds	r3, #23
 800281a:	b29b      	uxth	r3, r3
 800281c:	88b9      	ldrh	r1, [r7, #4]
 800281e:	88f8      	ldrh	r0, [r7, #6]
 8002820:	f000 fd12 	bl	8003248 <LCD_SetWindows>
				    for(i=0;i<24*3;i++)
 8002824:	2300      	movs	r3, #0
 8002826:	73fb      	strb	r3, [r7, #15]
 8002828:	e054      	b.n	80028d4 <GUI_DrawFont24+0x120>
				    {
							for(j=0;j<8;j++)
 800282a:	2300      	movs	r3, #0
 800282c:	73bb      	strb	r3, [r7, #14]
 800282e:	e04b      	b.n	80028c8 <GUI_DrawFont24+0x114>
							{
								if(!mode) //�ǵ��ӷ�ʽ
 8002830:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002834:	2b00      	cmp	r3, #0
 8002836:	d11b      	bne.n	8002870 <GUI_DrawFont24+0xbc>
								{
									if(tfont24[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 8002838:	89ba      	ldrh	r2, [r7, #12]
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	4933      	ldr	r1, [pc, #204]	; (800290c <GUI_DrawFont24+0x158>)
 800283e:	204a      	movs	r0, #74	; 0x4a
 8002840:	fb00 f202 	mul.w	r2, r0, r2
 8002844:	440a      	add	r2, r1
 8002846:	4413      	add	r3, r2
 8002848:	3302      	adds	r3, #2
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	4619      	mov	r1, r3
 800284e:	7bbb      	ldrb	r3, [r7, #14]
 8002850:	2280      	movs	r2, #128	; 0x80
 8002852:	fa42 f303 	asr.w	r3, r2, r3
 8002856:	400b      	ands	r3, r1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d004      	beq.n	8002866 <GUI_DrawFont24+0xb2>
 800285c:	887b      	ldrh	r3, [r7, #2]
 800285e:	4618      	mov	r0, r3
 8002860:	f000 fab0 	bl	8002dc4 <Lcd_WriteData_16Bit>
 8002864:	e02d      	b.n	80028c2 <GUI_DrawFont24+0x10e>
									else Lcd_WriteData_16Bit(bc);
 8002866:	883b      	ldrh	r3, [r7, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f000 faab 	bl	8002dc4 <Lcd_WriteData_16Bit>
 800286e:	e028      	b.n	80028c2 <GUI_DrawFont24+0x10e>
								}
							else
							{
								POINT_COLOR=fc;
 8002870:	4a27      	ldr	r2, [pc, #156]	; (8002910 <GUI_DrawFont24+0x15c>)
 8002872:	887b      	ldrh	r3, [r7, #2]
 8002874:	8013      	strh	r3, [r2, #0]
								if(tfont24[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 8002876:	89ba      	ldrh	r2, [r7, #12]
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	4924      	ldr	r1, [pc, #144]	; (800290c <GUI_DrawFont24+0x158>)
 800287c:	204a      	movs	r0, #74	; 0x4a
 800287e:	fb00 f202 	mul.w	r2, r0, r2
 8002882:	440a      	add	r2, r1
 8002884:	4413      	add	r3, r2
 8002886:	3302      	adds	r3, #2
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	4619      	mov	r1, r3
 800288c:	7bbb      	ldrb	r3, [r7, #14]
 800288e:	2280      	movs	r2, #128	; 0x80
 8002890:	fa42 f303 	asr.w	r3, r2, r3
 8002894:	400b      	ands	r3, r1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d005      	beq.n	80028a6 <GUI_DrawFont24+0xf2>
 800289a:	88ba      	ldrh	r2, [r7, #4]
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fac5 	bl	8002e30 <LCD_DrawPoint>
								x++;
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	3301      	adds	r3, #1
 80028aa:	80fb      	strh	r3, [r7, #6]
								if((x-x0)==24)
 80028ac:	88fa      	ldrh	r2, [r7, #6]
 80028ae:	897b      	ldrh	r3, [r7, #10]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b18      	cmp	r3, #24
 80028b4:	d105      	bne.n	80028c2 <GUI_DrawFont24+0x10e>
								{
									x=x0;
 80028b6:	897b      	ldrh	r3, [r7, #10]
 80028b8:	80fb      	strh	r3, [r7, #6]
									y++;
 80028ba:	88bb      	ldrh	r3, [r7, #4]
 80028bc:	3301      	adds	r3, #1
 80028be:	80bb      	strh	r3, [r7, #4]
									break;
 80028c0:	e005      	b.n	80028ce <GUI_DrawFont24+0x11a>
							for(j=0;j<8;j++)
 80028c2:	7bbb      	ldrb	r3, [r7, #14]
 80028c4:	3301      	adds	r3, #1
 80028c6:	73bb      	strb	r3, [r7, #14]
 80028c8:	7bbb      	ldrb	r3, [r7, #14]
 80028ca:	2b07      	cmp	r3, #7
 80028cc:	d9b0      	bls.n	8002830 <GUI_DrawFont24+0x7c>
				    for(i=0;i<24*3;i++)
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	3301      	adds	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b47      	cmp	r3, #71	; 0x47
 80028d8:	d9a7      	bls.n	800282a <GUI_DrawFont24+0x76>
			for (k=0;k<HZnum;k++) 
 80028da:	89bb      	ldrh	r3, [r7, #12]
 80028dc:	3301      	adds	r3, #1
 80028de:	81bb      	strh	r3, [r7, #12]
 80028e0:	89ba      	ldrh	r2, [r7, #12]
 80028e2:	893b      	ldrh	r3, [r7, #8]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	f4ff af7b 	bcc.w	80027e0 <GUI_DrawFont24+0x2c>
					
				}				  	
				continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
			}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��  
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <GUI_DrawFont24+0x160>)
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <GUI_DrawFont24+0x160>)
 80028f4:	885b      	ldrh	r3, [r3, #2]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2100      	movs	r1, #0
 80028fc:	2000      	movs	r0, #0
 80028fe:	f000 fca3 	bl	8003248 <LCD_SetWindows>
}
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	bd90      	pop	{r4, r7, pc}
 800290a:	bf00      	nop
 800290c:	080073ac 	.word	0x080073ac
 8002910:	2000010a 	.word	0x2000010a
 8002914:	200000fc 	.word	0x200000fc

08002918 <GUI_DrawFont32>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void GUI_DrawFont32(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 8002918:	b590      	push	{r4, r7, lr}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	4604      	mov	r4, r0
 8002920:	4608      	mov	r0, r1
 8002922:	4611      	mov	r1, r2
 8002924:	461a      	mov	r2, r3
 8002926:	4623      	mov	r3, r4
 8002928:	80fb      	strh	r3, [r7, #6]
 800292a:	4603      	mov	r3, r0
 800292c:	80bb      	strh	r3, [r7, #4]
 800292e:	460b      	mov	r3, r1
 8002930:	807b      	strh	r3, [r7, #2]
 8002932:	4613      	mov	r3, r2
 8002934:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont32)/sizeof(typFNT_GB32);	//�Զ�ͳ�ƺ�����Ŀ
 800293a:	2304      	movs	r3, #4
 800293c:	813b      	strh	r3, [r7, #8]
	for (k=0;k<HZnum;k++) 
 800293e:	2300      	movs	r3, #0
 8002940:	81bb      	strh	r3, [r7, #12]
 8002942:	e084      	b.n	8002a4e <GUI_DrawFont32+0x136>
			{
			  if ((tfont32[k].Index[0]==*(s))&&(tfont32[k].Index[1]==*(s+1)))
 8002944:	89ba      	ldrh	r2, [r7, #12]
 8002946:	494c      	ldr	r1, [pc, #304]	; (8002a78 <GUI_DrawFont32+0x160>)
 8002948:	4613      	mov	r3, r2
 800294a:	019b      	lsls	r3, r3, #6
 800294c:	4413      	add	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	440b      	add	r3, r1
 8002952:	781a      	ldrb	r2, [r3, #0]
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d175      	bne.n	8002a48 <GUI_DrawFont32+0x130>
 800295c:	89ba      	ldrh	r2, [r7, #12]
 800295e:	4946      	ldr	r1, [pc, #280]	; (8002a78 <GUI_DrawFont32+0x160>)
 8002960:	4613      	mov	r3, r2
 8002962:	019b      	lsls	r3, r3, #6
 8002964:	4413      	add	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	440b      	add	r3, r1
 800296a:	3301      	adds	r3, #1
 800296c:	781a      	ldrb	r2, [r3, #0]
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	3301      	adds	r3, #1
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d167      	bne.n	8002a48 <GUI_DrawFont32+0x130>
			  { 	LCD_SetWindows(x,y,x+32-1,y+32-1);
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	331f      	adds	r3, #31
 800297c:	b29a      	uxth	r2, r3
 800297e:	88bb      	ldrh	r3, [r7, #4]
 8002980:	331f      	adds	r3, #31
 8002982:	b29b      	uxth	r3, r3
 8002984:	88b9      	ldrh	r1, [r7, #4]
 8002986:	88f8      	ldrh	r0, [r7, #6]
 8002988:	f000 fc5e 	bl	8003248 <LCD_SetWindows>
				    for(i=0;i<32*4;i++)
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]
 8002990:	e056      	b.n	8002a40 <GUI_DrawFont32+0x128>
				    {
						for(j=0;j<8;j++)
 8002992:	2300      	movs	r3, #0
 8002994:	73bb      	strb	r3, [r7, #14]
 8002996:	e04d      	b.n	8002a34 <GUI_DrawFont32+0x11c>
				    	{
							if(!mode) //�ǵ��ӷ�ʽ
 8002998:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800299c:	2b00      	cmp	r3, #0
 800299e:	d11c      	bne.n	80029da <GUI_DrawFont32+0xc2>
							{
								if(tfont32[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 80029a0:	89ba      	ldrh	r2, [r7, #12]
 80029a2:	7bf9      	ldrb	r1, [r7, #15]
 80029a4:	4834      	ldr	r0, [pc, #208]	; (8002a78 <GUI_DrawFont32+0x160>)
 80029a6:	4613      	mov	r3, r2
 80029a8:	019b      	lsls	r3, r3, #6
 80029aa:	4413      	add	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4403      	add	r3, r0
 80029b0:	440b      	add	r3, r1
 80029b2:	3302      	adds	r3, #2
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	4619      	mov	r1, r3
 80029b8:	7bbb      	ldrb	r3, [r7, #14]
 80029ba:	2280      	movs	r2, #128	; 0x80
 80029bc:	fa42 f303 	asr.w	r3, r2, r3
 80029c0:	400b      	ands	r3, r1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d004      	beq.n	80029d0 <GUI_DrawFont32+0xb8>
 80029c6:	887b      	ldrh	r3, [r7, #2]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 f9fb 	bl	8002dc4 <Lcd_WriteData_16Bit>
 80029ce:	e02e      	b.n	8002a2e <GUI_DrawFont32+0x116>
								else Lcd_WriteData_16Bit(bc);
 80029d0:	883b      	ldrh	r3, [r7, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 f9f6 	bl	8002dc4 <Lcd_WriteData_16Bit>
 80029d8:	e029      	b.n	8002a2e <GUI_DrawFont32+0x116>
							}
							else
							{
								POINT_COLOR=fc;
 80029da:	4a28      	ldr	r2, [pc, #160]	; (8002a7c <GUI_DrawFont32+0x164>)
 80029dc:	887b      	ldrh	r3, [r7, #2]
 80029de:	8013      	strh	r3, [r2, #0]
								if(tfont32[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 80029e0:	89ba      	ldrh	r2, [r7, #12]
 80029e2:	7bf9      	ldrb	r1, [r7, #15]
 80029e4:	4824      	ldr	r0, [pc, #144]	; (8002a78 <GUI_DrawFont32+0x160>)
 80029e6:	4613      	mov	r3, r2
 80029e8:	019b      	lsls	r3, r3, #6
 80029ea:	4413      	add	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	4403      	add	r3, r0
 80029f0:	440b      	add	r3, r1
 80029f2:	3302      	adds	r3, #2
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	4619      	mov	r1, r3
 80029f8:	7bbb      	ldrb	r3, [r7, #14]
 80029fa:	2280      	movs	r2, #128	; 0x80
 80029fc:	fa42 f303 	asr.w	r3, r2, r3
 8002a00:	400b      	ands	r3, r1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <GUI_DrawFont32+0xfa>
 8002a06:	88ba      	ldrh	r2, [r7, #4]
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 fa0f 	bl	8002e30 <LCD_DrawPoint>
								x++;
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	3301      	adds	r3, #1
 8002a16:	80fb      	strh	r3, [r7, #6]
								if((x-x0)==32)
 8002a18:	88fa      	ldrh	r2, [r7, #6]
 8002a1a:	897b      	ldrh	r3, [r7, #10]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b20      	cmp	r3, #32
 8002a20:	d105      	bne.n	8002a2e <GUI_DrawFont32+0x116>
								{
									x=x0;
 8002a22:	897b      	ldrh	r3, [r7, #10]
 8002a24:	80fb      	strh	r3, [r7, #6]
									y++;
 8002a26:	88bb      	ldrh	r3, [r7, #4]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	80bb      	strh	r3, [r7, #4]
									break;
 8002a2c:	e005      	b.n	8002a3a <GUI_DrawFont32+0x122>
						for(j=0;j<8;j++)
 8002a2e:	7bbb      	ldrb	r3, [r7, #14]
 8002a30:	3301      	adds	r3, #1
 8002a32:	73bb      	strb	r3, [r7, #14]
 8002a34:	7bbb      	ldrb	r3, [r7, #14]
 8002a36:	2b07      	cmp	r3, #7
 8002a38:	d9ae      	bls.n	8002998 <GUI_DrawFont32+0x80>
				    for(i=0;i<32*4;i++)
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
 8002a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	daa4      	bge.n	8002992 <GUI_DrawFont32+0x7a>
	for (k=0;k<HZnum;k++) 
 8002a48:	89bb      	ldrh	r3, [r7, #12]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	81bb      	strh	r3, [r7, #12]
 8002a4e:	89ba      	ldrh	r2, [r7, #12]
 8002a50:	893b      	ldrh	r3, [r7, #8]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	f4ff af76 	bcc.w	8002944 <GUI_DrawFont32+0x2c>
					
				}				  	
				continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
			}
	
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��  
 8002a58:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <GUI_DrawFont32+0x168>)
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <GUI_DrawFont32+0x168>)
 8002a62:	885b      	ldrh	r3, [r3, #2]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2100      	movs	r1, #0
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f000 fbec 	bl	8003248 <LCD_SetWindows>
} 
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd90      	pop	{r4, r7, pc}
 8002a78:	080075b4 	.word	0x080075b4
 8002a7c:	2000010a 	.word	0x2000010a
 8002a80:	200000fc 	.word	0x200000fc

08002a84 <Show_Str>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/	   		   
void Show_Str(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{					
 8002a84:	b5b0      	push	{r4, r5, r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af04      	add	r7, sp, #16
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	4608      	mov	r0, r1
 8002a8e:	4611      	mov	r1, r2
 8002a90:	461a      	mov	r2, r3
 8002a92:	4623      	mov	r3, r4
 8002a94:	80fb      	strh	r3, [r7, #6]
 8002a96:	4603      	mov	r3, r0
 8002a98:	80bb      	strh	r3, [r7, #4]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	807b      	strh	r3, [r7, #2]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	803b      	strh	r3, [r7, #0]
	u16 x0=x;							  	  
 8002aa2:	88fb      	ldrh	r3, [r7, #6]
 8002aa4:	81bb      	strh	r3, [r7, #12]
  	u8 bHz=0;     //�ַ��������� 
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	73fb      	strb	r3, [r7, #15]
    while(*str!=0)//����δ����
 8002aaa:	e0af      	b.n	8002c0c <Show_Str+0x188>
    { 
        if(!bHz)
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d161      	bne.n	8002b76 <Show_Str+0xf2>
        {
			if(x>(lcddev.width-size/2)||y>(lcddev.height-size)) 
 8002ab2:	88fa      	ldrh	r2, [r7, #6]
 8002ab4:	4b5b      	ldr	r3, [pc, #364]	; (8002c24 <Show_Str+0x1a0>)
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002abe:	085b      	lsrs	r3, r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	1acb      	subs	r3, r1, r3
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	f300 80a7 	bgt.w	8002c18 <Show_Str+0x194>
 8002aca:	88ba      	ldrh	r2, [r7, #4]
 8002acc:	4b55      	ldr	r3, [pc, #340]	; (8002c24 <Show_Str+0x1a0>)
 8002ace:	885b      	ldrh	r3, [r3, #2]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ad6:	1acb      	subs	r3, r1, r3
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	f300 809d 	bgt.w	8002c18 <Show_Str+0x194>
			return; 
	        if(*str>0x80)bHz=1;//���� 
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b80      	cmp	r3, #128	; 0x80
 8002ae4:	d902      	bls.n	8002aec <Show_Str+0x68>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
 8002aea:	e08f      	b.n	8002c0c <Show_Str+0x188>
	        else              //�ַ�
	        {          
		        if(*str==0x0D)//���з���
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b0d      	cmp	r3, #13
 8002af2:	d10b      	bne.n	8002b0c <Show_Str+0x88>
		        {         
		            y+=size;
 8002af4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	88bb      	ldrh	r3, [r7, #4]
 8002afc:	4413      	add	r3, r2
 8002afe:	80bb      	strh	r3, [r7, #4]
					x=x0;
 8002b00:	89bb      	ldrh	r3, [r7, #12]
 8002b02:	80fb      	strh	r3, [r7, #6]
		            str++; 
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	3301      	adds	r3, #1
 8002b08:	623b      	str	r3, [r7, #32]
 8002b0a:	e030      	b.n	8002b6e <Show_Str+0xea>
		        }  
		        else
				{
					if(size>16)//�ֿ���û�м���12X24 16X32��Ӣ������,��8X16����
 8002b0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b10:	2b10      	cmp	r3, #16
 8002b12:	d913      	bls.n	8002b3c <Show_Str+0xb8>
					{  
					LCD_ShowChar(x,y,fc,bc,*str,16,mode);
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	883d      	ldrh	r5, [r7, #0]
 8002b1a:	887c      	ldrh	r4, [r7, #2]
 8002b1c:	88b9      	ldrh	r1, [r7, #4]
 8002b1e:	88f8      	ldrh	r0, [r7, #6]
 8002b20:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002b24:	9202      	str	r2, [sp, #8]
 8002b26:	2210      	movs	r2, #16
 8002b28:	9201      	str	r2, [sp, #4]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	462b      	mov	r3, r5
 8002b2e:	4622      	mov	r2, r4
 8002b30:	f7ff f8a8 	bl	8001c84 <LCD_ShowChar>
					x+=8; //�ַ�,Ϊȫ�ֵ�һ�� 
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	3308      	adds	r3, #8
 8002b38:	80fb      	strh	r3, [r7, #6]
 8002b3a:	e018      	b.n	8002b6e <Show_Str+0xea>
					}
					else
					{
					LCD_ShowChar(x,y,fc,bc,*str,size,mode);
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	883d      	ldrh	r5, [r7, #0]
 8002b42:	887c      	ldrh	r4, [r7, #2]
 8002b44:	88b9      	ldrh	r1, [r7, #4]
 8002b46:	88f8      	ldrh	r0, [r7, #6]
 8002b48:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002b4c:	9202      	str	r2, [sp, #8]
 8002b4e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002b52:	9201      	str	r2, [sp, #4]
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	462b      	mov	r3, r5
 8002b58:	4622      	mov	r2, r4
 8002b5a:	f7ff f893 	bl	8001c84 <LCD_ShowChar>
					x+=size/2; //�ַ�,Ϊȫ�ֵ�һ�� 
 8002b5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b62:	085b      	lsrs	r3, r3, #1
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	80fb      	strh	r3, [r7, #6]
					}
				} 
				str++; 
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	3301      	adds	r3, #1
 8002b72:	623b      	str	r3, [r7, #32]
 8002b74:	e04a      	b.n	8002c0c <Show_Str+0x188>
		        
	        }
        }else//���� 
        {   
			if(x>(lcddev.width-size)||y>(lcddev.height-size)) 
 8002b76:	88fa      	ldrh	r2, [r7, #6]
 8002b78:	4b2a      	ldr	r3, [pc, #168]	; (8002c24 <Show_Str+0x1a0>)
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b82:	1acb      	subs	r3, r1, r3
 8002b84:	429a      	cmp	r2, r3
 8002b86:	dc49      	bgt.n	8002c1c <Show_Str+0x198>
 8002b88:	88ba      	ldrh	r2, [r7, #4]
 8002b8a:	4b26      	ldr	r3, [pc, #152]	; (8002c24 <Show_Str+0x1a0>)
 8002b8c:	885b      	ldrh	r3, [r3, #2]
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b94:	1acb      	subs	r3, r1, r3
 8002b96:	429a      	cmp	r2, r3
 8002b98:	dc40      	bgt.n	8002c1c <Show_Str+0x198>
			return;  
            bHz=0;//�к��ֿ�    
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	73fb      	strb	r3, [r7, #15]
			if(size==32)
 8002b9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ba2:	2b20      	cmp	r3, #32
 8002ba4:	d10c      	bne.n	8002bc0 <Show_Str+0x13c>
			GUI_DrawFont32(x,y,fc,bc,str,mode);	 	
 8002ba6:	883c      	ldrh	r4, [r7, #0]
 8002ba8:	887a      	ldrh	r2, [r7, #2]
 8002baa:	88b9      	ldrh	r1, [r7, #4]
 8002bac:	88f8      	ldrh	r0, [r7, #6]
 8002bae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	4623      	mov	r3, r4
 8002bba:	f7ff fead 	bl	8002918 <GUI_DrawFont32>
 8002bbe:	e01c      	b.n	8002bfa <Show_Str+0x176>
			else if(size==24)
 8002bc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002bc4:	2b18      	cmp	r3, #24
 8002bc6:	d10c      	bne.n	8002be2 <Show_Str+0x15e>
			GUI_DrawFont24(x,y,fc,bc,str,mode);	
 8002bc8:	883c      	ldrh	r4, [r7, #0]
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	88b9      	ldrh	r1, [r7, #4]
 8002bce:	88f8      	ldrh	r0, [r7, #6]
 8002bd0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002bd4:	9301      	str	r3, [sp, #4]
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	4623      	mov	r3, r4
 8002bdc:	f7ff fdea 	bl	80027b4 <GUI_DrawFont24>
 8002be0:	e00b      	b.n	8002bfa <Show_Str+0x176>
			else
			GUI_DrawFont16(x,y,fc,bc,str,mode);
 8002be2:	883c      	ldrh	r4, [r7, #0]
 8002be4:	887a      	ldrh	r2, [r7, #2]
 8002be6:	88b9      	ldrh	r1, [r7, #4]
 8002be8:	88f8      	ldrh	r0, [r7, #6]
 8002bea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	4623      	mov	r3, r4
 8002bf6:	f7ff fd27 	bl	8002648 <GUI_DrawFont16>
				
	        str+=2; 
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	623b      	str	r3, [r7, #32]
	        x+=size;//��һ������ƫ��	    
 8002c00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	4413      	add	r3, r2
 8002c0a:	80fb      	strh	r3, [r7, #6]
    while(*str!=0)//����δ����
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f47f af4b 	bne.w	8002aac <Show_Str+0x28>
 8002c16:	e002      	b.n	8002c1e <Show_Str+0x19a>
			return; 
 8002c18:	bf00      	nop
 8002c1a:	e000      	b.n	8002c1e <Show_Str+0x19a>
			return;  
 8002c1c:	bf00      	nop
        }						 
    }   
}
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bdb0      	pop	{r4, r5, r7, pc}
 8002c24:	200000fc 	.word	0x200000fc

08002c28 <Gui_StrCenterV2>:
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 

void Gui_StrCenterV2(u16 x, u16 y,u16 width,u16 height, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b089      	sub	sp, #36	; 0x24
 8002c2c:	af04      	add	r7, sp, #16
 8002c2e:	4604      	mov	r4, r0
 8002c30:	4608      	mov	r0, r1
 8002c32:	4611      	mov	r1, r2
 8002c34:	461a      	mov	r2, r3
 8002c36:	4623      	mov	r3, r4
 8002c38:	80fb      	strh	r3, [r7, #6]
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	80bb      	strh	r3, [r7, #4]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	807b      	strh	r3, [r7, #2]
 8002c42:	4613      	mov	r3, r2
 8002c44:	803b      	strh	r3, [r7, #0]
	u16 len=strlen((const char *)str);
 8002c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c48:	f7fd fac4 	bl	80001d4 <strlen>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	81fb      	strh	r3, [r7, #14]
	u16 x1=(width-len*(size/2))/2;
 8002c50:	887a      	ldrh	r2, [r7, #2]
 8002c52:	89fb      	ldrh	r3, [r7, #14]
 8002c54:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8002c58:	0849      	lsrs	r1, r1, #1
 8002c5a:	b2c9      	uxtb	r1, r1
 8002c5c:	fb01 f303 	mul.w	r3, r1, r3
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	0fda      	lsrs	r2, r3, #31
 8002c64:	4413      	add	r3, r2
 8002c66:	105b      	asrs	r3, r3, #1
 8002c68:	81bb      	strh	r3, [r7, #12]
	Show_Str(x+x1,y,fc,bc,str,size,mode);
 8002c6a:	88fa      	ldrh	r2, [r7, #6]
 8002c6c:	89bb      	ldrh	r3, [r7, #12]
 8002c6e:	4413      	add	r3, r2
 8002c70:	b298      	uxth	r0, r3
 8002c72:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8002c74:	8c3a      	ldrh	r2, [r7, #32]
 8002c76:	88b9      	ldrh	r1, [r7, #4]
 8002c78:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002c7c:	9302      	str	r3, [sp, #8]
 8002c7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002c82:	9301      	str	r3, [sp, #4]
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	4623      	mov	r3, r4
 8002c8a:	f7ff fefb 	bl	8002a84 <Show_Str>
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd90      	pop	{r4, r7, pc}
	...

08002c98 <Gui_StrCenter>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void Gui_StrCenter(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{
 8002c98:	b590      	push	{r4, r7, lr}
 8002c9a:	b089      	sub	sp, #36	; 0x24
 8002c9c:	af04      	add	r7, sp, #16
 8002c9e:	4604      	mov	r4, r0
 8002ca0:	4608      	mov	r0, r1
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4623      	mov	r3, r4
 8002ca8:	80fb      	strh	r3, [r7, #6]
 8002caa:	4603      	mov	r3, r0
 8002cac:	80bb      	strh	r3, [r7, #4]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	807b      	strh	r3, [r7, #2]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	803b      	strh	r3, [r7, #0]
	u16 len=strlen((const char *)str);
 8002cb6:	6a38      	ldr	r0, [r7, #32]
 8002cb8:	f7fd fa8c 	bl	80001d4 <strlen>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	81fb      	strh	r3, [r7, #14]
	u16 x1=(lcddev.width-len*(size/2))/2;
 8002cc0:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <Gui_StrCenter+0x6c>)
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	89fb      	ldrh	r3, [r7, #14]
 8002cc8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002ccc:	0852      	lsrs	r2, r2, #1
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	fb02 f303 	mul.w	r3, r2, r3
 8002cd4:	1acb      	subs	r3, r1, r3
 8002cd6:	0fda      	lsrs	r2, r3, #31
 8002cd8:	4413      	add	r3, r2
 8002cda:	105b      	asrs	r3, r3, #1
 8002cdc:	81bb      	strh	r3, [r7, #12]
	Show_Str(x1,y,fc,bc,str,size,mode);
 8002cde:	883c      	ldrh	r4, [r7, #0]
 8002ce0:	887a      	ldrh	r2, [r7, #2]
 8002ce2:	88b9      	ldrh	r1, [r7, #4]
 8002ce4:	89b8      	ldrh	r0, [r7, #12]
 8002ce6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002cea:	9302      	str	r3, [sp, #8]
 8002cec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	4623      	mov	r3, r4
 8002cf8:	f7ff fec4 	bl	8002a84 <Show_Str>
} 
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd90      	pop	{r4, r7, pc}
 8002d04:	200000fc 	.word	0x200000fc

08002d08 <LCD_WR_REG>:
 * @function   :Write an 8-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u8 data)
{ 
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;     
 8002d12:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <LCD_WR_REG+0x30>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
	 LCD_RS_CLR;	  
 8002d18:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <LCD_WR_REG+0x34>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
   SPI_WriteByte(SPI1,data);
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	4619      	mov	r1, r3
 8002d22:	4807      	ldr	r0, [pc, #28]	; (8002d40 <LCD_WR_REG+0x38>)
 8002d24:	f002 fe2a 	bl	800597c <SPI_WriteByte>
   LCD_CS_SET;	
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <LCD_WR_REG+0x30>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	424082bc 	.word	0x424082bc
 8002d3c:	424082b8 	.word	0x424082b8
 8002d40:	40013000 	.word	0x40013000

08002d44 <LCD_WR_DATA>:
 * @function   :Write an 8-bit data to the LCD screen
 * @parameters :data:data value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_DATA(u8 data)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;
 8002d4e:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <LCD_WR_DATA+0x30>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
	 LCD_RS_SET;
 8002d54:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <LCD_WR_DATA+0x34>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
   SPI_WriteByte(SPI1,data);
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4807      	ldr	r0, [pc, #28]	; (8002d7c <LCD_WR_DATA+0x38>)
 8002d60:	f002 fe0c 	bl	800597c <SPI_WriteByte>
   LCD_CS_SET;
 8002d64:	4b03      	ldr	r3, [pc, #12]	; (8002d74 <LCD_WR_DATA+0x30>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	601a      	str	r2, [r3, #0]
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	424082bc 	.word	0x424082bc
 8002d78:	424082b8 	.word	0x424082b8
 8002d7c:	40013000 	.word	0x40013000

08002d80 <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u8 LCD_Reg, u16 LCD_RegValue)
{	
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	460a      	mov	r2, r1
 8002d8a:	71fb      	strb	r3, [r7, #7]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);  
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff ffb8 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);	    		 
 8002d98:	88bb      	ldrh	r3, [r7, #4]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ffd1 	bl	8002d44 <LCD_WR_DATA>
}	   
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 
void LCD_WriteRAM_Prepare(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8002db0:	4b03      	ldr	r3, [pc, #12]	; (8002dc0 <LCD_WriteRAM_Prepare+0x14>)
 8002db2:	891b      	ldrh	r3, [r3, #8]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff ffa6 	bl	8002d08 <LCD_WR_REG>
}	 
 8002dbc:	bf00      	nop
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	200000fc 	.word	0x200000fc

08002dc4 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/	 
void Lcd_WriteData_16Bit(u16 Data)
{	
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	80fb      	strh	r3, [r7, #6]
   LCD_CS_CLR;
 8002dce:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <Lcd_WriteData_16Bit+0x40>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
   LCD_RS_SET;  
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <Lcd_WriteData_16Bit+0x44>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]
   SPI_WriteByte(SPI1,Data>>8);
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	0a1b      	lsrs	r3, r3, #8
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	4619      	mov	r1, r3
 8002de4:	4809      	ldr	r0, [pc, #36]	; (8002e0c <Lcd_WriteData_16Bit+0x48>)
 8002de6:	f002 fdc9 	bl	800597c <SPI_WriteByte>
	 SPI_WriteByte(SPI1,Data);
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	4619      	mov	r1, r3
 8002df0:	4806      	ldr	r0, [pc, #24]	; (8002e0c <Lcd_WriteData_16Bit+0x48>)
 8002df2:	f002 fdc3 	bl	800597c <SPI_WriteByte>
   LCD_CS_SET;
 8002df6:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <Lcd_WriteData_16Bit+0x40>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
}
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	424082bc 	.word	0x424082bc
 8002e08:	424082b8 	.word	0x424082b8
 8002e0c:	40013000 	.word	0x40013000

08002e10 <LCD_SetColorPoint>:
 * @function   :Set color of point
 * @parameters :color
 * @retvalue   :None
******************************************************************************/
void LCD_SetColorPoint(u16 color)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	80fb      	strh	r3, [r7, #6]
	POINT_COLOR = color;
 8002e1a:	4a04      	ldr	r2, [pc, #16]	; (8002e2c <LCD_SetColorPoint+0x1c>)
 8002e1c:	88fb      	ldrh	r3, [r7, #6]
 8002e1e:	8013      	strh	r3, [r2, #0]
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	2000010a 	.word	0x2000010a

08002e30 <LCD_DrawPoint>:
 * @parameters :x:the x coordinate of the pixel
                y:the y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/	
void LCD_DrawPoint(u16 x,u16 y)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	460a      	mov	r2, r1
 8002e3a:	80fb      	strh	r3, [r7, #6]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);//���ù��λ�� 
 8002e40:	88ba      	ldrh	r2, [r7, #4]
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fa52 	bl	80032f0 <LCD_SetCursor>
	Lcd_WriteData_16Bit(POINT_COLOR); 
 8002e4c:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <LCD_DrawPoint+0x30>)
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ffb7 	bl	8002dc4 <Lcd_WriteData_16Bit>
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	2000010a 	.word	0x2000010a

08002e64 <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/	
void LCD_Clear(u16 Color)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	80fb      	strh	r3, [r7, #6]
  unsigned int i,m;  
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);   
 8002e6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ed8 <LCD_Clear+0x74>)
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <LCD_Clear+0x74>)
 8002e78:	885b      	ldrh	r3, [r3, #2]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2100      	movs	r1, #0
 8002e80:	2000      	movs	r0, #0
 8002e82:	f000 f9e1 	bl	8003248 <LCD_SetWindows>
	LCD_CS_CLR;
 8002e86:	4b15      	ldr	r3, [pc, #84]	; (8002edc <LCD_Clear+0x78>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
	LCD_RS_SET;
 8002e8c:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <LCD_Clear+0x7c>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
	for(i=0;i<lcddev.height;i++)
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	e012      	b.n	8002ebe <LCD_Clear+0x5a>
	{
    for(m=0;m<lcddev.width;m++)
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	e006      	b.n	8002eac <LCD_Clear+0x48>
    {	
			Lcd_WriteData_16Bit(Color);
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff8f 	bl	8002dc4 <Lcd_WriteData_16Bit>
    for(m=0;m<lcddev.width;m++)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <LCD_Clear+0x74>)
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d3f2      	bcc.n	8002e9e <LCD_Clear+0x3a>
	for(i=0;i<lcddev.height;i++)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <LCD_Clear+0x74>)
 8002ec0:	885b      	ldrh	r3, [r3, #2]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d3e6      	bcc.n	8002e98 <LCD_Clear+0x34>
		}
	}
	 LCD_CS_SET;
 8002eca:	4b04      	ldr	r3, [pc, #16]	; (8002edc <LCD_Clear+0x78>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
} 
 8002ed0:	bf00      	nop
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	200000fc 	.word	0x200000fc
 8002edc:	424082bc 	.word	0x424082bc
 8002ee0:	424082b8 	.word	0x424082b8

08002ee4 <LCD_ClearCursor>:
								wXe:the ending x coordinate of the specified area
								wYe:the ending y coordinate of the specified area
 * @retvalue   :None
******************************************************************************/
void LCD_ClearCursor(u16 wXs,u16 wYs,u16 wXe,u16 wYe,u16 wColor)
{
 8002ee4:	b590      	push	{r4, r7, lr}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4604      	mov	r4, r0
 8002eec:	4608      	mov	r0, r1
 8002eee:	4611      	mov	r1, r2
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4623      	mov	r3, r4
 8002ef4:	80fb      	strh	r3, [r7, #6]
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	80bb      	strh	r3, [r7, #4]
 8002efa:	460b      	mov	r3, r1
 8002efc:	807b      	strh	r3, [r7, #2]
 8002efe:	4613      	mov	r3, r2
 8002f00:	803b      	strh	r3, [r7, #0]
	  unsigned int i,m;
		u16 width=wXe-wXs-1;
 8002f02:	887a      	ldrh	r2, [r7, #2]
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	81fb      	strh	r3, [r7, #14]
		u16 height=wYe-wYs-1;
 8002f0e:	883a      	ldrh	r2, [r7, #0]
 8002f10:	88bb      	ldrh	r3, [r7, #4]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	81bb      	strh	r3, [r7, #12]
		LCD_SetWindows(wXs,wYs,wXe,wYe);
 8002f1a:	883b      	ldrh	r3, [r7, #0]
 8002f1c:	887a      	ldrh	r2, [r7, #2]
 8002f1e:	88b9      	ldrh	r1, [r7, #4]
 8002f20:	88f8      	ldrh	r0, [r7, #6]
 8002f22:	f000 f991 	bl	8003248 <LCD_SetWindows>
		LCD_CS_CLR;
 8002f26:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <LCD_ClearCursor+0xa4>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
		LCD_RS_SET;
 8002f2c:	4b17      	ldr	r3, [pc, #92]	; (8002f8c <LCD_ClearCursor+0xa8>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
		for(i=0;i<height;i++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	e010      	b.n	8002f5a <LCD_ClearCursor+0x76>
		{
	    for(m=0;m<width;m++)
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]
 8002f3c:	e006      	b.n	8002f4c <LCD_ClearCursor+0x68>
	    {
				Lcd_WriteData_16Bit(wColor);
 8002f3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff3f 	bl	8002dc4 <Lcd_WriteData_16Bit>
	    for(m=0;m<width;m++)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	89fb      	ldrh	r3, [r7, #14]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d3f4      	bcc.n	8002f3e <LCD_ClearCursor+0x5a>
		for(i=0;i<height;i++)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3301      	adds	r3, #1
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	89bb      	ldrh	r3, [r7, #12]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d3ea      	bcc.n	8002f38 <LCD_ClearCursor+0x54>
			}
		}
		 LCD_CS_SET;
 8002f62:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <LCD_ClearCursor+0xa4>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
		 LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
 8002f68:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <LCD_ClearCursor+0xac>)
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	4b07      	ldr	r3, [pc, #28]	; (8002f90 <LCD_ClearCursor+0xac>)
 8002f72:	885b      	ldrh	r3, [r3, #2]
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2100      	movs	r1, #0
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f000 f964 	bl	8003248 <LCD_SetWindows>
}
 8002f80:	bf00      	nop
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd90      	pop	{r4, r7, pc}
 8002f88:	424082bc 	.word	0x424082bc
 8002f8c:	424082b8 	.word	0x424082b8
 8002f90:	200000fc 	.word	0x200000fc

08002f94 <LCD_GPIOInit>:
 * @function   :Initialization LCD screen GPIO
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	
void LCD_GPIOInit(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStructure;
	      
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB ,ENABLE);
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	2002      	movs	r0, #2
 8002f9e:	f7fd fbe9 	bl	8000774 <RCC_AHB1PeriphClockCmd>
	
	GPIO_InitStructure.GPIO_Pin =  RST_GPIO| LED_GPIO|RS_GPIO| CS_GPIO;
 8002fa2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002fa6:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8002fac:	2303      	movs	r3, #3
 8002fae:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(LCD_PORT, &GPIO_InitStructure);
 8002fb8:	463b      	mov	r3, r7
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4803      	ldr	r0, [pc, #12]	; (8002fcc <LCD_GPIOInit+0x38>)
 8002fbe:	f7fd fa1b 	bl	80003f8 <GPIO_Init>
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40020400 	.word	0x40020400

08002fd0 <LCD_RESET>:
 * @function   :Reset LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	
void LCD_RESET(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
	LCD_RST_CLR;
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <LCD_RESET+0x20>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
	delay_ms(100);
 8002fda:	2064      	movs	r0, #100	; 0x64
 8002fdc:	f002 fdef 	bl	8005bbe <delay_ms>
	LCD_RST_SET;
 8002fe0:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <LCD_RESET+0x20>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
	delay_ms(50);
 8002fe6:	2032      	movs	r0, #50	; 0x32
 8002fe8:	f002 fde9 	bl	8005bbe <delay_ms>
}
 8002fec:	bf00      	nop
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	424082b0 	.word	0x424082b0

08002ff4 <LCD_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 	 
void LCD_Init(void)
{  
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
	SPI1_Init(); //Ӳ��SPI��ʼ��
 8002ff8:	f002 fce4 	bl	80059c4 <SPI1_Init>
//	SPI_SetSpeed(SPI1,SPI_BaudRatePrescaler_2);
	LCD_GPIOInit();//LCD GPIO��ʼ��										 
 8002ffc:	f7ff ffca 	bl	8002f94 <LCD_GPIOInit>
 	LCD_RESET(); //LCD ��λ
 8003000:	f7ff ffe6 	bl	8002fd0 <LCD_RESET>
//*************3.2inch ILI9341��ʼ��**********//	
	LCD_WR_REG(0xCF);  
 8003004:	20cf      	movs	r0, #207	; 0xcf
 8003006:	f7ff fe7f 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 800300a:	2000      	movs	r0, #0
 800300c:	f7ff fe9a 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0xD9); //C1 
 8003010:	20d9      	movs	r0, #217	; 0xd9
 8003012:	f7ff fe97 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0X30); 
 8003016:	2030      	movs	r0, #48	; 0x30
 8003018:	f7ff fe94 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_REG(0xED);  
 800301c:	20ed      	movs	r0, #237	; 0xed
 800301e:	f7ff fe73 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(0x64); 
 8003022:	2064      	movs	r0, #100	; 0x64
 8003024:	f7ff fe8e 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x03); 
 8003028:	2003      	movs	r0, #3
 800302a:	f7ff fe8b 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0X12); 
 800302e:	2012      	movs	r0, #18
 8003030:	f7ff fe88 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0X81); 
 8003034:	2081      	movs	r0, #129	; 0x81
 8003036:	f7ff fe85 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);  
 800303a:	20e8      	movs	r0, #232	; 0xe8
 800303c:	f7ff fe64 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(0x85); 
 8003040:	2085      	movs	r0, #133	; 0x85
 8003042:	f7ff fe7f 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x10); 
 8003046:	2010      	movs	r0, #16
 8003048:	f7ff fe7c 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A); 
 800304c:	207a      	movs	r0, #122	; 0x7a
 800304e:	f7ff fe79 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);  
 8003052:	20cb      	movs	r0, #203	; 0xcb
 8003054:	f7ff fe58 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(0x39); 
 8003058:	2039      	movs	r0, #57	; 0x39
 800305a:	f7ff fe73 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C); 
 800305e:	202c      	movs	r0, #44	; 0x2c
 8003060:	f7ff fe70 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 8003064:	2000      	movs	r0, #0
 8003066:	f7ff fe6d 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x34); 
 800306a:	2034      	movs	r0, #52	; 0x34
 800306c:	f7ff fe6a 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x02); 
 8003070:	2002      	movs	r0, #2
 8003072:	f7ff fe67 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);  
 8003076:	20f7      	movs	r0, #247	; 0xf7
 8003078:	f7ff fe46 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(0x20); 
 800307c:	2020      	movs	r0, #32
 800307e:	f7ff fe61 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);  
 8003082:	20ea      	movs	r0, #234	; 0xea
 8003084:	f7ff fe40 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8003088:	2000      	movs	r0, #0
 800308a:	f7ff fe5b 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 800308e:	2000      	movs	r0, #0
 8003090:	f7ff fe58 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control 
 8003094:	20c0      	movs	r0, #192	; 0xc0
 8003096:	f7ff fe37 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0] 
 800309a:	201b      	movs	r0, #27
 800309c:	f7ff fe52 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control 
 80030a0:	20c1      	movs	r0, #193	; 0xc1
 80030a2:	f7ff fe31 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(0x12);   //SAP[2:0];BT[3:0] //0x01
 80030a6:	2012      	movs	r0, #18
 80030a8:	f7ff fe4c 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control 
 80030ac:	20c5      	movs	r0, #197	; 0xc5
 80030ae:	f7ff fe2b 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(0x26); 	 //3F
 80030b2:	2026      	movs	r0, #38	; 0x26
 80030b4:	f7ff fe46 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x26); 	 //3C
 80030b8:	2026      	movs	r0, #38	; 0x26
 80030ba:	f7ff fe43 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2 
 80030be:	20c7      	movs	r0, #199	; 0xc7
 80030c0:	f7ff fe22 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(0XB0); 
 80030c4:	20b0      	movs	r0, #176	; 0xb0
 80030c6:	f7ff fe3d 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control 
 80030ca:	2036      	movs	r0, #54	; 0x36
 80030cc:	f7ff fe1c 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(0x08); 
 80030d0:	2008      	movs	r0, #8
 80030d2:	f7ff fe37 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);   
 80030d6:	203a      	movs	r0, #58	; 0x3a
 80030d8:	f7ff fe16 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(0x55); 
 80030dc:	2055      	movs	r0, #85	; 0x55
 80030de:	f7ff fe31 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);   
 80030e2:	20b1      	movs	r0, #177	; 0xb1
 80030e4:	f7ff fe10 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(0x00);   
 80030e8:	2000      	movs	r0, #0
 80030ea:	f7ff fe2b 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A); 
 80030ee:	201a      	movs	r0, #26
 80030f0:	f7ff fe28 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control 
 80030f4:	20b6      	movs	r0, #182	; 0xb6
 80030f6:	f7ff fe07 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(0x0A); 
 80030fa:	200a      	movs	r0, #10
 80030fc:	f7ff fe22 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2); 
 8003100:	20a2      	movs	r0, #162	; 0xa2
 8003102:	f7ff fe1f 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8003106:	20f2      	movs	r0, #242	; 0xf2
 8003108:	f7ff fdfe 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 800310c:	2000      	movs	r0, #0
 800310e:	f7ff fe19 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected 
 8003112:	2026      	movs	r0, #38	; 0x26
 8003114:	f7ff fdf8 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(0x01); 
 8003118:	2001      	movs	r0, #1
 800311a:	f7ff fe13 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_REG(0xE0); //Set Gamma
 800311e:	20e0      	movs	r0, #224	; 0xe0
 8003120:	f7ff fdf2 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(0x1F);
 8003124:	201f      	movs	r0, #31
 8003126:	f7ff fe0d 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x24);
 800312a:	2024      	movs	r0, #36	; 0x24
 800312c:	f7ff fe0a 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x24);
 8003130:	2024      	movs	r0, #36	; 0x24
 8003132:	f7ff fe07 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x0D);
 8003136:	200d      	movs	r0, #13
 8003138:	f7ff fe04 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x12);
 800313c:	2012      	movs	r0, #18
 800313e:	f7ff fe01 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x09);
 8003142:	2009      	movs	r0, #9
 8003144:	f7ff fdfe 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x52);
 8003148:	2052      	movs	r0, #82	; 0x52
 800314a:	f7ff fdfb 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0xB7);
 800314e:	20b7      	movs	r0, #183	; 0xb7
 8003150:	f7ff fdf8 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8003154:	203f      	movs	r0, #63	; 0x3f
 8003156:	f7ff fdf5 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x0C);
 800315a:	200c      	movs	r0, #12
 800315c:	f7ff fdf2 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8003160:	2015      	movs	r0, #21
 8003162:	f7ff fdef 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8003166:	2006      	movs	r0, #6
 8003168:	f7ff fdec 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800316c:	200e      	movs	r0, #14
 800316e:	f7ff fde9 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8003172:	2008      	movs	r0, #8
 8003174:	f7ff fde6 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003178:	2000      	movs	r0, #0
 800317a:	f7ff fde3 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_REG(0XE1); //Set Gamma
 800317e:	20e1      	movs	r0, #225	; 0xe1
 8003180:	f7ff fdc2 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003184:	2000      	movs	r0, #0
 8003186:	f7ff fddd 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x1B);
 800318a:	201b      	movs	r0, #27
 800318c:	f7ff fdda 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x1B);
 8003190:	201b      	movs	r0, #27
 8003192:	f7ff fdd7 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8003196:	2002      	movs	r0, #2
 8003198:	f7ff fdd4 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800319c:	200e      	movs	r0, #14
 800319e:	f7ff fdd1 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80031a2:	2006      	movs	r0, #6
 80031a4:	f7ff fdce 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x2E);
 80031a8:	202e      	movs	r0, #46	; 0x2e
 80031aa:	f7ff fdcb 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x48);
 80031ae:	2048      	movs	r0, #72	; 0x48
 80031b0:	f7ff fdc8 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80031b4:	203f      	movs	r0, #63	; 0x3f
 80031b6:	f7ff fdc5 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80031ba:	2003      	movs	r0, #3
 80031bc:	f7ff fdc2 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80031c0:	200a      	movs	r0, #10
 80031c2:	f7ff fdbf 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x09);
 80031c6:	2009      	movs	r0, #9
 80031c8:	f7ff fdbc 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x31);
 80031cc:	2031      	movs	r0, #49	; 0x31
 80031ce:	f7ff fdb9 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x37);
 80031d2:	2037      	movs	r0, #55	; 0x37
 80031d4:	f7ff fdb6 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x1F);
 80031d8:	201f      	movs	r0, #31
 80031da:	f7ff fdb3 	bl	8002d44 <LCD_WR_DATA>

	LCD_WR_REG(0x2B); 
 80031de:	202b      	movs	r0, #43	; 0x2b
 80031e0:	f7ff fd92 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80031e4:	2000      	movs	r0, #0
 80031e6:	f7ff fdad 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80031ea:	2000      	movs	r0, #0
 80031ec:	f7ff fdaa 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80031f0:	2001      	movs	r0, #1
 80031f2:	f7ff fda7 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80031f6:	203f      	movs	r0, #63	; 0x3f
 80031f8:	f7ff fda4 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_REG(0x2A); 
 80031fc:	202a      	movs	r0, #42	; 0x2a
 80031fe:	f7ff fd83 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003202:	2000      	movs	r0, #0
 8003204:	f7ff fd9e 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003208:	2000      	movs	r0, #0
 800320a:	f7ff fd9b 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800320e:	2000      	movs	r0, #0
 8003210:	f7ff fd98 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);	 
 8003214:	20ef      	movs	r0, #239	; 0xef
 8003216:	f7ff fd95 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800321a:	2011      	movs	r0, #17
 800321c:	f7ff fd74 	bl	8002d08 <LCD_WR_REG>
	delay_ms(120);
 8003220:	2078      	movs	r0, #120	; 0x78
 8003222:	f002 fccc 	bl	8005bbe <delay_ms>
	LCD_WR_REG(0x29); //display on		
 8003226:	2029      	movs	r0, #41	; 0x29
 8003228:	f7ff fd6e 	bl	8002d08 <LCD_WR_REG>

	LCD_direction(USE_HORIZONTAL);
 800322c:	2000      	movs	r0, #0
 800322e:	f000 f871 	bl	8003314 <LCD_direction>
	LCD_LED=1;
 8003232:	4b04      	ldr	r3, [pc, #16]	; (8003244 <LCD_Init+0x250>)
 8003234:	2201      	movs	r2, #1
 8003236:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8003238:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800323c:	f7ff fe12 	bl	8002e64 <LCD_Clear>
}
 8003240:	bf00      	nop
 8003242:	bd80      	pop	{r7, pc}
 8003244:	424082b4 	.word	0x424082b4

08003248 <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{	
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4604      	mov	r4, r0
 8003250:	4608      	mov	r0, r1
 8003252:	4611      	mov	r1, r2
 8003254:	461a      	mov	r2, r3
 8003256:	4623      	mov	r3, r4
 8003258:	80fb      	strh	r3, [r7, #6]
 800325a:	4603      	mov	r3, r0
 800325c:	80bb      	strh	r3, [r7, #4]
 800325e:	460b      	mov	r3, r1
 8003260:	807b      	strh	r3, [r7, #2]
 8003262:	4613      	mov	r3, r2
 8003264:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);	
 8003266:	4b21      	ldr	r3, [pc, #132]	; (80032ec <LCD_SetWindows+0xa4>)
 8003268:	895b      	ldrh	r3, [r3, #10]
 800326a:	b2db      	uxtb	r3, r3
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fd4b 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	0a1b      	lsrs	r3, r3, #8
 8003276:	b29b      	uxth	r3, r3
 8003278:	b2db      	uxtb	r3, r3
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fd62 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xStar);		
 8003280:	88fb      	ldrh	r3, [r7, #6]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff fd5d 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(xEnd>>8);
 800328a:	887b      	ldrh	r3, [r7, #2]
 800328c:	0a1b      	lsrs	r3, r3, #8
 800328e:	b29b      	uxth	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fd56 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xEnd);
 8003298:	887b      	ldrh	r3, [r7, #2]
 800329a:	b2db      	uxtb	r3, r3
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fd51 	bl	8002d44 <LCD_WR_DATA>

	LCD_WR_REG(lcddev.setycmd);	
 80032a2:	4b12      	ldr	r3, [pc, #72]	; (80032ec <LCD_SetWindows+0xa4>)
 80032a4:	899b      	ldrh	r3, [r3, #12]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fd2d 	bl	8002d08 <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 80032ae:	88bb      	ldrh	r3, [r7, #4]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fd44 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yStar);		
 80032bc:	88bb      	ldrh	r3, [r7, #4]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fd3f 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(yEnd>>8);
 80032c6:	883b      	ldrh	r3, [r7, #0]
 80032c8:	0a1b      	lsrs	r3, r3, #8
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fd38 	bl	8002d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yEnd);
 80032d4:	883b      	ldrh	r3, [r7, #0]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fd33 	bl	8002d44 <LCD_WR_DATA>

	LCD_WriteRAM_Prepare();	//��ʼд��GRAM			
 80032de:	f7ff fd65 	bl	8002dac <LCD_WriteRAM_Prepare>
}   
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd90      	pop	{r4, r7, pc}
 80032ea:	bf00      	nop
 80032ec:	200000fc 	.word	0x200000fc

080032f0 <LCD_SetCursor>:
 * @parameters :Xpos:the  x coordinate of the pixel
								Ypos:the  y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{	  	    			
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	460a      	mov	r2, r1
 80032fa:	80fb      	strh	r3, [r7, #6]
 80032fc:	4613      	mov	r3, r2
 80032fe:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);	
 8003300:	88bb      	ldrh	r3, [r7, #4]
 8003302:	88fa      	ldrh	r2, [r7, #6]
 8003304:	88b9      	ldrh	r1, [r7, #4]
 8003306:	88f8      	ldrh	r0, [r7, #6]
 8003308:	f7ff ff9e 	bl	8003248 <LCD_SetWindows>
} 
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/ 
void LCD_direction(u8 direction)
{ 
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
			lcddev.setxcmd=0x2A;
 800331e:	4b26      	ldr	r3, [pc, #152]	; (80033b8 <LCD_direction+0xa4>)
 8003320:	222a      	movs	r2, #42	; 0x2a
 8003322:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0x2B;
 8003324:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <LCD_direction+0xa4>)
 8003326:	222b      	movs	r2, #43	; 0x2b
 8003328:	819a      	strh	r2, [r3, #12]
			lcddev.wramcmd=0x2C;
 800332a:	4b23      	ldr	r3, [pc, #140]	; (80033b8 <LCD_direction+0xa4>)
 800332c:	222c      	movs	r2, #44	; 0x2c
 800332e:	811a      	strh	r2, [r3, #8]
	switch(direction){		  
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	2b03      	cmp	r3, #3
 8003334:	d83a      	bhi.n	80033ac <LCD_direction+0x98>
 8003336:	a201      	add	r2, pc, #4	; (adr r2, 800333c <LCD_direction+0x28>)
 8003338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333c:	0800334d 	.word	0x0800334d
 8003340:	08003365 	.word	0x08003365
 8003344:	0800337d 	.word	0x0800337d
 8003348:	08003395 	.word	0x08003395
		case 0:						 	 		
			lcddev.width=LCD_W;
 800334c:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <LCD_direction+0xa4>)
 800334e:	22f0      	movs	r2, #240	; 0xf0
 8003350:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;		
 8003352:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <LCD_direction+0xa4>)
 8003354:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003358:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 800335a:	2108      	movs	r1, #8
 800335c:	2036      	movs	r0, #54	; 0x36
 800335e:	f7ff fd0f 	bl	8002d80 <LCD_WriteReg>
		break;
 8003362:	e024      	b.n	80033ae <LCD_direction+0x9a>
		case 1:
			lcddev.width=LCD_H;
 8003364:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <LCD_direction+0xa4>)
 8003366:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800336a:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 800336c:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <LCD_direction+0xa4>)
 800336e:	22f0      	movs	r2, #240	; 0xf0
 8003370:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8003372:	2168      	movs	r1, #104	; 0x68
 8003374:	2036      	movs	r0, #54	; 0x36
 8003376:	f7ff fd03 	bl	8002d80 <LCD_WriteReg>
		break;
 800337a:	e018      	b.n	80033ae <LCD_direction+0x9a>
		case 2:						 	 		
			lcddev.width=LCD_W;
 800337c:	4b0e      	ldr	r3, [pc, #56]	; (80033b8 <LCD_direction+0xa4>)
 800337e:	22f0      	movs	r2, #240	; 0xf0
 8003380:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;	
 8003382:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <LCD_direction+0xa4>)
 8003384:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003388:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 800338a:	21c8      	movs	r1, #200	; 0xc8
 800338c:	2036      	movs	r0, #54	; 0x36
 800338e:	f7ff fcf7 	bl	8002d80 <LCD_WriteReg>
		break;
 8003392:	e00c      	b.n	80033ae <LCD_direction+0x9a>
		case 3:
			lcddev.width=LCD_H;
 8003394:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <LCD_direction+0xa4>)
 8003396:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800339a:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <LCD_direction+0xa4>)
 800339e:	22f0      	movs	r2, #240	; 0xf0
 80033a0:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 80033a2:	21a8      	movs	r1, #168	; 0xa8
 80033a4:	2036      	movs	r0, #54	; 0x36
 80033a6:	f7ff fceb 	bl	8002d80 <LCD_WriteReg>
		break;	
 80033aa:	e000      	b.n	80033ae <LCD_direction+0x9a>
		default:break;
 80033ac:	bf00      	nop
	}		
}	 
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	200000fc 	.word	0x200000fc

080033bc <controlLed>:
/******************************************************************************/

/******************************************************************************/

void controlLed(DeviceState_e state)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	71fb      	strb	r3, [r7, #7]
	switch(state)
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d006      	beq.n	80033da <controlLed+0x1e>
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	dc2b      	bgt.n	8003428 <controlLed+0x6c>
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d01c      	beq.n	800340e <controlLed+0x52>
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d00d      	beq.n	80033f4 <controlLed+0x38>
 80033d8:	e026      	b.n	8003428 <controlLed+0x6c>
	{
	case PAUSE:
		GPIO_SetBits(LED_GREEN_1_PORT,LED_GREEN_1_GPIO);
 80033da:	2110      	movs	r1, #16
 80033dc:	481b      	ldr	r0, [pc, #108]	; (800344c <controlLed+0x90>)
 80033de:	f7fd f8b4 	bl	800054a <GPIO_SetBits>
		GPIO_ResetBits(LED_RED_PORT, LED_RED_GPIO);
 80033e2:	2102      	movs	r1, #2
 80033e4:	4819      	ldr	r0, [pc, #100]	; (800344c <controlLed+0x90>)
 80033e6:	f7fd f8bf 	bl	8000568 <GPIO_ResetBits>
		GPIO_ResetBits(LED_GREEN_2_PORT, LED_GREEN_2_GPIO);
 80033ea:	2101      	movs	r1, #1
 80033ec:	4818      	ldr	r0, [pc, #96]	; (8003450 <controlLed+0x94>)
 80033ee:	f7fd f8bb 	bl	8000568 <GPIO_ResetBits>
		break;
 80033f2:	e026      	b.n	8003442 <controlLed+0x86>
	case RUN:
		GPIO_SetBits(LED_GREEN_2_PORT,LED_GREEN_2_GPIO);
 80033f4:	2101      	movs	r1, #1
 80033f6:	4816      	ldr	r0, [pc, #88]	; (8003450 <controlLed+0x94>)
 80033f8:	f7fd f8a7 	bl	800054a <GPIO_SetBits>
		GPIO_ResetBits(LED_RED_PORT, LED_RED_GPIO);
 80033fc:	2102      	movs	r1, #2
 80033fe:	4813      	ldr	r0, [pc, #76]	; (800344c <controlLed+0x90>)
 8003400:	f7fd f8b2 	bl	8000568 <GPIO_ResetBits>
		GPIO_ResetBits(LED_GREEN_1_PORT, LED_GREEN_1_GPIO);
 8003404:	2110      	movs	r1, #16
 8003406:	4811      	ldr	r0, [pc, #68]	; (800344c <controlLed+0x90>)
 8003408:	f7fd f8ae 	bl	8000568 <GPIO_ResetBits>
		break;
 800340c:	e019      	b.n	8003442 <controlLed+0x86>
	case STOP:
		GPIO_SetBits(LED_RED_PORT,LED_RED_GPIO);
 800340e:	2102      	movs	r1, #2
 8003410:	480e      	ldr	r0, [pc, #56]	; (800344c <controlLed+0x90>)
 8003412:	f7fd f89a 	bl	800054a <GPIO_SetBits>
		GPIO_SetBits(LED_GREEN_2_PORT, LED_GREEN_2_GPIO);
 8003416:	2101      	movs	r1, #1
 8003418:	480d      	ldr	r0, [pc, #52]	; (8003450 <controlLed+0x94>)
 800341a:	f7fd f896 	bl	800054a <GPIO_SetBits>
		GPIO_SetBits(LED_GREEN_1_PORT, LED_GREEN_1_GPIO);
 800341e:	2110      	movs	r1, #16
 8003420:	480a      	ldr	r0, [pc, #40]	; (800344c <controlLed+0x90>)
 8003422:	f7fd f892 	bl	800054a <GPIO_SetBits>
		break;
 8003426:	e00c      	b.n	8003442 <controlLed+0x86>
	default:
		GPIO_ResetBits(LED_RED_PORT, LED_RED_GPIO);
 8003428:	2102      	movs	r1, #2
 800342a:	4808      	ldr	r0, [pc, #32]	; (800344c <controlLed+0x90>)
 800342c:	f7fd f89c 	bl	8000568 <GPIO_ResetBits>
		GPIO_ResetBits(LED_GREEN_2_PORT, LED_GREEN_2_GPIO);
 8003430:	2101      	movs	r1, #1
 8003432:	4807      	ldr	r0, [pc, #28]	; (8003450 <controlLed+0x94>)
 8003434:	f7fd f898 	bl	8000568 <GPIO_ResetBits>
		GPIO_ResetBits(LED_GREEN_1_PORT, LED_GREEN_1_GPIO);
 8003438:	2110      	movs	r1, #16
 800343a:	4804      	ldr	r0, [pc, #16]	; (800344c <controlLed+0x90>)
 800343c:	f7fd f894 	bl	8000568 <GPIO_ResetBits>
		break;
 8003440:	bf00      	nop
	}
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40020000 	.word	0x40020000
 8003450:	40020400 	.word	0x40020400

08003454 <ledInit>:
void ledInit(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GpioInitStruct;
	RCC_AHB1PeriphClockCmd(LED_GREEN_1_RCC, ENABLE);
 800345a:	2101      	movs	r1, #1
 800345c:	2001      	movs	r0, #1
 800345e:	f7fd f989 	bl	8000774 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(LED_RED_RCC, ENABLE);
 8003462:	2101      	movs	r1, #1
 8003464:	2001      	movs	r0, #1
 8003466:	f7fd f985 	bl	8000774 <RCC_AHB1PeriphClockCmd>

	GpioInitStruct.GPIO_Mode = GPIO_Mode_OUT;
 800346a:	2301      	movs	r3, #1
 800346c:	713b      	strb	r3, [r7, #4]
	GpioInitStruct.GPIO_OType = GPIO_OType_PP;
 800346e:	2300      	movs	r3, #0
 8003470:	71bb      	strb	r3, [r7, #6]
	GpioInitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8003472:	2302      	movs	r3, #2
 8003474:	71fb      	strb	r3, [r7, #7]
	GpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8003476:	2302      	movs	r3, #2
 8003478:	717b      	strb	r3, [r7, #5]

	GpioInitStruct.GPIO_Pin = LED_RED_GPIO;
 800347a:	2302      	movs	r3, #2
 800347c:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_RED_PORT, &GpioInitStruct);
 800347e:	463b      	mov	r3, r7
 8003480:	4619      	mov	r1, r3
 8003482:	480a      	ldr	r0, [pc, #40]	; (80034ac <ledInit+0x58>)
 8003484:	f7fc ffb8 	bl	80003f8 <GPIO_Init>

	GpioInitStruct.GPIO_Pin = LED_GREEN_1_GPIO;
 8003488:	2310      	movs	r3, #16
 800348a:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_GREEN_1_PORT, &GpioInitStruct);
 800348c:	463b      	mov	r3, r7
 800348e:	4619      	mov	r1, r3
 8003490:	4806      	ldr	r0, [pc, #24]	; (80034ac <ledInit+0x58>)
 8003492:	f7fc ffb1 	bl	80003f8 <GPIO_Init>

	GpioInitStruct.GPIO_Pin = LED_GREEN_2_GPIO;
 8003496:	2301      	movs	r3, #1
 8003498:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_GREEN_2_PORT, &GpioInitStruct);
 800349a:	463b      	mov	r3, r7
 800349c:	4619      	mov	r1, r3
 800349e:	4804      	ldr	r0, [pc, #16]	; (80034b0 <ledInit+0x5c>)
 80034a0:	f7fc ffaa 	bl	80003f8 <GPIO_Init>
}
 80034a4:	bf00      	nop
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40020000 	.word	0x40020000
 80034b0:	40020400 	.word	0x40020400

080034b4 <updateDataStopHandleCallBack>:

/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/
void updateDataStopHandleCallBack(upDateDataStopHandle pHandle)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
	pUpdateDataStopHandle = pHandle;
 80034bc:	4a04      	ldr	r2, [pc, #16]	; (80034d0 <updateDataStopHandleCallBack+0x1c>)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6013      	str	r3, [r2, #0]
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	2000010c 	.word	0x2000010c

080034d4 <HMI>:
void HMI(uint32_t dwCountMax,\
		uint32_t dwCounting,\
		uint32_t dwCountMiss,\
		uint32_t Thold,\
		uint8_t State)
{
 80034d4:	b590      	push	{r4, r7, lr}
 80034d6:	b09b      	sub	sp, #108	; 0x6c
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	603b      	str	r3, [r7, #0]
	//ValueKey_e key = NOKEY ;
	static u8 Flag = 0;
	u16 lengthNum = 10;
 80034e2:	230a      	movs	r3, #10
 80034e4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	u16 size = 16;
 80034e8:	2310      	movs	r3, #16
 80034ea:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	u16 widthStr = 100;
 80034ee:	2364      	movs	r3, #100	; 0x64
 80034f0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	u16 widthBox = lengthNum*(size/2);
 80034f4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80034f8:	085b      	lsrs	r3, r3, #1
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003500:	fb12 f303 	smulbb	r3, r2, r3
 8003504:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	u16 heightBox = 20;
 8003508:	2314      	movs	r3, #20
 800350a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	u16 xEditNumCntMax = 70;
 800350e:	2346      	movs	r3, #70	; 0x46
 8003510:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	u16 yEditNumCntMax = 50;
 8003514:	2332      	movs	r3, #50	; 0x32
 8003516:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	u16 xEditNumThold = 70;
 800351a:	2346      	movs	r3, #70	; 0x46
 800351c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	u16 yEditNumThold = 80;
 8003520:	2350      	movs	r3, #80	; 0x50
 8003522:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	u16 xEditNumCntMiss = 70;
 8003526:	2346      	movs	r3, #70	; 0x46
 8003528:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	u16 yEditNumCntMiss = 110;
 800352c:	236e      	movs	r3, #110	; 0x6e
 800352e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	u16 xEditNumCnting = 70;
 8003532:	2346      	movs	r3, #70	; 0x46
 8003534:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	u16 yEditNumCnting = 140;
 8003538:	238c      	movs	r3, #140	; 0x8c
 800353a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46


	u16 XsBoxCntMax = xEditNumCntMax + widthStr -1;
 800353e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003542:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003546:	4413      	add	r3, r2
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	u16 YsBoxCntMax = yEditNumCntMax -1;
 8003550:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003554:	3b01      	subs	r3, #1
 8003556:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	u16 XeBoxCntMax = XsBoxCntMax + widthBox;
 800355a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800355e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003562:	4413      	add	r3, r2
 8003564:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	u16 YeBoxCntMax = YsBoxCntMax + heightBox;
 8003568:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800356c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003570:	4413      	add	r3, r2
 8003572:	87fb      	strh	r3, [r7, #62]	; 0x3e

	u16 XsBoxThold = xEditNumThold + widthStr -1;
 8003574:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003578:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800357c:	4413      	add	r3, r2
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	87bb      	strh	r3, [r7, #60]	; 0x3c
	u16 YsBoxThold = yEditNumThold - 1;
 8003584:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003588:	3b01      	subs	r3, #1
 800358a:	877b      	strh	r3, [r7, #58]	; 0x3a
	u16 XeBoxThold = XsBoxThold + widthBox;
 800358c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800358e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003592:	4413      	add	r3, r2
 8003594:	873b      	strh	r3, [r7, #56]	; 0x38
	u16 YeBoxThold = YsBoxThold + heightBox;
 8003596:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003598:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800359c:	4413      	add	r3, r2
 800359e:	86fb      	strh	r3, [r7, #54]	; 0x36

	u16 XsBoxCnting = xEditNumCnting + widthStr -1;
 80035a0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80035a4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80035a8:	4413      	add	r3, r2
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	86bb      	strh	r3, [r7, #52]	; 0x34
	u16 YsBoxCnting = yEditNumCnting - 1;
 80035b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80035b4:	3b01      	subs	r3, #1
 80035b6:	867b      	strh	r3, [r7, #50]	; 0x32
	u16 XeBoxCnting = XsBoxCnting + widthBox;
 80035b8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80035ba:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80035be:	4413      	add	r3, r2
 80035c0:	863b      	strh	r3, [r7, #48]	; 0x30
	u16 YeBoxCnting = YsBoxCnting + heightBox;
 80035c2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80035c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80035c8:	4413      	add	r3, r2
 80035ca:	85fb      	strh	r3, [r7, #46]	; 0x2e

	u16 XsBoxCntMiss = xEditNumCntMiss + widthStr -1;
 80035cc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80035d0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80035d4:	4413      	add	r3, r2
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	85bb      	strh	r3, [r7, #44]	; 0x2c
	u16 YsBoxCntMiss = yEditNumCntMiss - 1;
 80035dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035e0:	3b01      	subs	r3, #1
 80035e2:	857b      	strh	r3, [r7, #42]	; 0x2a
	u16 XeBoxCntMiss = XsBoxCntMiss + widthBox;
 80035e4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80035e6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80035ea:	4413      	add	r3, r2
 80035ec:	853b      	strh	r3, [r7, #40]	; 0x28
	u16 YeBoxCntMiss = YsBoxCntMiss + heightBox;
 80035ee:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80035f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80035f4:	4413      	add	r3, r2
 80035f6:	84fb      	strh	r3, [r7, #38]	; 0x26

	u16 XsBoxProcess = 20;
 80035f8:	2314      	movs	r3, #20
 80035fa:	84bb      	strh	r3, [r7, #36]	; 0x24
	u16 YsBoxProcess = YeBoxCnting +20;
 80035fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035fe:	3314      	adds	r3, #20
 8003600:	847b      	strh	r3, [r7, #34]	; 0x22
	u16 XeBoxProcess = 300;
 8003602:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003606:	843b      	strh	r3, [r7, #32]
	u16 YeBoxProcess = YsBoxProcess + heightBox;
 8003608:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800360a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800360e:	4413      	add	r3, r2
 8003610:	83fb      	strh	r3, [r7, #30]

	u16 XsUpdateBoxProcess = XsBoxProcess;
 8003612:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003614:	83bb      	strh	r3, [r7, #28]
	u16 YsUpdateBoxProcess = YsBoxProcess;
 8003616:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003618:	837b      	strh	r3, [r7, #26]
	u16 XeUpdateBoxProcess = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	833b      	strh	r3, [r7, #24]
	u16 YeUpdateBoxProcess = YeBoxProcess;
 800361e:	8bfb      	ldrh	r3, [r7, #30]
 8003620:	82fb      	strh	r3, [r7, #22]

	if(State == 0 && Flag == 0)
 8003622:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8003626:	2b00      	cmp	r3, #0
 8003628:	d16b      	bne.n	8003702 <HMI+0x22e>
 800362a:	4b50      	ldr	r3, [pc, #320]	; (800376c <HMI+0x298>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d167      	bne.n	8003702 <HMI+0x22e>
		{
			LCD_Clear(WHITE);
 8003632:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003636:	f7ff fc15 	bl	8002e64 <LCD_Clear>
			//Print Titel
			LCD_ShowTitle(heightBox, WHITE, BLUE, (u8*)"TEST JIG SOCKET", 16, 1);
 800363a:	f8b7 0056 	ldrh.w	r0, [r7, #86]	; 0x56
 800363e:	2301      	movs	r3, #1
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	2310      	movs	r3, #16
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	4b4a      	ldr	r3, [pc, #296]	; (8003770 <HMI+0x29c>)
 8003648:	221f      	movs	r2, #31
 800364a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800364e:	f7fe faa3 	bl	8001b98 <LCD_ShowTitle>
			LCD_ShowEditNum(xEditNumCntMax, yEditNumCntMax,(u8*)"Count Max", lengthNum);
 8003652:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
 800365c:	f8b7 0054 	ldrh.w	r0, [r7, #84]	; 0x54
 8003660:	4a44      	ldr	r2, [pc, #272]	; (8003774 <HMI+0x2a0>)
 8003662:	f7fe fe7c 	bl	800235e <LCD_ShowEditNum>
			LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMax);
 8003666:	8ffc      	ldrh	r4, [r7, #62]	; 0x3e
 8003668:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800366c:	f8b7 1042 	ldrh.w	r1, [r7, #66]	; 0x42
 8003670:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	4623      	mov	r3, r4
 800367a:	f7fe feb7 	bl	80023ec <LCD_UpdateEditNum>
			LCD_ShowEditNum(xEditNumThold, yEditNumThold,(u8*)"Time Hold", lengthNum);
 800367e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 8003688:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
 800368c:	4a3a      	ldr	r2, [pc, #232]	; (8003778 <HMI+0x2a4>)
 800368e:	f7fe fe66 	bl	800235e <LCD_ShowEditNum>
			LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, Thold);
 8003692:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 8003694:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003696:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8003698:	8fb8      	ldrh	r0, [r7, #60]	; 0x3c
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	4623      	mov	r3, r4
 80036a0:	f7fe fea4 	bl	80023ec <LCD_UpdateEditNum>

			LCD_ShowEditNum(xEditNumCnting, yEditNumCnting,(u8*)"Counting", lengthNum);
 80036a4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80036ae:	f8b7 0048 	ldrh.w	r0, [r7, #72]	; 0x48
 80036b2:	4a32      	ldr	r2, [pc, #200]	; (800377c <HMI+0x2a8>)
 80036b4:	f7fe fe53 	bl	800235e <LCD_ShowEditNum>
			LCD_UpdateEditNum(XsBoxCnting, YsBoxCnting, XeBoxCnting, YeBoxCnting, dwCounting);
 80036b8:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 80036ba:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80036bc:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80036be:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	4623      	mov	r3, r4
 80036c6:	f7fe fe91 	bl	80023ec <LCD_UpdateEditNum>
			LCD_ShowEditNum(xEditNumCntMiss, yEditNumCntMiss,(u8*)"Count Miss", lengthNum);
 80036ca:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 80036d4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80036d8:	4a29      	ldr	r2, [pc, #164]	; (8003780 <HMI+0x2ac>)
 80036da:	f7fe fe40 	bl	800235e <LCD_ShowEditNum>
			LCD_UpdateEditNum(XsBoxCntMiss, YsBoxCntMiss, XeBoxCntMiss, YeBoxCntMiss, dwCountMiss);
 80036de:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80036e0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80036e2:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80036e4:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	4623      	mov	r3, r4
 80036ec:	f7fe fe7e 	bl	80023ec <LCD_UpdateEditNum>

			LCD_DrawRectangle(XsBoxProcess,YsBoxProcess,XeBoxProcess,YeBoxProcess);
 80036f0:	8bfb      	ldrh	r3, [r7, #30]
 80036f2:	8c3a      	ldrh	r2, [r7, #32]
 80036f4:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80036f6:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80036f8:	f7fd ffea 	bl	80016d0 <LCD_DrawRectangle>
			Flag = 1;
 80036fc:	4b1b      	ldr	r3, [pc, #108]	; (800376c <HMI+0x298>)
 80036fe:	2201      	movs	r2, #1
 8003700:	701a      	strb	r2, [r3, #0]
		}
	if(State == 1)
 8003702:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8003706:	2b01      	cmp	r3, #1
 8003708:	d12b      	bne.n	8003762 <HMI+0x28e>
	{
			//LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMax);
			LCD_UpdateEditNum(XsBoxCnting, YsBoxCnting, XeBoxCnting, YeBoxCnting, dwCounting);
 800370a:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 800370c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800370e:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8003710:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	4623      	mov	r3, r4
 8003718:	f7fe fe68 	bl	80023ec <LCD_UpdateEditNum>
			LCD_UpdateEditNum(XsBoxCntMiss, YsBoxCntMiss, XeBoxCntMiss, YeBoxCntMiss, dwCountMiss);
 800371c:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 800371e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003720:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8003722:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	4623      	mov	r3, r4
 800372a:	f7fe fe5f 	bl	80023ec <LCD_UpdateEditNum>
			//LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, Thold);
			Flag = 0;
 800372e:	4b0f      	ldr	r3, [pc, #60]	; (800376c <HMI+0x298>)
 8003730:	2200      	movs	r2, #0
 8003732:	701a      	strb	r2, [r3, #0]

			//Update process
			XeUpdateBoxProcess = XsUpdateBoxProcess +  (XeBoxProcess-XsBoxProcess)*(u16)((int)(dwCounting/dwCountMax));
 8003734:	8c3a      	ldrh	r2, [r7, #32]
 8003736:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	b29a      	uxth	r2, r3
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	fbb1 f3f3 	udiv	r3, r1, r3
 8003744:	b29b      	uxth	r3, r3
 8003746:	fb12 f303 	smulbb	r3, r2, r3
 800374a:	b29a      	uxth	r2, r3
 800374c:	8bbb      	ldrh	r3, [r7, #28]
 800374e:	4413      	add	r3, r2
 8003750:	833b      	strh	r3, [r7, #24]
			LCD_Fill(XsUpdateBoxProcess, YsUpdateBoxProcess, XeUpdateBoxProcess, YeUpdateBoxProcess, BLACK);
 8003752:	8afb      	ldrh	r3, [r7, #22]
 8003754:	8b3a      	ldrh	r2, [r7, #24]
 8003756:	8b79      	ldrh	r1, [r7, #26]
 8003758:	8bb8      	ldrh	r0, [r7, #28]
 800375a:	2400      	movs	r4, #0
 800375c:	9400      	str	r4, [sp, #0]
 800375e:	f7fd fee7 	bl	8001530 <LCD_Fill>

	}

}
 8003762:	bf00      	nop
 8003764:	3764      	adds	r7, #100	; 0x64
 8003766:	46bd      	mov	sp, r7
 8003768:	bd90      	pop	{r4, r7, pc}
 800376a:	bf00      	nop
 800376c:	20000126 	.word	0x20000126
 8003770:	08006018 	.word	0x08006018
 8003774:	08006028 	.word	0x08006028
 8003778:	08006034 	.word	0x08006034
 800377c:	08006040 	.word	0x08006040
 8003780:	0800604c 	.word	0x0800604c

08003784 <processMainMenu>:
uint8_t processMainMenu(uint32_t dwCountMax,\
						uint32_t dwCounting,\
						uint32_t dwCountMiss,\
						uint32_t Thold)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
	uint8_t state = 0;
 8003792:	2300      	movs	r3, #0
 8003794:	75fb      	strb	r3, [r7, #23]
	uint8_t byOptionChoose = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	75bb      	strb	r3, [r7, #22]


	switch(option)
 800379a:	4b55      	ldr	r3, [pc, #340]	; (80038f0 <processMainMenu+0x16c>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b04      	cmp	r3, #4
 80037a0:	f200 809b 	bhi.w	80038da <processMainMenu+0x156>
 80037a4:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <processMainMenu+0x28>)
 80037a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037aa:	bf00      	nop
 80037ac:	080037c1 	.word	0x080037c1
 80037b0:	08003809 	.word	0x08003809
 80037b4:	0800383f 	.word	0x0800383f
 80037b8:	08003877 	.word	0x08003877
 80037bc:	080038b3 	.word	0x080038b3
	{
	case MENU_OPTION:
		byOptionChoose = getOptionMainMenu();
 80037c0:	f000 f89a 	bl	80038f8 <getOptionMainMenu>
 80037c4:	4603      	mov	r3, r0
 80037c6:	75bb      	strb	r3, [r7, #22]
		if( byOptionChoose == 1)
 80037c8:	7dbb      	ldrb	r3, [r7, #22]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d103      	bne.n	80037d6 <processMainMenu+0x52>
		{
			option = INFORMATION_OPTION;
 80037ce:	4b48      	ldr	r3, [pc, #288]	; (80038f0 <processMainMenu+0x16c>)
 80037d0:	2201      	movs	r2, #1
 80037d2:	701a      	strb	r2, [r3, #0]
			option = SLEEP_OPTION;
		}else
		{
			option = MENU_OPTION;
		}
		break;
 80037d4:	e086      	b.n	80038e4 <processMainMenu+0x160>
		}else if(byOptionChoose == 2)
 80037d6:	7dbb      	ldrb	r3, [r7, #22]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d103      	bne.n	80037e4 <processMainMenu+0x60>
			option = PREPARE_OPTION;
 80037dc:	4b44      	ldr	r3, [pc, #272]	; (80038f0 <processMainMenu+0x16c>)
 80037de:	2202      	movs	r2, #2
 80037e0:	701a      	strb	r2, [r3, #0]
		break;
 80037e2:	e07f      	b.n	80038e4 <processMainMenu+0x160>
		}else if(byOptionChoose == 3)
 80037e4:	7dbb      	ldrb	r3, [r7, #22]
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d103      	bne.n	80037f2 <processMainMenu+0x6e>
			option = SETUP_AND_RUN_OPTION;
 80037ea:	4b41      	ldr	r3, [pc, #260]	; (80038f0 <processMainMenu+0x16c>)
 80037ec:	2203      	movs	r2, #3
 80037ee:	701a      	strb	r2, [r3, #0]
		break;
 80037f0:	e078      	b.n	80038e4 <processMainMenu+0x160>
		}else if(byOptionChoose == 4)
 80037f2:	7dbb      	ldrb	r3, [r7, #22]
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d103      	bne.n	8003800 <processMainMenu+0x7c>
			option = SLEEP_OPTION;
 80037f8:	4b3d      	ldr	r3, [pc, #244]	; (80038f0 <processMainMenu+0x16c>)
 80037fa:	2204      	movs	r2, #4
 80037fc:	701a      	strb	r2, [r3, #0]
		break;
 80037fe:	e071      	b.n	80038e4 <processMainMenu+0x160>
			option = MENU_OPTION;
 8003800:	4b3b      	ldr	r3, [pc, #236]	; (80038f0 <processMainMenu+0x16c>)
 8003802:	2200      	movs	r2, #0
 8003804:	701a      	strb	r2, [r3, #0]
		break;
 8003806:	e06d      	b.n	80038e4 <processMainMenu+0x160>
	case INFORMATION_OPTION:
		action = processInfomationOption(dwCountMax,dwCounting,dwCountMiss,Thold);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f88a 	bl	8003928 <processInfomationOption>
 8003814:	4603      	mov	r3, r0
 8003816:	461a      	mov	r2, r3
 8003818:	4b36      	ldr	r3, [pc, #216]	; (80038f4 <processMainMenu+0x170>)
 800381a:	701a      	strb	r2, [r3, #0]
		if(action == RETURN_ACTION)
 800381c:	4b35      	ldr	r3, [pc, #212]	; (80038f4 <processMainMenu+0x170>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d102      	bne.n	800382a <processMainMenu+0xa6>
		{
			option = MENU_OPTION;
 8003824:	4b32      	ldr	r3, [pc, #200]	; (80038f0 <processMainMenu+0x16c>)
 8003826:	2200      	movs	r2, #0
 8003828:	701a      	strb	r2, [r3, #0]
		}
		if(action == SELECT_ACTION)
 800382a:	4b32      	ldr	r3, [pc, #200]	; (80038f4 <processMainMenu+0x170>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d157      	bne.n	80038e2 <processMainMenu+0x15e>
		{
			//Restart
			option = MENU_OPTION;
 8003832:	4b2f      	ldr	r3, [pc, #188]	; (80038f0 <processMainMenu+0x16c>)
 8003834:	2200      	movs	r2, #0
 8003836:	701a      	strb	r2, [r3, #0]
			state = 1;
 8003838:	2301      	movs	r3, #1
 800383a:	75fb      	strb	r3, [r7, #23]
		}
		break;
 800383c:	e051      	b.n	80038e2 <processMainMenu+0x15e>
	case PREPARE_OPTION:
		action = processPrepareOption();
 800383e:	f000 f8e3 	bl	8003a08 <processPrepareOption>
 8003842:	4603      	mov	r3, r0
 8003844:	461a      	mov	r2, r3
 8003846:	4b2b      	ldr	r3, [pc, #172]	; (80038f4 <processMainMenu+0x170>)
 8003848:	701a      	strb	r2, [r3, #0]
		if(action == RETURN_ACTION)
 800384a:	4b2a      	ldr	r3, [pc, #168]	; (80038f4 <processMainMenu+0x170>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d103      	bne.n	800385a <processMainMenu+0xd6>
		{
			option = MENU_OPTION;
 8003852:	4b27      	ldr	r3, [pc, #156]	; (80038f0 <processMainMenu+0x16c>)
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]
			state = 1;
		}else
		{
			option = PREPARE_OPTION;
		}
		break;
 8003858:	e044      	b.n	80038e4 <processMainMenu+0x160>
		}else if(action == SELECT_ACTION)
 800385a:	4b26      	ldr	r3, [pc, #152]	; (80038f4 <processMainMenu+0x170>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d105      	bne.n	800386e <processMainMenu+0xea>
			option = MENU_OPTION;
 8003862:	4b23      	ldr	r3, [pc, #140]	; (80038f0 <processMainMenu+0x16c>)
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]
			state = 1;
 8003868:	2301      	movs	r3, #1
 800386a:	75fb      	strb	r3, [r7, #23]
		break;
 800386c:	e03a      	b.n	80038e4 <processMainMenu+0x160>
			option = PREPARE_OPTION;
 800386e:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <processMainMenu+0x16c>)
 8003870:	2202      	movs	r2, #2
 8003872:	701a      	strb	r2, [r3, #0]
		break;
 8003874:	e036      	b.n	80038e4 <processMainMenu+0x160>
	case SETUP_AND_RUN_OPTION:
		action = processSetUpAndRunOption(dwCountMax,Thold);
 8003876:	6839      	ldr	r1, [r7, #0]
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f8f3 	bl	8003a64 <processSetUpAndRunOption>
 800387e:	4603      	mov	r3, r0
 8003880:	461a      	mov	r2, r3
 8003882:	4b1c      	ldr	r3, [pc, #112]	; (80038f4 <processMainMenu+0x170>)
 8003884:	701a      	strb	r2, [r3, #0]
		if(action == RETURN_ACTION)
 8003886:	4b1b      	ldr	r3, [pc, #108]	; (80038f4 <processMainMenu+0x170>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d103      	bne.n	8003896 <processMainMenu+0x112>
		{
			option = MENU_OPTION;
 800388e:	4b18      	ldr	r3, [pc, #96]	; (80038f0 <processMainMenu+0x16c>)
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
			state = 1;
		}else
		{
			option = SETUP_AND_RUN_OPTION;
		}
		break;
 8003894:	e026      	b.n	80038e4 <processMainMenu+0x160>
		}else if(action == SELECT_ACTION)
 8003896:	4b17      	ldr	r3, [pc, #92]	; (80038f4 <processMainMenu+0x170>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d105      	bne.n	80038aa <processMainMenu+0x126>
			option = MENU_OPTION;
 800389e:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <processMainMenu+0x16c>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
			state = 1;
 80038a4:	2301      	movs	r3, #1
 80038a6:	75fb      	strb	r3, [r7, #23]
		break;
 80038a8:	e01c      	b.n	80038e4 <processMainMenu+0x160>
			option = SETUP_AND_RUN_OPTION;
 80038aa:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <processMainMenu+0x16c>)
 80038ac:	2203      	movs	r2, #3
 80038ae:	701a      	strb	r2, [r3, #0]
		break;
 80038b0:	e018      	b.n	80038e4 <processMainMenu+0x160>
	case SLEEP_OPTION:
		action = processSleepOption();
 80038b2:	f000 f8ed 	bl	8003a90 <processSleepOption>
 80038b6:	4603      	mov	r3, r0
 80038b8:	461a      	mov	r2, r3
 80038ba:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <processMainMenu+0x170>)
 80038bc:	701a      	strb	r2, [r3, #0]
		if(action == SELECT_ACTION)
 80038be:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <processMainMenu+0x170>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d103      	bne.n	80038ce <processMainMenu+0x14a>
		{
			//
			option = SLEEP_OPTION;
 80038c6:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <processMainMenu+0x16c>)
 80038c8:	2204      	movs	r2, #4
 80038ca:	701a      	strb	r2, [r3, #0]
 80038cc:	e002      	b.n	80038d4 <processMainMenu+0x150>
		}else
		{
			option = MENU_OPTION;
 80038ce:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <processMainMenu+0x16c>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
		}
		state = 1;
 80038d4:	2301      	movs	r3, #1
 80038d6:	75fb      	strb	r3, [r7, #23]
		break;
 80038d8:	e004      	b.n	80038e4 <processMainMenu+0x160>
	default:
		option = MENU_OPTION;
 80038da:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <processMainMenu+0x16c>)
 80038dc:	2200      	movs	r2, #0
 80038de:	701a      	strb	r2, [r3, #0]
		break;
 80038e0:	e000      	b.n	80038e4 <processMainMenu+0x160>
		break;
 80038e2:	bf00      	nop
	}

	return state;
 80038e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000125 	.word	0x20000125
 80038f4:	20000124 	.word	0x20000124

080038f8 <getOptionMainMenu>:

uint8_t getOptionMainMenu(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
	uint8_t byOption = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	71fb      	strb	r3, [r7, #7]
	while(byOption == 0)
 8003902:	e007      	b.n	8003914 <getOptionMainMenu+0x1c>
	{
		byOption = getChooseMainMenu(4, 20, pMenuMain, 16);
 8003904:	2310      	movs	r3, #16
 8003906:	4a07      	ldr	r2, [pc, #28]	; (8003924 <getOptionMainMenu+0x2c>)
 8003908:	2114      	movs	r1, #20
 800390a:	2004      	movs	r0, #4
 800390c:	f001 f92a 	bl	8004b64 <getChooseMainMenu>
 8003910:	4603      	mov	r3, r0
 8003912:	71fb      	strb	r3, [r7, #7]
	while(byOption == 0)
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f4      	beq.n	8003904 <getOptionMainMenu+0xc>
	}
	return byOption;
 800391a:	79fb      	ldrb	r3, [r7, #7]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	20000028 	.word	0x20000028

08003928 <processInfomationOption>:
Action_e processInfomationOption(uint32_t dwCountMax,\
							uint32_t dwCounting,\
							uint32_t dwCountMiss,\
							uint32_t Thold)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08a      	sub	sp, #40	; 0x28
 800392c:	af04      	add	r7, sp, #16
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
	Action_e action = NONE_ACTION;
 8003936:	2300      	movs	r3, #0
 8003938:	75fb      	strb	r3, [r7, #23]
	//void LCD_ShowNumAndStr(u16 x,u16 y,u8 size,char *pStr1,u8 lengthStr,u32 num,u8 lengthNum,u8 mode)
	LCD_ShowStrAndStr(20, 40, 16, "NAME", 150, "VALUE", 64, 1);
 800393a:	2301      	movs	r3, #1
 800393c:	9303      	str	r3, [sp, #12]
 800393e:	2340      	movs	r3, #64	; 0x40
 8003940:	9302      	str	r3, [sp, #8]
 8003942:	4b2b      	ldr	r3, [pc, #172]	; (80039f0 <processInfomationOption+0xc8>)
 8003944:	9301      	str	r3, [sp, #4]
 8003946:	2396      	movs	r3, #150	; 0x96
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	4b2a      	ldr	r3, [pc, #168]	; (80039f4 <processInfomationOption+0xcc>)
 800394c:	2210      	movs	r2, #16
 800394e:	2128      	movs	r1, #40	; 0x28
 8003950:	2014      	movs	r0, #20
 8003952:	f7fe fb79 	bl	8002048 <LCD_ShowStrAndStr>
	LCD_ShowNumAndStr(20, 60,16,"COUNT_MAX  ",150,dwCountMax,64,1);
 8003956:	2301      	movs	r3, #1
 8003958:	9303      	str	r3, [sp, #12]
 800395a:	2340      	movs	r3, #64	; 0x40
 800395c:	9302      	str	r3, [sp, #8]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	9301      	str	r3, [sp, #4]
 8003962:	2396      	movs	r3, #150	; 0x96
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	4b24      	ldr	r3, [pc, #144]	; (80039f8 <processInfomationOption+0xd0>)
 8003968:	2210      	movs	r2, #16
 800396a:	213c      	movs	r1, #60	; 0x3c
 800396c:	2014      	movs	r0, #20
 800396e:	f7fe faa9 	bl	8001ec4 <LCD_ShowNumAndStr>
	LCD_ShowNumAndStr(20, 80,16,"COUTING    ",150,dwCounting,64,1);
 8003972:	2301      	movs	r3, #1
 8003974:	9303      	str	r3, [sp, #12]
 8003976:	2340      	movs	r3, #64	; 0x40
 8003978:	9302      	str	r3, [sp, #8]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	9301      	str	r3, [sp, #4]
 800397e:	2396      	movs	r3, #150	; 0x96
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <processInfomationOption+0xd4>)
 8003984:	2210      	movs	r2, #16
 8003986:	2150      	movs	r1, #80	; 0x50
 8003988:	2014      	movs	r0, #20
 800398a:	f7fe fa9b 	bl	8001ec4 <LCD_ShowNumAndStr>
	LCD_ShowNumAndStr(20, 100,16,"COUNTMISS  ",150,dwCountMiss,64,1);
 800398e:	2301      	movs	r3, #1
 8003990:	9303      	str	r3, [sp, #12]
 8003992:	2340      	movs	r3, #64	; 0x40
 8003994:	9302      	str	r3, [sp, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	9301      	str	r3, [sp, #4]
 800399a:	2396      	movs	r3, #150	; 0x96
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	4b18      	ldr	r3, [pc, #96]	; (8003a00 <processInfomationOption+0xd8>)
 80039a0:	2210      	movs	r2, #16
 80039a2:	2164      	movs	r1, #100	; 0x64
 80039a4:	2014      	movs	r0, #20
 80039a6:	f7fe fa8d 	bl	8001ec4 <LCD_ShowNumAndStr>
	LCD_ShowNumAndStr(20, 120,16,"T_HOLD     ",150,Thold,64,1);
 80039aa:	2301      	movs	r3, #1
 80039ac:	9303      	str	r3, [sp, #12]
 80039ae:	2340      	movs	r3, #64	; 0x40
 80039b0:	9302      	str	r3, [sp, #8]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	2396      	movs	r3, #150	; 0x96
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <processInfomationOption+0xdc>)
 80039bc:	2210      	movs	r2, #16
 80039be:	2178      	movs	r1, #120	; 0x78
 80039c0:	2014      	movs	r0, #20
 80039c2:	f7fe fa7f 	bl	8001ec4 <LCD_ShowNumAndStr>
	if(dwCounting<dwCountMax)
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d205      	bcs.n	80039da <processInfomationOption+0xb2>
	{
		action = getChooseInformation(1);
 80039ce:	2001      	movs	r0, #1
 80039d0:	f001 fa2e 	bl	8004e30 <getChooseInformation>
 80039d4:	4603      	mov	r3, r0
 80039d6:	75fb      	strb	r3, [r7, #23]
 80039d8:	e004      	b.n	80039e4 <processInfomationOption+0xbc>
	}else
	{
		action = getChooseInformation(0);
 80039da:	2000      	movs	r0, #0
 80039dc:	f001 fa28 	bl	8004e30 <getChooseInformation>
 80039e0:	4603      	mov	r3, r0
 80039e2:	75fb      	strb	r3, [r7, #23]
	}
	//In ra thong tin da luu
	//Get tuy chon Restart/Return

	return action;
 80039e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	08006060 	.word	0x08006060
 80039f4:	08006058 	.word	0x08006058
 80039f8:	08006068 	.word	0x08006068
 80039fc:	08006074 	.word	0x08006074
 8003a00:	08006080 	.word	0x08006080
 8003a04:	0800608c 	.word	0x0800608c

08003a08 <processPrepareOption>:
Action_e processPrepareOption(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af04      	add	r7, sp, #16
	Action_e action = NONE_ACTION;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	71fb      	strb	r3, [r7, #7]
	Show_Str(20, 25, BLACK, GREEN, (u8*)"SENSOR", 16, 1);
 8003a12:	2301      	movs	r3, #1
 8003a14:	9302      	str	r3, [sp, #8]
 8003a16:	2310      	movs	r3, #16
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <processPrepareOption+0x58>)
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a22:	2200      	movs	r2, #0
 8003a24:	2119      	movs	r1, #25
 8003a26:	2014      	movs	r0, #20
 8003a28:	f7ff f82c 	bl	8002a84 <Show_Str>
	LCD_DrawLine(20, 50, 220, 50);
 8003a2c:	2332      	movs	r3, #50	; 0x32
 8003a2e:	22dc      	movs	r2, #220	; 0xdc
 8003a30:	2132      	movs	r1, #50	; 0x32
 8003a32:	2014      	movs	r0, #20
 8003a34:	f7fd fdc8 	bl	80015c8 <LCD_DrawLine>

	LCD_DrawLine(220, 20, 220, 240);
 8003a38:	23f0      	movs	r3, #240	; 0xf0
 8003a3a:	22dc      	movs	r2, #220	; 0xdc
 8003a3c:	2114      	movs	r1, #20
 8003a3e:	20dc      	movs	r0, #220	; 0xdc
 8003a40:	f7fd fdc2 	bl	80015c8 <LCD_DrawLine>


	while(action == NONE_ACTION)
 8003a44:	e003      	b.n	8003a4e <processPrepareOption+0x46>
	{
		action = getChoosePrepare();
 8003a46:	f001 fb2b 	bl	80050a0 <getChoosePrepare>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	71fb      	strb	r3, [r7, #7]
	while(action == NONE_ACTION)
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f8      	beq.n	8003a46 <processPrepareOption+0x3e>
	}
	return action;
 8003a54:	79fb      	ldrb	r3, [r7, #7]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	08006098 	.word	0x08006098

08003a64 <processSetUpAndRunOption>:
Action_e processSetUpAndRunOption(u32 dwCountMax,\
		u32 dwTimeHold)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
	Action_e action = NONE_ACTION;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
	while(action == NONE_ACTION)
 8003a72:	e005      	b.n	8003a80 <processSetUpAndRunOption+0x1c>
	{
		action = getChooseSetAndRun(dwCountMax,dwTimeHold);
 8003a74:	6839      	ldr	r1, [r7, #0]
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f822 	bl	8003ac0 <getChooseSetAndRun>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	73fb      	strb	r3, [r7, #15]
	while(action == NONE_ACTION)
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f6      	beq.n	8003a74 <processSetUpAndRunOption+0x10>
	}
	return action;
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <processSleepOption>:
Action_e processSleepOption(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
	Action_e action = NONE_ACTION;
 8003a96:	2300      	movs	r3, #0
 8003a98:	71fb      	strb	r3, [r7, #7]
	while(action == NONE_ACTION)
 8003a9a:	e007      	b.n	8003aac <processSleepOption+0x1c>
	{
		action = getChooseMainMenu(4, 20, pMenuMain, 16);
 8003a9c:	2310      	movs	r3, #16
 8003a9e:	4a07      	ldr	r2, [pc, #28]	; (8003abc <processSleepOption+0x2c>)
 8003aa0:	2114      	movs	r1, #20
 8003aa2:	2004      	movs	r0, #4
 8003aa4:	f001 f85e 	bl	8004b64 <getChooseMainMenu>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	71fb      	strb	r3, [r7, #7]
	while(action == NONE_ACTION)
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f4      	beq.n	8003a9c <processSleepOption+0xc>
	}

	return action;
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	20000028 	.word	0x20000028

08003ac0 <getChooseSetAndRun>:
Action_e getChooseSetAndRun(u32 dwCountMax,\
		u32 dwTimeHold)
{
 8003ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ac2:	b09b      	sub	sp, #108	; 0x6c
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
	Action_e action = NONE_ACTION;
 8003aca:	2300      	movs	r3, #0
 8003acc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	static u8 flag = 0;
	static u8 Row = 0;
	u16 lengthNum = 10;
 8003ad0:	230a      	movs	r3, #10
 8003ad2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	u16 size = 16;
 8003ad6:	2310      	movs	r3, #16
 8003ad8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	u16 widthStr = 100;
 8003adc:	2364      	movs	r3, #100	; 0x64
 8003ade:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	u16 widthBox = lengthNum*(size/2);
 8003ae2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8003aee:	fb12 f303 	smulbb	r3, r2, r3
 8003af2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	u16 heightBox = 20;
 8003af6:	2314      	movs	r3, #20
 8003af8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	u16 heightButton = 20;
 8003afc:	2314      	movs	r3, #20
 8003afe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	u16 widthButton = 120;
 8003b02:	2378      	movs	r3, #120	; 0x78
 8003b04:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a


	u16 heightButtonUpDown = 50;
 8003b08:	2332      	movs	r3, #50	; 0x32
 8003b0a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	u16 widthButtonUpDown = 30;
 8003b0e:	231e      	movs	r3, #30
 8003b10:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	//Position of Button,edit-Number
	u16 xEditNumCntMax = 70;
 8003b14:	2346      	movs	r3, #70	; 0x46
 8003b16:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	u16 yEditNumCntMax = 53;
 8003b1a:	2335      	movs	r3, #53	; 0x35
 8003b1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	u16 xEditNumThold = 70;
 8003b20:	2346      	movs	r3, #70	; 0x46
 8003b22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	u16 yEditNumThold = 120;
 8003b26:	2378      	movs	r3, #120	; 0x78
 8003b28:	87fb      	strh	r3, [r7, #62]	; 0x3e

	u16 XsButtonRun = 320/2 - (widthButton/2);
 8003b2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b2e:	085b      	lsrs	r3, r3, #1
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8003b36:	87bb      	strh	r3, [r7, #60]	; 0x3c
	u16 YsButtonRun = 240-(heightButton*2+20+10);
 8003b38:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003b3c:	f1c3 0369 	rsb	r3, r3, #105	; 0x69
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	877b      	strh	r3, [r7, #58]	; 0x3a



	u16 XsBoxCntMax = xEditNumCntMax + widthStr -1;
 8003b46:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8003b4a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003b4e:	4413      	add	r3, r2
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	873b      	strh	r3, [r7, #56]	; 0x38
	u16 YsBoxCntMax = yEditNumCntMax -1;
 8003b56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	86fb      	strh	r3, [r7, #54]	; 0x36
	u16 XeBoxCntMax = XsBoxCntMax + widthBox;
 8003b5e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003b60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003b64:	4413      	add	r3, r2
 8003b66:	86bb      	strh	r3, [r7, #52]	; 0x34
	u16 YeBoxCntMax = YsBoxCntMax + heightBox;
 8003b68:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003b6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b6e:	4413      	add	r3, r2
 8003b70:	867b      	strh	r3, [r7, #50]	; 0x32

	u16 XsBoxThold = xEditNumThold + widthStr -1;
 8003b72:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003b76:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003b7a:	4413      	add	r3, r2
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	863b      	strh	r3, [r7, #48]	; 0x30
	u16 YsBoxThold = yEditNumThold - 1;
 8003b82:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003b84:	3b01      	subs	r3, #1
 8003b86:	85fb      	strh	r3, [r7, #46]	; 0x2e
	u16 XeBoxThold = XsBoxThold + widthBox;
 8003b88:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003b8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003b8e:	4413      	add	r3, r2
 8003b90:	85bb      	strh	r3, [r7, #44]	; 0x2c
	u16 YeBoxThold = YsBoxThold + heightBox;
 8003b92:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003b94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b98:	4413      	add	r3, r2
 8003b9a:	857b      	strh	r3, [r7, #42]	; 0x2a

	u16 XeButtonRun = XsButtonRun + widthButton;
 8003b9c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8003b9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ba2:	4413      	add	r3, r2
 8003ba4:	853b      	strh	r3, [r7, #40]	; 0x28
	u16 YeButtonRun = YsButtonRun + heightButton;
 8003ba6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003ba8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003bac:	4413      	add	r3, r2
 8003bae:	84fb      	strh	r3, [r7, #38]	; 0x26

	u16 XsButtonReturn = XsButtonRun;
 8003bb0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003bb2:	84bb      	strh	r3, [r7, #36]	; 0x24
	u16 XeButtonReturn = XsButtonReturn + widthButton;
 8003bb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bb6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003bba:	4413      	add	r3, r2
 8003bbc:	847b      	strh	r3, [r7, #34]	; 0x22
	u16 YsButtonReturn = YeButtonRun  + 20;
 8003bbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003bc0:	3314      	adds	r3, #20
 8003bc2:	843b      	strh	r3, [r7, #32]
	u16 YeButtonReturn = YsButtonReturn + heightButton;
 8003bc4:	8c3a      	ldrh	r2, [r7, #32]
 8003bc6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003bca:	4413      	add	r3, r2
 8003bcc:	83fb      	strh	r3, [r7, #30]

	u16 XsButtonUpDownCntMax = XeBoxCntMax+10;
 8003bce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003bd0:	330a      	adds	r3, #10
 8003bd2:	83bb      	strh	r3, [r7, #28]
	u16 YsButtonUpDownCntMax = YeBoxCntMax-heightBox/2-heightButtonUpDown/2;
 8003bd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bd8:	085b      	lsrs	r3, r3, #1
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	837b      	strh	r3, [r7, #26]
	u16 XeButtonUpDownCntMax = XsButtonUpDownCntMax + widthButtonUpDown;
 8003bee:	8bba      	ldrh	r2, [r7, #28]
 8003bf0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003bf4:	4413      	add	r3, r2
 8003bf6:	833b      	strh	r3, [r7, #24]
	u16 YeButtonUpDownCntMax = YsButtonUpDownCntMax + heightButtonUpDown;
 8003bf8:	8b7a      	ldrh	r2, [r7, #26]
 8003bfa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003bfe:	4413      	add	r3, r2
 8003c00:	82fb      	strh	r3, [r7, #22]

	u16 XsButtonUpDownTimeHold = XeBoxThold+10;
 8003c02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c04:	330a      	adds	r3, #10
 8003c06:	82bb      	strh	r3, [r7, #20]
	u16 YsButtonUpDownTimeHold = YeBoxThold-heightBox/2-heightButtonUpDown/2;
 8003c08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c0c:	085b      	lsrs	r3, r3, #1
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003c1a:	085b      	lsrs	r3, r3, #1
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	827b      	strh	r3, [r7, #18]
	u16 XeButtonUpDownTimeHold = XsButtonUpDownTimeHold + widthButtonUpDown;
 8003c22:	8aba      	ldrh	r2, [r7, #20]
 8003c24:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003c28:	4413      	add	r3, r2
 8003c2a:	823b      	strh	r3, [r7, #16]
	u16 YeButtonUpDownTimeHold = YsButtonUpDownTimeHold + heightButtonUpDown;
 8003c2c:	8a7a      	ldrh	r2, [r7, #18]
 8003c2e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003c32:	4413      	add	r3, r2
 8003c34:	81fb      	strh	r3, [r7, #14]

	key_t key = NOKEY;
 8003c36:	2300      	movs	r3, #0
 8003c38:	65bb      	str	r3, [r7, #88]	; 0x58
	static u32 dwCountMaxTemp;
	dwCountMaxTemp = dwCountMax;
 8003c3a:	4a9c      	ldr	r2, [pc, #624]	; (8003eac <getChooseSetAndRun+0x3ec>)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6013      	str	r3, [r2, #0]
	static u32 dwTimeHoldTemp;
	dwTimeHoldTemp = dwTimeHold;
 8003c40:	4a9b      	ldr	r2, [pc, #620]	; (8003eb0 <getChooseSetAndRun+0x3f0>)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6013      	str	r3, [r2, #0]

	if(flag == 0)
 8003c46:	4b9b      	ldr	r3, [pc, #620]	; (8003eb4 <getChooseSetAndRun+0x3f4>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f040 8096 	bne.w	8003d7c <getChooseSetAndRun+0x2bc>
	{
		LCD_ShowEditNum(xEditNumCntMax, yEditNumCntMax,(u8*)"Count Max", lengthNum);
 8003c50:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	f8b7 1042 	ldrh.w	r1, [r7, #66]	; 0x42
 8003c5a:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 8003c5e:	4a96      	ldr	r2, [pc, #600]	; (8003eb8 <getChooseSetAndRun+0x3f8>)
 8003c60:	f7fe fb7d 	bl	800235e <LCD_ShowEditNum>
		LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 8003c64:	4b91      	ldr	r3, [pc, #580]	; (8003eac <getChooseSetAndRun+0x3ec>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8003c6a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c6c:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8003c6e:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	4623      	mov	r3, r4
 8003c74:	f7fe fbba 	bl	80023ec <LCD_UpdateEditNum>
		LCD_ShowEditNum(xEditNumThold, yEditNumThold,(u8*)"Time Hold", lengthNum);
 8003c78:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8003c80:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 8003c84:	4a8d      	ldr	r2, [pc, #564]	; (8003ebc <getChooseSetAndRun+0x3fc>)
 8003c86:	f7fe fb6a 	bl	800235e <LCD_ShowEditNum>
		LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 8003c8a:	4b89      	ldr	r3, [pc, #548]	; (8003eb0 <getChooseSetAndRun+0x3f0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8003c90:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003c92:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8003c94:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	4623      	mov	r3, r4
 8003c9a:	f7fe fba7 	bl	80023ec <LCD_UpdateEditNum>
		LCD_ShowButton(XsButtonRun,YsButtonRun,widthButton,heightButton,(u8*)"Save And Run",1);
 8003c9e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003ca2:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8003ca6:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8003ca8:	8fb8      	ldrh	r0, [r7, #60]	; 0x3c
 8003caa:	2401      	movs	r4, #1
 8003cac:	9401      	str	r4, [sp, #4]
 8003cae:	4c84      	ldr	r4, [pc, #528]	; (8003ec0 <getChooseSetAndRun+0x400>)
 8003cb0:	9400      	str	r4, [sp, #0]
 8003cb2:	f7fe fa1b 	bl	80020ec <LCD_ShowButton>
		LCD_ShowButton(XsButtonReturn,YsButtonReturn,widthButton,heightButton,(u8*)"RETURN",1);
 8003cb6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003cba:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8003cbe:	8c39      	ldrh	r1, [r7, #32]
 8003cc0:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8003cc2:	2401      	movs	r4, #1
 8003cc4:	9401      	str	r4, [sp, #4]
 8003cc6:	4c7f      	ldr	r4, [pc, #508]	; (8003ec4 <getChooseSetAndRun+0x404>)
 8003cc8:	9400      	str	r4, [sp, #0]
 8003cca:	f7fe fa0f 	bl	80020ec <LCD_ShowButton>

		LCD_DrawLine(20,YeBoxThold-heightBox/2-heightButtonUpDown/2 -10,320-20,YeBoxThold-heightBox/2-heightButtonUpDown/2 -10);
 8003cce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003ce0:	085b      	lsrs	r3, r3, #1
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b0a      	subs	r3, #10
 8003cea:	b299      	uxth	r1, r3
 8003cec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003cf0:	085b      	lsrs	r3, r3, #1
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003cfe:	085b      	lsrs	r3, r3, #1
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b0a      	subs	r3, #10
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d0e:	2014      	movs	r0, #20
 8003d10:	f7fd fc5a 	bl	80015c8 <LCD_DrawLine>

		LCD_ShowBtnUpDown(XsButtonUpDownCntMax,YsButtonUpDownCntMax,widthButtonUpDown,heightButtonUpDown);
 8003d14:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003d18:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003d1c:	8b79      	ldrh	r1, [r7, #26]
 8003d1e:	8bb8      	ldrh	r0, [r7, #28]
 8003d20:	f7fe fbfe 	bl	8002520 <LCD_ShowBtnUpDown>
		LCD_ShowBtnUpDown(XsButtonUpDownTimeHold,YsButtonUpDownTimeHold,widthButtonUpDown,heightButtonUpDown);
 8003d24:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003d28:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003d2c:	8a79      	ldrh	r1, [r7, #18]
 8003d2e:	8ab8      	ldrh	r0, [r7, #20]
 8003d30:	f7fe fbf6 	bl	8002520 <LCD_ShowBtnUpDown>
		LCD_DrawLine(20,YsButtonRun-10,320-20,YsButtonRun-10);
 8003d34:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003d36:	3b0a      	subs	r3, #10
 8003d38:	b299      	uxth	r1, r3
 8003d3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003d3c:	3b0a      	subs	r3, #10
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d44:	2014      	movs	r0, #20
 8003d46:	f7fd fc3f 	bl	80015c8 <LCD_DrawLine>
		LCD_SetColorPoint(BLUE);
 8003d4a:	201f      	movs	r0, #31
 8003d4c:	f7ff f860 	bl	8002e10 <LCD_SetColorPoint>
		LCD_DrawRectangle(XsButtonUpDownCntMax-1,YsButtonUpDownCntMax-1,XeButtonUpDownCntMax+1,YeButtonUpDownCntMax+1);
 8003d50:	8bbb      	ldrh	r3, [r7, #28]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b298      	uxth	r0, r3
 8003d56:	8b7b      	ldrh	r3, [r7, #26]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b299      	uxth	r1, r3
 8003d5c:	8b3b      	ldrh	r3, [r7, #24]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	8afb      	ldrh	r3, [r7, #22]
 8003d64:	3301      	adds	r3, #1
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	f7fd fcb2 	bl	80016d0 <LCD_DrawRectangle>

		flag = 1;
 8003d6c:	4b51      	ldr	r3, [pc, #324]	; (8003eb4 <getChooseSetAndRun+0x3f4>)
 8003d6e:	2201      	movs	r2, #1
 8003d70:	701a      	strb	r2, [r3, #0]
	}
	while(key == NOKEY)
 8003d72:	e003      	b.n	8003d7c <getChooseSetAndRun+0x2bc>
	{
		key = processEventButton();
 8003d74:	f7fc fe16 	bl	80009a4 <processEventButton>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	65bb      	str	r3, [r7, #88]	; 0x58
	while(key == NOKEY)
 8003d7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f8      	beq.n	8003d74 <getChooseSetAndRun+0x2b4>
	}
	switch(key)
 8003d82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d84:	2b09      	cmp	r3, #9
 8003d86:	f000 80cc 	beq.w	8003f22 <getChooseSetAndRun+0x462>
 8003d8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d8c:	2b09      	cmp	r3, #9
 8003d8e:	f300 86d9 	bgt.w	8004b44 <getChooseSetAndRun+0x1084>
 8003d92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	f000 8177 	beq.w	8004088 <getChooseSetAndRun+0x5c8>
 8003d9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	f040 86d1 	bne.w	8004b44 <getChooseSetAndRun+0x1084>
			{
			case UP:
				Row--;
 8003da2:	4b49      	ldr	r3, [pc, #292]	; (8003ec8 <getChooseSetAndRun+0x408>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	4b47      	ldr	r3, [pc, #284]	; (8003ec8 <getChooseSetAndRun+0x408>)
 8003dac:	701a      	strb	r2, [r3, #0]
				if(Row == 255)
 8003dae:	4b46      	ldr	r3, [pc, #280]	; (8003ec8 <getChooseSetAndRun+0x408>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2bff      	cmp	r3, #255	; 0xff
 8003db4:	d102      	bne.n	8003dbc <getChooseSetAndRun+0x2fc>
				{
					Row = 3;
 8003db6:	4b44      	ldr	r3, [pc, #272]	; (8003ec8 <getChooseSetAndRun+0x408>)
 8003db8:	2203      	movs	r2, #3
 8003dba:	701a      	strb	r2, [r3, #0]
				}
				if(Row == 0)
 8003dbc:	4b42      	ldr	r3, [pc, #264]	; (8003ec8 <getChooseSetAndRun+0x408>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d123      	bne.n	8003e0c <getChooseSetAndRun+0x34c>
				{
					LCD_SetColorPoint(WHITE);
 8003dc4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003dc8:	f7ff f822 	bl	8002e10 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonUpDownTimeHold-1,YsButtonUpDownTimeHold-1,XeButtonUpDownTimeHold+1,YeButtonUpDownTimeHold+1);
 8003dcc:	8abb      	ldrh	r3, [r7, #20]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b298      	uxth	r0, r3
 8003dd2:	8a7b      	ldrh	r3, [r7, #18]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b299      	uxth	r1, r3
 8003dd8:	8a3b      	ldrh	r3, [r7, #16]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	89fb      	ldrh	r3, [r7, #14]
 8003de0:	3301      	adds	r3, #1
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	f7fd fc74 	bl	80016d0 <LCD_DrawRectangle>
					LCD_SetColorPoint(BLUE);
 8003de8:	201f      	movs	r0, #31
 8003dea:	f7ff f811 	bl	8002e10 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonUpDownCntMax-1,YsButtonUpDownCntMax-1,XeButtonUpDownCntMax+1,YeButtonUpDownCntMax+1);
 8003dee:	8bbb      	ldrh	r3, [r7, #28]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b298      	uxth	r0, r3
 8003df4:	8b7b      	ldrh	r3, [r7, #26]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b299      	uxth	r1, r3
 8003dfa:	8b3b      	ldrh	r3, [r7, #24]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	8afb      	ldrh	r3, [r7, #22]
 8003e02:	3301      	adds	r3, #1
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f7fd fc63 	bl	80016d0 <LCD_DrawRectangle>
 8003e0a:	e086      	b.n	8003f1a <getChooseSetAndRun+0x45a>
				}
				else if(Row == 1)
 8003e0c:	4b2e      	ldr	r3, [pc, #184]	; (8003ec8 <getChooseSetAndRun+0x408>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d123      	bne.n	8003e5c <getChooseSetAndRun+0x39c>
				{
					LCD_SetColorPoint(WHITE);
 8003e14:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003e18:	f7fe fffa 	bl	8002e10 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonRun-1,YsButtonRun-1,XeButtonRun+1,YeButtonRun+1);
 8003e1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b298      	uxth	r0, r3
 8003e22:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b299      	uxth	r1, r3
 8003e28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e30:	3301      	adds	r3, #1
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	f7fd fc4c 	bl	80016d0 <LCD_DrawRectangle>
					LCD_SetColorPoint(BLUE);
 8003e38:	201f      	movs	r0, #31
 8003e3a:	f7fe ffe9 	bl	8002e10 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonUpDownTimeHold-1,YsButtonUpDownTimeHold-1,XeButtonUpDownTimeHold+1,YeButtonUpDownTimeHold+1);
 8003e3e:	8abb      	ldrh	r3, [r7, #20]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b298      	uxth	r0, r3
 8003e44:	8a7b      	ldrh	r3, [r7, #18]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b299      	uxth	r1, r3
 8003e4a:	8a3b      	ldrh	r3, [r7, #16]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	89fb      	ldrh	r3, [r7, #14]
 8003e52:	3301      	adds	r3, #1
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	f7fd fc3b 	bl	80016d0 <LCD_DrawRectangle>
 8003e5a:	e05e      	b.n	8003f1a <getChooseSetAndRun+0x45a>
				}else if(Row == 2)
 8003e5c:	4b1a      	ldr	r3, [pc, #104]	; (8003ec8 <getChooseSetAndRun+0x408>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d133      	bne.n	8003ecc <getChooseSetAndRun+0x40c>
				{
					LCD_SetColorPoint(WHITE);
 8003e64:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003e68:	f7fe ffd2 	bl	8002e10 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonReturn-1,YsButtonReturn-1,XeButtonReturn+1,YeButtonReturn+1);
 8003e6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b298      	uxth	r0, r3
 8003e72:	8c3b      	ldrh	r3, [r7, #32]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b299      	uxth	r1, r3
 8003e78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	8bfb      	ldrh	r3, [r7, #30]
 8003e80:	3301      	adds	r3, #1
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	f7fd fc24 	bl	80016d0 <LCD_DrawRectangle>
					LCD_SetColorPoint(BLUE);
 8003e88:	201f      	movs	r0, #31
 8003e8a:	f7fe ffc1 	bl	8002e10 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonRun-1,YsButtonRun-1,XeButtonRun+1,YeButtonRun+1);
 8003e8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b298      	uxth	r0, r3
 8003e94:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b299      	uxth	r1, r3
 8003e9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	f7fd fc13 	bl	80016d0 <LCD_DrawRectangle>
 8003eaa:	e036      	b.n	8003f1a <getChooseSetAndRun+0x45a>
 8003eac:	20000128 	.word	0x20000128
 8003eb0:	2000012c 	.word	0x2000012c
 8003eb4:	20000130 	.word	0x20000130
 8003eb8:	08006028 	.word	0x08006028
 8003ebc:	08006034 	.word	0x08006034
 8003ec0:	080060a0 	.word	0x080060a0
 8003ec4:	080060b0 	.word	0x080060b0
 8003ec8:	20000131 	.word	0x20000131

				}else if(Row == 3)
 8003ecc:	4b6d      	ldr	r3, [pc, #436]	; (8004084 <getChooseSetAndRun+0x5c4>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d122      	bne.n	8003f1a <getChooseSetAndRun+0x45a>
				{
					LCD_SetColorPoint(WHITE);
 8003ed4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003ed8:	f7fe ff9a 	bl	8002e10 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonUpDownCntMax-1,YsButtonUpDownCntMax-1,XeButtonUpDownCntMax+1,YeButtonUpDownCntMax+1);
 8003edc:	8bbb      	ldrh	r3, [r7, #28]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b298      	uxth	r0, r3
 8003ee2:	8b7b      	ldrh	r3, [r7, #26]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b299      	uxth	r1, r3
 8003ee8:	8b3b      	ldrh	r3, [r7, #24]
 8003eea:	3301      	adds	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	8afb      	ldrh	r3, [r7, #22]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	f7fd fbec 	bl	80016d0 <LCD_DrawRectangle>
					LCD_SetColorPoint(BLUE);
 8003ef8:	201f      	movs	r0, #31
 8003efa:	f7fe ff89 	bl	8002e10 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonReturn-1,YsButtonReturn-1,XeButtonReturn+1,YeButtonReturn+1);
 8003efe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b298      	uxth	r0, r3
 8003f04:	8c3b      	ldrh	r3, [r7, #32]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b299      	uxth	r1, r3
 8003f0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	8bfb      	ldrh	r3, [r7, #30]
 8003f12:	3301      	adds	r3, #1
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	f7fd fbdb 	bl	80016d0 <LCD_DrawRectangle>
				}
				key = NOKEY;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	65bb      	str	r3, [r7, #88]	; 0x58
				break;
 8003f1e:	f000 be12 	b.w	8004b46 <getChooseSetAndRun+0x1086>
			case DOWN:
				Row++;
 8003f22:	4b58      	ldr	r3, [pc, #352]	; (8004084 <getChooseSetAndRun+0x5c4>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	3301      	adds	r3, #1
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	4b56      	ldr	r3, [pc, #344]	; (8004084 <getChooseSetAndRun+0x5c4>)
 8003f2c:	701a      	strb	r2, [r3, #0]
				if(Row == 4)
 8003f2e:	4b55      	ldr	r3, [pc, #340]	; (8004084 <getChooseSetAndRun+0x5c4>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d102      	bne.n	8003f3c <getChooseSetAndRun+0x47c>
				{
					Row = 0;
 8003f36:	4b53      	ldr	r3, [pc, #332]	; (8004084 <getChooseSetAndRun+0x5c4>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	701a      	strb	r2, [r3, #0]
				}
				if(Row == 0)
 8003f3c:	4b51      	ldr	r3, [pc, #324]	; (8004084 <getChooseSetAndRun+0x5c4>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d123      	bne.n	8003f8c <getChooseSetAndRun+0x4cc>
				{
					LCD_SetColorPoint(WHITE);
 8003f44:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003f48:	f7fe ff62 	bl	8002e10 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonReturn-1,YsButtonReturn-1,XeButtonReturn+1,YeButtonReturn+1);
 8003f4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b298      	uxth	r0, r3
 8003f52:	8c3b      	ldrh	r3, [r7, #32]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b299      	uxth	r1, r3
 8003f58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	8bfb      	ldrh	r3, [r7, #30]
 8003f60:	3301      	adds	r3, #1
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	f7fd fbb4 	bl	80016d0 <LCD_DrawRectangle>
					LCD_SetColorPoint(BLUE);
 8003f68:	201f      	movs	r0, #31
 8003f6a:	f7fe ff51 	bl	8002e10 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonUpDownCntMax-1,YsButtonUpDownCntMax-1,XeButtonUpDownCntMax+1,YeButtonUpDownCntMax+1);
 8003f6e:	8bbb      	ldrh	r3, [r7, #28]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b298      	uxth	r0, r3
 8003f74:	8b7b      	ldrh	r3, [r7, #26]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b299      	uxth	r1, r3
 8003f7a:	8b3b      	ldrh	r3, [r7, #24]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	8afb      	ldrh	r3, [r7, #22]
 8003f82:	3301      	adds	r3, #1
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	f7fd fba3 	bl	80016d0 <LCD_DrawRectangle>
 8003f8a:	e076      	b.n	800407a <getChooseSetAndRun+0x5ba>
				}
				else if(Row == 1)
 8003f8c:	4b3d      	ldr	r3, [pc, #244]	; (8004084 <getChooseSetAndRun+0x5c4>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d123      	bne.n	8003fdc <getChooseSetAndRun+0x51c>
				{
					LCD_SetColorPoint(WHITE);
 8003f94:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003f98:	f7fe ff3a 	bl	8002e10 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonUpDownCntMax-1,YsButtonUpDownCntMax-1,XeButtonUpDownCntMax+1,YeButtonUpDownCntMax+1);
 8003f9c:	8bbb      	ldrh	r3, [r7, #28]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b298      	uxth	r0, r3
 8003fa2:	8b7b      	ldrh	r3, [r7, #26]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b299      	uxth	r1, r3
 8003fa8:	8b3b      	ldrh	r3, [r7, #24]
 8003faa:	3301      	adds	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	8afb      	ldrh	r3, [r7, #22]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	f7fd fb8c 	bl	80016d0 <LCD_DrawRectangle>
					LCD_SetColorPoint(BLUE);
 8003fb8:	201f      	movs	r0, #31
 8003fba:	f7fe ff29 	bl	8002e10 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonUpDownTimeHold-1,YsButtonUpDownTimeHold-1,XeButtonUpDownTimeHold+1,YeButtonUpDownTimeHold+1);
 8003fbe:	8abb      	ldrh	r3, [r7, #20]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b298      	uxth	r0, r3
 8003fc4:	8a7b      	ldrh	r3, [r7, #18]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b299      	uxth	r1, r3
 8003fca:	8a3b      	ldrh	r3, [r7, #16]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	89fb      	ldrh	r3, [r7, #14]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	f7fd fb7b 	bl	80016d0 <LCD_DrawRectangle>
 8003fda:	e04e      	b.n	800407a <getChooseSetAndRun+0x5ba>
				}else if(Row == 2)
 8003fdc:	4b29      	ldr	r3, [pc, #164]	; (8004084 <getChooseSetAndRun+0x5c4>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d123      	bne.n	800402c <getChooseSetAndRun+0x56c>
				{
					LCD_SetColorPoint(WHITE);
 8003fe4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003fe8:	f7fe ff12 	bl	8002e10 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonUpDownTimeHold-1,YsButtonUpDownTimeHold-1,XeButtonUpDownTimeHold+1,YeButtonUpDownTimeHold+1);
 8003fec:	8abb      	ldrh	r3, [r7, #20]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b298      	uxth	r0, r3
 8003ff2:	8a7b      	ldrh	r3, [r7, #18]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b299      	uxth	r1, r3
 8003ff8:	8a3b      	ldrh	r3, [r7, #16]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	89fb      	ldrh	r3, [r7, #14]
 8004000:	3301      	adds	r3, #1
 8004002:	b29b      	uxth	r3, r3
 8004004:	f7fd fb64 	bl	80016d0 <LCD_DrawRectangle>
					LCD_SetColorPoint(BLUE);
 8004008:	201f      	movs	r0, #31
 800400a:	f7fe ff01 	bl	8002e10 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonRun-1,YsButtonRun-1,XeButtonRun+1,YeButtonRun+1);
 800400e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004010:	3b01      	subs	r3, #1
 8004012:	b298      	uxth	r0, r3
 8004014:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004016:	3b01      	subs	r3, #1
 8004018:	b299      	uxth	r1, r3
 800401a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800401c:	3301      	adds	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004022:	3301      	adds	r3, #1
 8004024:	b29b      	uxth	r3, r3
 8004026:	f7fd fb53 	bl	80016d0 <LCD_DrawRectangle>
 800402a:	e026      	b.n	800407a <getChooseSetAndRun+0x5ba>

				}else if(Row == 3)
 800402c:	4b15      	ldr	r3, [pc, #84]	; (8004084 <getChooseSetAndRun+0x5c4>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b03      	cmp	r3, #3
 8004032:	d122      	bne.n	800407a <getChooseSetAndRun+0x5ba>
				{
					LCD_SetColorPoint(WHITE);
 8004034:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004038:	f7fe feea 	bl	8002e10 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonRun-1,YsButtonRun-1,XeButtonRun+1,YeButtonRun+1);
 800403c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800403e:	3b01      	subs	r3, #1
 8004040:	b298      	uxth	r0, r3
 8004042:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004044:	3b01      	subs	r3, #1
 8004046:	b299      	uxth	r1, r3
 8004048:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800404a:	3301      	adds	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004050:	3301      	adds	r3, #1
 8004052:	b29b      	uxth	r3, r3
 8004054:	f7fd fb3c 	bl	80016d0 <LCD_DrawRectangle>
					LCD_SetColorPoint(BLUE);
 8004058:	201f      	movs	r0, #31
 800405a:	f7fe fed9 	bl	8002e10 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonReturn-1,YsButtonReturn-1,XeButtonReturn+1,YeButtonReturn+1);
 800405e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004060:	3b01      	subs	r3, #1
 8004062:	b298      	uxth	r0, r3
 8004064:	8c3b      	ldrh	r3, [r7, #32]
 8004066:	3b01      	subs	r3, #1
 8004068:	b299      	uxth	r1, r3
 800406a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800406c:	3301      	adds	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	8bfb      	ldrh	r3, [r7, #30]
 8004072:	3301      	adds	r3, #1
 8004074:	b29b      	uxth	r3, r3
 8004076:	f7fd fb2b 	bl	80016d0 <LCD_DrawRectangle>
				}
				key = NOKEY;
 800407a:	2300      	movs	r3, #0
 800407c:	65bb      	str	r3, [r7, #88]	; 0x58
				break;
 800407e:	f000 bd62 	b.w	8004b46 <getChooseSetAndRun+0x1086>
 8004082:	bf00      	nop
 8004084:	20000131 	.word	0x20000131
			case SELECT:

				if(Row == 0)
 8004088:	4ba5      	ldr	r3, [pc, #660]	; (8004320 <getChooseSetAndRun+0x860>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	f040 8293 	bne.w	80045b8 <getChooseSetAndRun+0xaf8>
				{
					LCD_SetColorPoint(GREEN);
 8004092:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8004096:	f7fe febb 	bl	8002e10 <LCD_SetColorPoint>
					Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/4,\
 800409a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800409e:	089b      	lsrs	r3, r3, #2
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	8bbb      	ldrh	r3, [r7, #28]
 80040a4:	4413      	add	r3, r2
 80040a6:	b298      	uxth	r0, r3
							YsButtonUpDownCntMax + heightButtonUpDown*2/3, \
 80040a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	4a9d      	ldr	r2, [pc, #628]	; (8004324 <getChooseSetAndRun+0x864>)
 80040b0:	fb82 1203 	smull	r1, r2, r2, r3
 80040b4:	17db      	asrs	r3, r3, #31
 80040b6:	1ad3      	subs	r3, r2, r3
					Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/4,\
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	8b7b      	ldrh	r3, [r7, #26]
 80040bc:	4413      	add	r3, r2
 80040be:	b29c      	uxth	r4, r3
							XsButtonUpDownCntMax + widthButtonUpDown/2+widthButtonUpDown/4, \
 80040c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80040c4:	085b      	lsrs	r3, r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	8bbb      	ldrh	r3, [r7, #28]
 80040ca:	4413      	add	r3, r2
 80040cc:	b29a      	uxth	r2, r3
					Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/4,\
 80040ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80040d2:	089b      	lsrs	r3, r3, #2
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	4413      	add	r3, r2
 80040d8:	b29d      	uxth	r5, r3
							YsButtonUpDownCntMax + heightButtonUpDown*2/3, \
 80040da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	4a90      	ldr	r2, [pc, #576]	; (8004324 <getChooseSetAndRun+0x864>)
 80040e2:	fb82 1203 	smull	r1, r2, r2, r3
 80040e6:	17db      	asrs	r3, r3, #31
 80040e8:	1ad3      	subs	r3, r2, r3
					Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/4,\
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	8b7b      	ldrh	r3, [r7, #26]
 80040ee:	4413      	add	r3, r2
 80040f0:	b29e      	uxth	r6, r3
 80040f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80040f6:	085b      	lsrs	r3, r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	8bbb      	ldrh	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	b29b      	uxth	r3, r3
							XsButtonUpDownCntMax + widthButtonUpDown/2, \
							YsButtonUpDownCntMax + heightButtonUpDown-3);
 8004100:	8b79      	ldrh	r1, [r7, #26]
 8004102:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004106:	440a      	add	r2, r1
 8004108:	b292      	uxth	r2, r2
					Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/4,\
 800410a:	3a03      	subs	r2, #3
 800410c:	b292      	uxth	r2, r2
 800410e:	9201      	str	r2, [sp, #4]
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	4633      	mov	r3, r6
 8004114:	462a      	mov	r2, r5
 8004116:	4621      	mov	r1, r4
 8004118:	f7fd fc14 	bl	8001944 <Fill_Triangel>
					Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/2,\
 800411c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004120:	085b      	lsrs	r3, r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	8bbb      	ldrh	r3, [r7, #28]
 8004126:	4413      	add	r3, r2
 8004128:	b298      	uxth	r0, r3
 800412a:	8b7b      	ldrh	r3, [r7, #26]
 800412c:	3303      	adds	r3, #3
 800412e:	b29c      	uxth	r4, r3
							YsButtonUpDownCntMax + 3,\
							XsButtonUpDownCntMax + widthButtonUpDown/2+widthButtonUpDown/4, \
 8004130:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004134:	085b      	lsrs	r3, r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	8bbb      	ldrh	r3, [r7, #28]
 800413a:	4413      	add	r3, r2
 800413c:	b29a      	uxth	r2, r3
					Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/2,\
 800413e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004142:	089b      	lsrs	r3, r3, #2
 8004144:	b29b      	uxth	r3, r3
 8004146:	4413      	add	r3, r2
 8004148:	b29d      	uxth	r5, r3
 800414a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800414e:	4a76      	ldr	r2, [pc, #472]	; (8004328 <getChooseSetAndRun+0x868>)
 8004150:	fba2 2303 	umull	r2, r3, r2, r3
 8004154:	085b      	lsrs	r3, r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	8b7b      	ldrh	r3, [r7, #26]
 800415a:	4413      	add	r3, r2
 800415c:	b29e      	uxth	r6, r3
 800415e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004162:	089b      	lsrs	r3, r3, #2
 8004164:	b29a      	uxth	r2, r3
 8004166:	8bbb      	ldrh	r3, [r7, #28]
 8004168:	4413      	add	r3, r2
 800416a:	b29b      	uxth	r3, r3
 800416c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004170:	496d      	ldr	r1, [pc, #436]	; (8004328 <getChooseSetAndRun+0x868>)
 8004172:	fba1 1202 	umull	r1, r2, r1, r2
 8004176:	0852      	lsrs	r2, r2, #1
 8004178:	b291      	uxth	r1, r2
 800417a:	8b7a      	ldrh	r2, [r7, #26]
 800417c:	440a      	add	r2, r1
 800417e:	b292      	uxth	r2, r2
 8004180:	9201      	str	r2, [sp, #4]
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	4633      	mov	r3, r6
 8004186:	462a      	mov	r2, r5
 8004188:	4621      	mov	r1, r4
 800418a:	f7fd fbdb 	bl	8001944 <Fill_Triangel>
							YsButtonUpDownCntMax+heightButtonUpDown/3, \
							XsButtonUpDownCntMax + widthButtonUpDown/4, \
							YsButtonUpDownCntMax+heightButtonUpDown/3);

					do{
						key = processEventButton();
 800418e:	f7fc fc09 	bl	80009a4 <processEventButton>
 8004192:	4603      	mov	r3, r0
 8004194:	65bb      	str	r3, [r7, #88]	; 0x58
 8004196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004198:	3b01      	subs	r3, #1
 800419a:	2b0d      	cmp	r3, #13
 800419c:	f200 81fb 	bhi.w	8004596 <getChooseSetAndRun+0xad6>
 80041a0:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <getChooseSetAndRun+0x6e8>)
 80041a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a6:	bf00      	nop
 80041a8:	08004473 	.word	0x08004473
 80041ac:	08004577 	.word	0x08004577
 80041b0:	080041e1 	.word	0x080041e1
 80041b4:	08004215 	.word	0x08004215
 80041b8:	08004249 	.word	0x08004249
 80041bc:	0800427d 	.word	0x0800427d
 80041c0:	080042b3 	.word	0x080042b3
 80041c4:	080042eb 	.word	0x080042eb
 80041c8:	08004335 	.word	0x08004335
 80041cc:	08004369 	.word	0x08004369
 80041d0:	0800439d 	.word	0x0800439d
 80041d4:	080043d1 	.word	0x080043d1
 80041d8:	08004407 	.word	0x08004407
 80041dc:	0800443f 	.word	0x0800443f
						switch(key)
						{
						case UP:
							dwCountMaxTemp ++;
 80041e0:	4b52      	ldr	r3, [pc, #328]	; (800432c <getChooseSetAndRun+0x86c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3301      	adds	r3, #1
 80041e6:	4a51      	ldr	r2, [pc, #324]	; (800432c <getChooseSetAndRun+0x86c>)
 80041e8:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 80041ea:	4b50      	ldr	r3, [pc, #320]	; (800432c <getChooseSetAndRun+0x86c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a50      	ldr	r2, [pc, #320]	; (8004330 <getChooseSetAndRun+0x870>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d902      	bls.n	80041fa <getChooseSetAndRun+0x73a>
							{
								dwCountMaxTemp = 1;
 80041f4:	4b4d      	ldr	r3, [pc, #308]	; (800432c <getChooseSetAndRun+0x86c>)
 80041f6:	2201      	movs	r2, #1
 80041f8:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 80041fa:	4b4c      	ldr	r3, [pc, #304]	; (800432c <getChooseSetAndRun+0x86c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8004200:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004202:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8004204:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	4623      	mov	r3, r4
 800420a:	f7fe f8ef 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 800420e:	2300      	movs	r3, #0
 8004210:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004212:	e1c0      	b.n	8004596 <getChooseSetAndRun+0xad6>
						case UP_DOUBLE:
							dwCountMaxTemp +=10;
 8004214:	4b45      	ldr	r3, [pc, #276]	; (800432c <getChooseSetAndRun+0x86c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	330a      	adds	r3, #10
 800421a:	4a44      	ldr	r2, [pc, #272]	; (800432c <getChooseSetAndRun+0x86c>)
 800421c:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 800421e:	4b43      	ldr	r3, [pc, #268]	; (800432c <getChooseSetAndRun+0x86c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a43      	ldr	r2, [pc, #268]	; (8004330 <getChooseSetAndRun+0x870>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d902      	bls.n	800422e <getChooseSetAndRun+0x76e>
							{
								dwCountMaxTemp = 1;
 8004228:	4b40      	ldr	r3, [pc, #256]	; (800432c <getChooseSetAndRun+0x86c>)
 800422a:	2201      	movs	r2, #1
 800422c:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 800422e:	4b3f      	ldr	r3, [pc, #252]	; (800432c <getChooseSetAndRun+0x86c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8004234:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004236:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8004238:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	4623      	mov	r3, r4
 800423e:	f7fe f8d5 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 8004242:	2300      	movs	r3, #0
 8004244:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004246:	e1a6      	b.n	8004596 <getChooseSetAndRun+0xad6>
						case UP_TRIPLE:
							dwCountMaxTemp +=100;
 8004248:	4b38      	ldr	r3, [pc, #224]	; (800432c <getChooseSetAndRun+0x86c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3364      	adds	r3, #100	; 0x64
 800424e:	4a37      	ldr	r2, [pc, #220]	; (800432c <getChooseSetAndRun+0x86c>)
 8004250:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 8004252:	4b36      	ldr	r3, [pc, #216]	; (800432c <getChooseSetAndRun+0x86c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a36      	ldr	r2, [pc, #216]	; (8004330 <getChooseSetAndRun+0x870>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d902      	bls.n	8004262 <getChooseSetAndRun+0x7a2>
							{
								dwCountMaxTemp = 1;
 800425c:	4b33      	ldr	r3, [pc, #204]	; (800432c <getChooseSetAndRun+0x86c>)
 800425e:	2201      	movs	r2, #1
 8004260:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 8004262:	4b32      	ldr	r3, [pc, #200]	; (800432c <getChooseSetAndRun+0x86c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8004268:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800426a:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800426c:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	4623      	mov	r3, r4
 8004272:	f7fe f8bb 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 8004276:	2300      	movs	r3, #0
 8004278:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 800427a:	e18c      	b.n	8004596 <getChooseSetAndRun+0xad6>
						case UP_QUADRUPLE:
							dwCountMaxTemp +=1000;
 800427c:	4b2b      	ldr	r3, [pc, #172]	; (800432c <getChooseSetAndRun+0x86c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004284:	4a29      	ldr	r2, [pc, #164]	; (800432c <getChooseSetAndRun+0x86c>)
 8004286:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 8004288:	4b28      	ldr	r3, [pc, #160]	; (800432c <getChooseSetAndRun+0x86c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a28      	ldr	r2, [pc, #160]	; (8004330 <getChooseSetAndRun+0x870>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d902      	bls.n	8004298 <getChooseSetAndRun+0x7d8>
							{
								dwCountMaxTemp = 1;
 8004292:	4b26      	ldr	r3, [pc, #152]	; (800432c <getChooseSetAndRun+0x86c>)
 8004294:	2201      	movs	r2, #1
 8004296:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 8004298:	4b24      	ldr	r3, [pc, #144]	; (800432c <getChooseSetAndRun+0x86c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 800429e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80042a0:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 80042a2:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	4623      	mov	r3, r4
 80042a8:	f7fe f8a0 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 80042ac:	2300      	movs	r3, #0
 80042ae:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 80042b0:	e171      	b.n	8004596 <getChooseSetAndRun+0xad6>
						case UP_QUINTUPLE:
							dwCountMaxTemp +=10000;
 80042b2:	4b1e      	ldr	r3, [pc, #120]	; (800432c <getChooseSetAndRun+0x86c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80042ba:	3310      	adds	r3, #16
 80042bc:	4a1b      	ldr	r2, [pc, #108]	; (800432c <getChooseSetAndRun+0x86c>)
 80042be:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 80042c0:	4b1a      	ldr	r3, [pc, #104]	; (800432c <getChooseSetAndRun+0x86c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1a      	ldr	r2, [pc, #104]	; (8004330 <getChooseSetAndRun+0x870>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d902      	bls.n	80042d0 <getChooseSetAndRun+0x810>
							{
								dwCountMaxTemp = 1;
 80042ca:	4b18      	ldr	r3, [pc, #96]	; (800432c <getChooseSetAndRun+0x86c>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 80042d0:	4b16      	ldr	r3, [pc, #88]	; (800432c <getChooseSetAndRun+0x86c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 80042d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80042d8:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 80042da:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	4623      	mov	r3, r4
 80042e0:	f7fe f884 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 80042e4:	2300      	movs	r3, #0
 80042e6:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 80042e8:	e155      	b.n	8004596 <getChooseSetAndRun+0xad6>
						case UP_HOLD:
							dwCountMaxTemp ++;
 80042ea:	4b10      	ldr	r3, [pc, #64]	; (800432c <getChooseSetAndRun+0x86c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3301      	adds	r3, #1
 80042f0:	4a0e      	ldr	r2, [pc, #56]	; (800432c <getChooseSetAndRun+0x86c>)
 80042f2:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 80042f4:	4b0d      	ldr	r3, [pc, #52]	; (800432c <getChooseSetAndRun+0x86c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a0d      	ldr	r2, [pc, #52]	; (8004330 <getChooseSetAndRun+0x870>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d902      	bls.n	8004304 <getChooseSetAndRun+0x844>
							{
								dwCountMaxTemp = 1;
 80042fe:	4b0b      	ldr	r3, [pc, #44]	; (800432c <getChooseSetAndRun+0x86c>)
 8004300:	2201      	movs	r2, #1
 8004302:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 8004304:	4b09      	ldr	r3, [pc, #36]	; (800432c <getChooseSetAndRun+0x86c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 800430a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800430c:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800430e:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	4623      	mov	r3, r4
 8004314:	f7fe f86a 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 8004318:	2300      	movs	r3, #0
 800431a:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 800431c:	e13b      	b.n	8004596 <getChooseSetAndRun+0xad6>
 800431e:	bf00      	nop
 8004320:	20000131 	.word	0x20000131
 8004324:	55555556 	.word	0x55555556
 8004328:	aaaaaaab 	.word	0xaaaaaaab
 800432c:	20000128 	.word	0x20000128
 8004330:	0001869f 	.word	0x0001869f
						case DOWN:
							dwCountMaxTemp --;
 8004334:	4b9b      	ldr	r3, [pc, #620]	; (80045a4 <getChooseSetAndRun+0xae4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3b01      	subs	r3, #1
 800433a:	4a9a      	ldr	r2, [pc, #616]	; (80045a4 <getChooseSetAndRun+0xae4>)
 800433c:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 800433e:	4b99      	ldr	r3, [pc, #612]	; (80045a4 <getChooseSetAndRun+0xae4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a99      	ldr	r2, [pc, #612]	; (80045a8 <getChooseSetAndRun+0xae8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d902      	bls.n	800434e <getChooseSetAndRun+0x88e>
							{
								dwCountMaxTemp = 99999;
 8004348:	4b96      	ldr	r3, [pc, #600]	; (80045a4 <getChooseSetAndRun+0xae4>)
 800434a:	4a97      	ldr	r2, [pc, #604]	; (80045a8 <getChooseSetAndRun+0xae8>)
 800434c:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 800434e:	4b95      	ldr	r3, [pc, #596]	; (80045a4 <getChooseSetAndRun+0xae4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8004354:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004356:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8004358:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	4623      	mov	r3, r4
 800435e:	f7fe f845 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 8004362:	2300      	movs	r3, #0
 8004364:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004366:	e116      	b.n	8004596 <getChooseSetAndRun+0xad6>
						case DOWN_DOUBLE:
							dwCountMaxTemp -=10;
 8004368:	4b8e      	ldr	r3, [pc, #568]	; (80045a4 <getChooseSetAndRun+0xae4>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3b0a      	subs	r3, #10
 800436e:	4a8d      	ldr	r2, [pc, #564]	; (80045a4 <getChooseSetAndRun+0xae4>)
 8004370:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 8004372:	4b8c      	ldr	r3, [pc, #560]	; (80045a4 <getChooseSetAndRun+0xae4>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a8c      	ldr	r2, [pc, #560]	; (80045a8 <getChooseSetAndRun+0xae8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d902      	bls.n	8004382 <getChooseSetAndRun+0x8c2>
							{
								dwCountMaxTemp = 99999;
 800437c:	4b89      	ldr	r3, [pc, #548]	; (80045a4 <getChooseSetAndRun+0xae4>)
 800437e:	4a8a      	ldr	r2, [pc, #552]	; (80045a8 <getChooseSetAndRun+0xae8>)
 8004380:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 8004382:	4b88      	ldr	r3, [pc, #544]	; (80045a4 <getChooseSetAndRun+0xae4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8004388:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800438a:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800438c:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	4623      	mov	r3, r4
 8004392:	f7fe f82b 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 8004396:	2300      	movs	r3, #0
 8004398:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 800439a:	e0fc      	b.n	8004596 <getChooseSetAndRun+0xad6>
						case DOWN_TRIPLE:
							dwCountMaxTemp -=100;
 800439c:	4b81      	ldr	r3, [pc, #516]	; (80045a4 <getChooseSetAndRun+0xae4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3b64      	subs	r3, #100	; 0x64
 80043a2:	4a80      	ldr	r2, [pc, #512]	; (80045a4 <getChooseSetAndRun+0xae4>)
 80043a4:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 80043a6:	4b7f      	ldr	r3, [pc, #508]	; (80045a4 <getChooseSetAndRun+0xae4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a7f      	ldr	r2, [pc, #508]	; (80045a8 <getChooseSetAndRun+0xae8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d902      	bls.n	80043b6 <getChooseSetAndRun+0x8f6>
							{
								dwCountMaxTemp = 99999;
 80043b0:	4b7c      	ldr	r3, [pc, #496]	; (80045a4 <getChooseSetAndRun+0xae4>)
 80043b2:	4a7d      	ldr	r2, [pc, #500]	; (80045a8 <getChooseSetAndRun+0xae8>)
 80043b4:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 80043b6:	4b7b      	ldr	r3, [pc, #492]	; (80045a4 <getChooseSetAndRun+0xae4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 80043bc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80043be:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 80043c0:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	4623      	mov	r3, r4
 80043c6:	f7fe f811 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 80043ca:	2300      	movs	r3, #0
 80043cc:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 80043ce:	e0e2      	b.n	8004596 <getChooseSetAndRun+0xad6>
						case DOWN_QUADRUPLE:
							dwCountMaxTemp -=1000;
 80043d0:	4b74      	ldr	r3, [pc, #464]	; (80045a4 <getChooseSetAndRun+0xae4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80043d8:	4a72      	ldr	r2, [pc, #456]	; (80045a4 <getChooseSetAndRun+0xae4>)
 80043da:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 80043dc:	4b71      	ldr	r3, [pc, #452]	; (80045a4 <getChooseSetAndRun+0xae4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a71      	ldr	r2, [pc, #452]	; (80045a8 <getChooseSetAndRun+0xae8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d902      	bls.n	80043ec <getChooseSetAndRun+0x92c>
							{
								dwCountMaxTemp = 99999;
 80043e6:	4b6f      	ldr	r3, [pc, #444]	; (80045a4 <getChooseSetAndRun+0xae4>)
 80043e8:	4a6f      	ldr	r2, [pc, #444]	; (80045a8 <getChooseSetAndRun+0xae8>)
 80043ea:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 80043ec:	4b6d      	ldr	r3, [pc, #436]	; (80045a4 <getChooseSetAndRun+0xae4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 80043f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80043f4:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 80043f6:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	4623      	mov	r3, r4
 80043fc:	f7fd fff6 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 8004400:	2300      	movs	r3, #0
 8004402:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004404:	e0c7      	b.n	8004596 <getChooseSetAndRun+0xad6>
						case DOWN_QUINTUPLE:
							dwCountMaxTemp -=10000;
 8004406:	4b67      	ldr	r3, [pc, #412]	; (80045a4 <getChooseSetAndRun+0xae4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800440e:	3b10      	subs	r3, #16
 8004410:	4a64      	ldr	r2, [pc, #400]	; (80045a4 <getChooseSetAndRun+0xae4>)
 8004412:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 8004414:	4b63      	ldr	r3, [pc, #396]	; (80045a4 <getChooseSetAndRun+0xae4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a63      	ldr	r2, [pc, #396]	; (80045a8 <getChooseSetAndRun+0xae8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d902      	bls.n	8004424 <getChooseSetAndRun+0x964>
							{
								dwCountMaxTemp = 99999;
 800441e:	4b61      	ldr	r3, [pc, #388]	; (80045a4 <getChooseSetAndRun+0xae4>)
 8004420:	4a61      	ldr	r2, [pc, #388]	; (80045a8 <getChooseSetAndRun+0xae8>)
 8004422:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 8004424:	4b5f      	ldr	r3, [pc, #380]	; (80045a4 <getChooseSetAndRun+0xae4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 800442a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800442c:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800442e:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	4623      	mov	r3, r4
 8004434:	f7fd ffda 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 8004438:	2300      	movs	r3, #0
 800443a:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 800443c:	e0ab      	b.n	8004596 <getChooseSetAndRun+0xad6>
						case DOWN_HOLD:
							dwCountMaxTemp --;
 800443e:	4b59      	ldr	r3, [pc, #356]	; (80045a4 <getChooseSetAndRun+0xae4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3b01      	subs	r3, #1
 8004444:	4a57      	ldr	r2, [pc, #348]	; (80045a4 <getChooseSetAndRun+0xae4>)
 8004446:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 8004448:	4b56      	ldr	r3, [pc, #344]	; (80045a4 <getChooseSetAndRun+0xae4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a56      	ldr	r2, [pc, #344]	; (80045a8 <getChooseSetAndRun+0xae8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d902      	bls.n	8004458 <getChooseSetAndRun+0x998>
							{
								dwCountMaxTemp = 99999;
 8004452:	4b54      	ldr	r3, [pc, #336]	; (80045a4 <getChooseSetAndRun+0xae4>)
 8004454:	4a54      	ldr	r2, [pc, #336]	; (80045a8 <getChooseSetAndRun+0xae8>)
 8004456:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 8004458:	4b52      	ldr	r3, [pc, #328]	; (80045a4 <getChooseSetAndRun+0xae4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 800445e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004460:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8004462:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	4623      	mov	r3, r4
 8004468:	f7fd ffc0 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 800446c:	2300      	movs	r3, #0
 800446e:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004470:	e091      	b.n	8004596 <getChooseSetAndRun+0xad6>
						case SELECT:
							LCD_SetColorPoint(BLACK);
 8004472:	2000      	movs	r0, #0
 8004474:	f7fe fccc 	bl	8002e10 <LCD_SetColorPoint>
							Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/4,\
 8004478:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800447c:	089b      	lsrs	r3, r3, #2
 800447e:	b29a      	uxth	r2, r3
 8004480:	8bbb      	ldrh	r3, [r7, #28]
 8004482:	4413      	add	r3, r2
 8004484:	b298      	uxth	r0, r3
									YsButtonUpDownCntMax + heightButtonUpDown*2/3, \
 8004486:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	4a47      	ldr	r2, [pc, #284]	; (80045ac <getChooseSetAndRun+0xaec>)
 800448e:	fb82 1203 	smull	r1, r2, r2, r3
 8004492:	17db      	asrs	r3, r3, #31
 8004494:	1ad3      	subs	r3, r2, r3
							Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/4,\
 8004496:	b29a      	uxth	r2, r3
 8004498:	8b7b      	ldrh	r3, [r7, #26]
 800449a:	4413      	add	r3, r2
 800449c:	b29c      	uxth	r4, r3
									XsButtonUpDownCntMax + widthButtonUpDown/2+widthButtonUpDown/4, \
 800449e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80044a2:	085b      	lsrs	r3, r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	8bbb      	ldrh	r3, [r7, #28]
 80044a8:	4413      	add	r3, r2
 80044aa:	b29a      	uxth	r2, r3
							Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/4,\
 80044ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80044b0:	089b      	lsrs	r3, r3, #2
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	4413      	add	r3, r2
 80044b6:	b29d      	uxth	r5, r3
									YsButtonUpDownCntMax + heightButtonUpDown*2/3, \
 80044b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	4a3b      	ldr	r2, [pc, #236]	; (80045ac <getChooseSetAndRun+0xaec>)
 80044c0:	fb82 1203 	smull	r1, r2, r2, r3
 80044c4:	17db      	asrs	r3, r3, #31
 80044c6:	1ad3      	subs	r3, r2, r3
							Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/4,\
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	8b7b      	ldrh	r3, [r7, #26]
 80044cc:	4413      	add	r3, r2
 80044ce:	b29e      	uxth	r6, r3
 80044d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80044d4:	085b      	lsrs	r3, r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	8bbb      	ldrh	r3, [r7, #28]
 80044da:	4413      	add	r3, r2
 80044dc:	b29b      	uxth	r3, r3
									XsButtonUpDownCntMax + widthButtonUpDown/2, \
									YsButtonUpDownCntMax + heightButtonUpDown-3);
 80044de:	8b79      	ldrh	r1, [r7, #26]
 80044e0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80044e4:	440a      	add	r2, r1
 80044e6:	b292      	uxth	r2, r2
							Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/4,\
 80044e8:	3a03      	subs	r2, #3
 80044ea:	b292      	uxth	r2, r2
 80044ec:	9201      	str	r2, [sp, #4]
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	4633      	mov	r3, r6
 80044f2:	462a      	mov	r2, r5
 80044f4:	4621      	mov	r1, r4
 80044f6:	f7fd fa25 	bl	8001944 <Fill_Triangel>
							Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/2,\
 80044fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80044fe:	085b      	lsrs	r3, r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	8bbb      	ldrh	r3, [r7, #28]
 8004504:	4413      	add	r3, r2
 8004506:	b298      	uxth	r0, r3
 8004508:	8b7b      	ldrh	r3, [r7, #26]
 800450a:	3303      	adds	r3, #3
 800450c:	b29c      	uxth	r4, r3
									YsButtonUpDownCntMax + 3,\
									XsButtonUpDownCntMax + widthButtonUpDown/2+widthButtonUpDown/4, \
 800450e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004512:	085b      	lsrs	r3, r3, #1
 8004514:	b29a      	uxth	r2, r3
 8004516:	8bbb      	ldrh	r3, [r7, #28]
 8004518:	4413      	add	r3, r2
 800451a:	b29a      	uxth	r2, r3
							Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/2,\
 800451c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004520:	089b      	lsrs	r3, r3, #2
 8004522:	b29b      	uxth	r3, r3
 8004524:	4413      	add	r3, r2
 8004526:	b29d      	uxth	r5, r3
 8004528:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800452c:	4a20      	ldr	r2, [pc, #128]	; (80045b0 <getChooseSetAndRun+0xaf0>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	085b      	lsrs	r3, r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	8b7b      	ldrh	r3, [r7, #26]
 8004538:	4413      	add	r3, r2
 800453a:	b29e      	uxth	r6, r3
 800453c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004540:	089b      	lsrs	r3, r3, #2
 8004542:	b29a      	uxth	r2, r3
 8004544:	8bbb      	ldrh	r3, [r7, #28]
 8004546:	4413      	add	r3, r2
 8004548:	b29b      	uxth	r3, r3
 800454a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800454e:	4918      	ldr	r1, [pc, #96]	; (80045b0 <getChooseSetAndRun+0xaf0>)
 8004550:	fba1 1202 	umull	r1, r2, r1, r2
 8004554:	0852      	lsrs	r2, r2, #1
 8004556:	b291      	uxth	r1, r2
 8004558:	8b7a      	ldrh	r2, [r7, #26]
 800455a:	440a      	add	r2, r1
 800455c:	b292      	uxth	r2, r2
 800455e:	9201      	str	r2, [sp, #4]
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	4633      	mov	r3, r6
 8004564:	462a      	mov	r2, r5
 8004566:	4621      	mov	r1, r4
 8004568:	f7fd f9ec 	bl	8001944 <Fill_Triangel>
									YsButtonUpDownCntMax+heightButtonUpDown/3, \
									XsButtonUpDownCntMax + widthButtonUpDown/4, \
									YsButtonUpDownCntMax+heightButtonUpDown/3);
							pData[1] = dwCountMaxTemp;
 800456c:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <getChooseSetAndRun+0xae4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a10      	ldr	r2, [pc, #64]	; (80045b4 <getChooseSetAndRun+0xaf4>)
 8004572:	6053      	str	r3, [r2, #4]

							break;
 8004574:	e00f      	b.n	8004596 <getChooseSetAndRun+0xad6>
						case SELECT_DOUBLE:
							dwCountMaxTemp = 0;
 8004576:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <getChooseSetAndRun+0xae4>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 800457c:	4b09      	ldr	r3, [pc, #36]	; (80045a4 <getChooseSetAndRun+0xae4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8004582:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004584:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8004586:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	4623      	mov	r3, r4
 800458c:	f7fd ff2e 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 8004590:	2300      	movs	r3, #0
 8004592:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004594:	bf00      	nop
						}
					}while(key != SELECT);
 8004596:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004598:	2b01      	cmp	r3, #1
 800459a:	f47f adf8 	bne.w	800418e <getChooseSetAndRun+0x6ce>

					key = NOKEY;
 800459e:	2300      	movs	r3, #0
 80045a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80045a2:	e2cc      	b.n	8004b3e <getChooseSetAndRun+0x107e>
 80045a4:	20000128 	.word	0x20000128
 80045a8:	0001869f 	.word	0x0001869f
 80045ac:	55555556 	.word	0x55555556
 80045b0:	aaaaaaab 	.word	0xaaaaaaab
 80045b4:	20000110 	.word	0x20000110

				}else if(Row == 1)
 80045b8:	4ba5      	ldr	r3, [pc, #660]	; (8004850 <getChooseSetAndRun+0xd90>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	f040 8293 	bne.w	8004ae8 <getChooseSetAndRun+0x1028>
				{
					LCD_SetColorPoint(GREEN);
 80045c2:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80045c6:	f7fe fc23 	bl	8002e10 <LCD_SetColorPoint>
					Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/2,\
 80045ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80045ce:	085b      	lsrs	r3, r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	8abb      	ldrh	r3, [r7, #20]
 80045d4:	4413      	add	r3, r2
 80045d6:	b298      	uxth	r0, r3
 80045d8:	8a7b      	ldrh	r3, [r7, #18]
 80045da:	3303      	adds	r3, #3
 80045dc:	b29c      	uxth	r4, r3
							YsButtonUpDownTimeHold + 3,\
							XsButtonUpDownTimeHold + widthButtonUpDown/2+widthButtonUpDown/4, \
 80045de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	8abb      	ldrh	r3, [r7, #20]
 80045e8:	4413      	add	r3, r2
 80045ea:	b29a      	uxth	r2, r3
					Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/2,\
 80045ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80045f0:	089b      	lsrs	r3, r3, #2
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	4413      	add	r3, r2
 80045f6:	b29d      	uxth	r5, r3
 80045f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045fc:	4a95      	ldr	r2, [pc, #596]	; (8004854 <getChooseSetAndRun+0xd94>)
 80045fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004602:	085b      	lsrs	r3, r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	8a7b      	ldrh	r3, [r7, #18]
 8004608:	4413      	add	r3, r2
 800460a:	b29e      	uxth	r6, r3
 800460c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004610:	089b      	lsrs	r3, r3, #2
 8004612:	b29a      	uxth	r2, r3
 8004614:	8abb      	ldrh	r3, [r7, #20]
 8004616:	4413      	add	r3, r2
 8004618:	b29b      	uxth	r3, r3
 800461a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800461e:	498d      	ldr	r1, [pc, #564]	; (8004854 <getChooseSetAndRun+0xd94>)
 8004620:	fba1 1202 	umull	r1, r2, r1, r2
 8004624:	0852      	lsrs	r2, r2, #1
 8004626:	b291      	uxth	r1, r2
 8004628:	8a7a      	ldrh	r2, [r7, #18]
 800462a:	440a      	add	r2, r1
 800462c:	b292      	uxth	r2, r2
 800462e:	9201      	str	r2, [sp, #4]
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	4633      	mov	r3, r6
 8004634:	462a      	mov	r2, r5
 8004636:	4621      	mov	r1, r4
 8004638:	f7fd f984 	bl	8001944 <Fill_Triangel>
							YsButtonUpDownTimeHold+heightButtonUpDown/3, \
							XsButtonUpDownTimeHold + widthButtonUpDown/4, \
							YsButtonUpDownTimeHold+heightButtonUpDown/3);
					Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/4,\
 800463c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004640:	089b      	lsrs	r3, r3, #2
 8004642:	b29a      	uxth	r2, r3
 8004644:	8abb      	ldrh	r3, [r7, #20]
 8004646:	4413      	add	r3, r2
 8004648:	b298      	uxth	r0, r3
							YsButtonUpDownTimeHold + heightButtonUpDown*2/3, \
 800464a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	4a81      	ldr	r2, [pc, #516]	; (8004858 <getChooseSetAndRun+0xd98>)
 8004652:	fb82 1203 	smull	r1, r2, r2, r3
 8004656:	17db      	asrs	r3, r3, #31
 8004658:	1ad3      	subs	r3, r2, r3
					Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/4,\
 800465a:	b29a      	uxth	r2, r3
 800465c:	8a7b      	ldrh	r3, [r7, #18]
 800465e:	4413      	add	r3, r2
 8004660:	b29c      	uxth	r4, r3
							XsButtonUpDownTimeHold + widthButtonUpDown/2+widthButtonUpDown/4, \
 8004662:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004666:	085b      	lsrs	r3, r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	8abb      	ldrh	r3, [r7, #20]
 800466c:	4413      	add	r3, r2
 800466e:	b29a      	uxth	r2, r3
					Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/4,\
 8004670:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004674:	089b      	lsrs	r3, r3, #2
 8004676:	b29b      	uxth	r3, r3
 8004678:	4413      	add	r3, r2
 800467a:	b29d      	uxth	r5, r3
							YsButtonUpDownTimeHold + heightButtonUpDown*2/3, \
 800467c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	4a75      	ldr	r2, [pc, #468]	; (8004858 <getChooseSetAndRun+0xd98>)
 8004684:	fb82 1203 	smull	r1, r2, r2, r3
 8004688:	17db      	asrs	r3, r3, #31
 800468a:	1ad3      	subs	r3, r2, r3
					Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/4,\
 800468c:	b29a      	uxth	r2, r3
 800468e:	8a7b      	ldrh	r3, [r7, #18]
 8004690:	4413      	add	r3, r2
 8004692:	b29e      	uxth	r6, r3
 8004694:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004698:	085b      	lsrs	r3, r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	8abb      	ldrh	r3, [r7, #20]
 800469e:	4413      	add	r3, r2
 80046a0:	b29b      	uxth	r3, r3
							XsButtonUpDownTimeHold + widthButtonUpDown/2, \
							YsButtonUpDownTimeHold + heightButtonUpDown-3);
 80046a2:	8a79      	ldrh	r1, [r7, #18]
 80046a4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80046a8:	440a      	add	r2, r1
 80046aa:	b292      	uxth	r2, r2
					Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/4,\
 80046ac:	3a03      	subs	r2, #3
 80046ae:	b292      	uxth	r2, r2
 80046b0:	9201      	str	r2, [sp, #4]
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	4633      	mov	r3, r6
 80046b6:	462a      	mov	r2, r5
 80046b8:	4621      	mov	r1, r4
 80046ba:	f7fd f943 	bl	8001944 <Fill_Triangel>

					do{
						key = processEventButton();
 80046be:	f7fc f971 	bl	80009a4 <processEventButton>
 80046c2:	4603      	mov	r3, r0
 80046c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80046c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046c8:	3b01      	subs	r3, #1
 80046ca:	2b0d      	cmp	r3, #13
 80046cc:	f200 81fb 	bhi.w	8004ac6 <getChooseSetAndRun+0x1006>
 80046d0:	a201      	add	r2, pc, #4	; (adr r2, 80046d8 <getChooseSetAndRun+0xc18>)
 80046d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d6:	bf00      	nop
 80046d8:	080049a3 	.word	0x080049a3
 80046dc:	08004aa7 	.word	0x08004aa7
 80046e0:	08004711 	.word	0x08004711
 80046e4:	08004745 	.word	0x08004745
 80046e8:	08004779 	.word	0x08004779
 80046ec:	080047ad 	.word	0x080047ad
 80046f0:	080047e3 	.word	0x080047e3
 80046f4:	0800481b 	.word	0x0800481b
 80046f8:	08004865 	.word	0x08004865
 80046fc:	08004899 	.word	0x08004899
 8004700:	080048cd 	.word	0x080048cd
 8004704:	08004901 	.word	0x08004901
 8004708:	08004937 	.word	0x08004937
 800470c:	0800496f 	.word	0x0800496f
						switch(key)
						{
						case UP:
							dwTimeHoldTemp ++;
 8004710:	4b52      	ldr	r3, [pc, #328]	; (800485c <getChooseSetAndRun+0xd9c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3301      	adds	r3, #1
 8004716:	4a51      	ldr	r2, [pc, #324]	; (800485c <getChooseSetAndRun+0xd9c>)
 8004718:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 800471a:	4b50      	ldr	r3, [pc, #320]	; (800485c <getChooseSetAndRun+0xd9c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a50      	ldr	r2, [pc, #320]	; (8004860 <getChooseSetAndRun+0xda0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d902      	bls.n	800472a <getChooseSetAndRun+0xc6a>
							{
								dwTimeHoldTemp = 1;
 8004724:	4b4d      	ldr	r3, [pc, #308]	; (800485c <getChooseSetAndRun+0xd9c>)
 8004726:	2201      	movs	r2, #1
 8004728:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 800472a:	4b4c      	ldr	r3, [pc, #304]	; (800485c <getChooseSetAndRun+0xd9c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004730:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004732:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8004734:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	4623      	mov	r3, r4
 800473a:	f7fd fe57 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 800473e:	2300      	movs	r3, #0
 8004740:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004742:	e1c0      	b.n	8004ac6 <getChooseSetAndRun+0x1006>
						case UP_DOUBLE:
							dwTimeHoldTemp +=10;
 8004744:	4b45      	ldr	r3, [pc, #276]	; (800485c <getChooseSetAndRun+0xd9c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	330a      	adds	r3, #10
 800474a:	4a44      	ldr	r2, [pc, #272]	; (800485c <getChooseSetAndRun+0xd9c>)
 800474c:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 800474e:	4b43      	ldr	r3, [pc, #268]	; (800485c <getChooseSetAndRun+0xd9c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a43      	ldr	r2, [pc, #268]	; (8004860 <getChooseSetAndRun+0xda0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d902      	bls.n	800475e <getChooseSetAndRun+0xc9e>
							{
								dwTimeHoldTemp = 1;
 8004758:	4b40      	ldr	r3, [pc, #256]	; (800485c <getChooseSetAndRun+0xd9c>)
 800475a:	2201      	movs	r2, #1
 800475c:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 800475e:	4b3f      	ldr	r3, [pc, #252]	; (800485c <getChooseSetAndRun+0xd9c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004764:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004766:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8004768:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	4623      	mov	r3, r4
 800476e:	f7fd fe3d 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 8004772:	2300      	movs	r3, #0
 8004774:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004776:	e1a6      	b.n	8004ac6 <getChooseSetAndRun+0x1006>
						case UP_TRIPLE:
							dwTimeHoldTemp +=100;
 8004778:	4b38      	ldr	r3, [pc, #224]	; (800485c <getChooseSetAndRun+0xd9c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3364      	adds	r3, #100	; 0x64
 800477e:	4a37      	ldr	r2, [pc, #220]	; (800485c <getChooseSetAndRun+0xd9c>)
 8004780:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 8004782:	4b36      	ldr	r3, [pc, #216]	; (800485c <getChooseSetAndRun+0xd9c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a36      	ldr	r2, [pc, #216]	; (8004860 <getChooseSetAndRun+0xda0>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d902      	bls.n	8004792 <getChooseSetAndRun+0xcd2>
							{
								dwTimeHoldTemp = 1;
 800478c:	4b33      	ldr	r3, [pc, #204]	; (800485c <getChooseSetAndRun+0xd9c>)
 800478e:	2201      	movs	r2, #1
 8004790:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 8004792:	4b32      	ldr	r3, [pc, #200]	; (800485c <getChooseSetAndRun+0xd9c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004798:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800479a:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800479c:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	4623      	mov	r3, r4
 80047a2:	f7fd fe23 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 80047a6:	2300      	movs	r3, #0
 80047a8:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 80047aa:	e18c      	b.n	8004ac6 <getChooseSetAndRun+0x1006>
						case UP_QUADRUPLE:
							dwTimeHoldTemp +=1000;
 80047ac:	4b2b      	ldr	r3, [pc, #172]	; (800485c <getChooseSetAndRun+0xd9c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80047b4:	4a29      	ldr	r2, [pc, #164]	; (800485c <getChooseSetAndRun+0xd9c>)
 80047b6:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 80047b8:	4b28      	ldr	r3, [pc, #160]	; (800485c <getChooseSetAndRun+0xd9c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a28      	ldr	r2, [pc, #160]	; (8004860 <getChooseSetAndRun+0xda0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d902      	bls.n	80047c8 <getChooseSetAndRun+0xd08>
							{
								dwTimeHoldTemp = 1;
 80047c2:	4b26      	ldr	r3, [pc, #152]	; (800485c <getChooseSetAndRun+0xd9c>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 80047c8:	4b24      	ldr	r3, [pc, #144]	; (800485c <getChooseSetAndRun+0xd9c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80047ce:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80047d0:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80047d2:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	4623      	mov	r3, r4
 80047d8:	f7fd fe08 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 80047dc:	2300      	movs	r3, #0
 80047de:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 80047e0:	e171      	b.n	8004ac6 <getChooseSetAndRun+0x1006>
						case UP_QUINTUPLE:
							dwTimeHoldTemp +=10000;
 80047e2:	4b1e      	ldr	r3, [pc, #120]	; (800485c <getChooseSetAndRun+0xd9c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80047ea:	3310      	adds	r3, #16
 80047ec:	4a1b      	ldr	r2, [pc, #108]	; (800485c <getChooseSetAndRun+0xd9c>)
 80047ee:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 80047f0:	4b1a      	ldr	r3, [pc, #104]	; (800485c <getChooseSetAndRun+0xd9c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a1a      	ldr	r2, [pc, #104]	; (8004860 <getChooseSetAndRun+0xda0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d902      	bls.n	8004800 <getChooseSetAndRun+0xd40>
							{
								dwTimeHoldTemp = 1;
 80047fa:	4b18      	ldr	r3, [pc, #96]	; (800485c <getChooseSetAndRun+0xd9c>)
 80047fc:	2201      	movs	r2, #1
 80047fe:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 8004800:	4b16      	ldr	r3, [pc, #88]	; (800485c <getChooseSetAndRun+0xd9c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004806:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004808:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800480a:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	4623      	mov	r3, r4
 8004810:	f7fd fdec 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 8004814:	2300      	movs	r3, #0
 8004816:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004818:	e155      	b.n	8004ac6 <getChooseSetAndRun+0x1006>
						case UP_HOLD:
							dwTimeHoldTemp ++;
 800481a:	4b10      	ldr	r3, [pc, #64]	; (800485c <getChooseSetAndRun+0xd9c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3301      	adds	r3, #1
 8004820:	4a0e      	ldr	r2, [pc, #56]	; (800485c <getChooseSetAndRun+0xd9c>)
 8004822:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 8004824:	4b0d      	ldr	r3, [pc, #52]	; (800485c <getChooseSetAndRun+0xd9c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a0d      	ldr	r2, [pc, #52]	; (8004860 <getChooseSetAndRun+0xda0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d902      	bls.n	8004834 <getChooseSetAndRun+0xd74>
							{
								dwTimeHoldTemp = 1;
 800482e:	4b0b      	ldr	r3, [pc, #44]	; (800485c <getChooseSetAndRun+0xd9c>)
 8004830:	2201      	movs	r2, #1
 8004832:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 8004834:	4b09      	ldr	r3, [pc, #36]	; (800485c <getChooseSetAndRun+0xd9c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800483a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800483c:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800483e:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	4623      	mov	r3, r4
 8004844:	f7fd fdd2 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 8004848:	2300      	movs	r3, #0
 800484a:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 800484c:	e13b      	b.n	8004ac6 <getChooseSetAndRun+0x1006>
 800484e:	bf00      	nop
 8004850:	20000131 	.word	0x20000131
 8004854:	aaaaaaab 	.word	0xaaaaaaab
 8004858:	55555556 	.word	0x55555556
 800485c:	2000012c 	.word	0x2000012c
 8004860:	0001869f 	.word	0x0001869f
						case DOWN:
							dwTimeHoldTemp --;
 8004864:	4b9b      	ldr	r3, [pc, #620]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3b01      	subs	r3, #1
 800486a:	4a9a      	ldr	r2, [pc, #616]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 800486c:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 800486e:	4b99      	ldr	r3, [pc, #612]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a99      	ldr	r2, [pc, #612]	; (8004ad8 <getChooseSetAndRun+0x1018>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d902      	bls.n	800487e <getChooseSetAndRun+0xdbe>
							{
								dwTimeHoldTemp = 99999;
 8004878:	4b96      	ldr	r3, [pc, #600]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 800487a:	4a97      	ldr	r2, [pc, #604]	; (8004ad8 <getChooseSetAndRun+0x1018>)
 800487c:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 800487e:	4b95      	ldr	r3, [pc, #596]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004884:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004886:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8004888:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	4623      	mov	r3, r4
 800488e:	f7fd fdad 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 8004892:	2300      	movs	r3, #0
 8004894:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004896:	e116      	b.n	8004ac6 <getChooseSetAndRun+0x1006>
						case DOWN_DOUBLE:
							dwTimeHoldTemp -=10;
 8004898:	4b8e      	ldr	r3, [pc, #568]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3b0a      	subs	r3, #10
 800489e:	4a8d      	ldr	r2, [pc, #564]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 80048a0:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 80048a2:	4b8c      	ldr	r3, [pc, #560]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a8c      	ldr	r2, [pc, #560]	; (8004ad8 <getChooseSetAndRun+0x1018>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d902      	bls.n	80048b2 <getChooseSetAndRun+0xdf2>
							{
								dwTimeHoldTemp = 99999;
 80048ac:	4b89      	ldr	r3, [pc, #548]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 80048ae:	4a8a      	ldr	r2, [pc, #552]	; (8004ad8 <getChooseSetAndRun+0x1018>)
 80048b0:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 80048b2:	4b88      	ldr	r3, [pc, #544]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80048b8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80048ba:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80048bc:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	4623      	mov	r3, r4
 80048c2:	f7fd fd93 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 80048c6:	2300      	movs	r3, #0
 80048c8:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 80048ca:	e0fc      	b.n	8004ac6 <getChooseSetAndRun+0x1006>
						case DOWN_TRIPLE:
							dwTimeHoldTemp -=100;
 80048cc:	4b81      	ldr	r3, [pc, #516]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3b64      	subs	r3, #100	; 0x64
 80048d2:	4a80      	ldr	r2, [pc, #512]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 80048d4:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 80048d6:	4b7f      	ldr	r3, [pc, #508]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a7f      	ldr	r2, [pc, #508]	; (8004ad8 <getChooseSetAndRun+0x1018>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d902      	bls.n	80048e6 <getChooseSetAndRun+0xe26>
							{
								dwTimeHoldTemp = 99999;
 80048e0:	4b7c      	ldr	r3, [pc, #496]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 80048e2:	4a7d      	ldr	r2, [pc, #500]	; (8004ad8 <getChooseSetAndRun+0x1018>)
 80048e4:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 80048e6:	4b7b      	ldr	r3, [pc, #492]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80048ec:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80048ee:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80048f0:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	4623      	mov	r3, r4
 80048f6:	f7fd fd79 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 80048fa:	2300      	movs	r3, #0
 80048fc:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 80048fe:	e0e2      	b.n	8004ac6 <getChooseSetAndRun+0x1006>
						case DOWN_QUADRUPLE:
							dwTimeHoldTemp -=1000;
 8004900:	4b74      	ldr	r3, [pc, #464]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8004908:	4a72      	ldr	r2, [pc, #456]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 800490a:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 800490c:	4b71      	ldr	r3, [pc, #452]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a71      	ldr	r2, [pc, #452]	; (8004ad8 <getChooseSetAndRun+0x1018>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d902      	bls.n	800491c <getChooseSetAndRun+0xe5c>
							{
								dwTimeHoldTemp = 99999;
 8004916:	4b6f      	ldr	r3, [pc, #444]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 8004918:	4a6f      	ldr	r2, [pc, #444]	; (8004ad8 <getChooseSetAndRun+0x1018>)
 800491a:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 800491c:	4b6d      	ldr	r3, [pc, #436]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004922:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004924:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8004926:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	4623      	mov	r3, r4
 800492c:	f7fd fd5e 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 8004930:	2300      	movs	r3, #0
 8004932:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004934:	e0c7      	b.n	8004ac6 <getChooseSetAndRun+0x1006>
						case DOWN_QUINTUPLE:
							dwTimeHoldTemp -=10000;
 8004936:	4b67      	ldr	r3, [pc, #412]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800493e:	3b10      	subs	r3, #16
 8004940:	4a64      	ldr	r2, [pc, #400]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 8004942:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 8004944:	4b63      	ldr	r3, [pc, #396]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a63      	ldr	r2, [pc, #396]	; (8004ad8 <getChooseSetAndRun+0x1018>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d902      	bls.n	8004954 <getChooseSetAndRun+0xe94>
							{
								dwTimeHoldTemp = 99999;
 800494e:	4b61      	ldr	r3, [pc, #388]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 8004950:	4a61      	ldr	r2, [pc, #388]	; (8004ad8 <getChooseSetAndRun+0x1018>)
 8004952:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 8004954:	4b5f      	ldr	r3, [pc, #380]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800495a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800495c:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800495e:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	4623      	mov	r3, r4
 8004964:	f7fd fd42 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 8004968:	2300      	movs	r3, #0
 800496a:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 800496c:	e0ab      	b.n	8004ac6 <getChooseSetAndRun+0x1006>
						case DOWN_HOLD:
							dwTimeHoldTemp --;
 800496e:	4b59      	ldr	r3, [pc, #356]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3b01      	subs	r3, #1
 8004974:	4a57      	ldr	r2, [pc, #348]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 8004976:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 8004978:	4b56      	ldr	r3, [pc, #344]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a56      	ldr	r2, [pc, #344]	; (8004ad8 <getChooseSetAndRun+0x1018>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d902      	bls.n	8004988 <getChooseSetAndRun+0xec8>
							{
								dwTimeHoldTemp = 99999;
 8004982:	4b54      	ldr	r3, [pc, #336]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 8004984:	4a54      	ldr	r2, [pc, #336]	; (8004ad8 <getChooseSetAndRun+0x1018>)
 8004986:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 8004988:	4b52      	ldr	r3, [pc, #328]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800498e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004990:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8004992:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	4623      	mov	r3, r4
 8004998:	f7fd fd28 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 800499c:	2300      	movs	r3, #0
 800499e:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 80049a0:	e091      	b.n	8004ac6 <getChooseSetAndRun+0x1006>
						case SELECT:

							LCD_SetColorPoint(BLACK);
 80049a2:	2000      	movs	r0, #0
 80049a4:	f7fe fa34 	bl	8002e10 <LCD_SetColorPoint>
							Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/2,\
 80049a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80049ac:	085b      	lsrs	r3, r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	8abb      	ldrh	r3, [r7, #20]
 80049b2:	4413      	add	r3, r2
 80049b4:	b298      	uxth	r0, r3
 80049b6:	8a7b      	ldrh	r3, [r7, #18]
 80049b8:	3303      	adds	r3, #3
 80049ba:	b29c      	uxth	r4, r3
									YsButtonUpDownTimeHold + 3,\
									XsButtonUpDownTimeHold + widthButtonUpDown/2+widthButtonUpDown/4, \
 80049bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80049c0:	085b      	lsrs	r3, r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	8abb      	ldrh	r3, [r7, #20]
 80049c6:	4413      	add	r3, r2
 80049c8:	b29a      	uxth	r2, r3
							Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/2,\
 80049ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80049ce:	089b      	lsrs	r3, r3, #2
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	4413      	add	r3, r2
 80049d4:	b29d      	uxth	r5, r3
 80049d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80049da:	4a40      	ldr	r2, [pc, #256]	; (8004adc <getChooseSetAndRun+0x101c>)
 80049dc:	fba2 2303 	umull	r2, r3, r2, r3
 80049e0:	085b      	lsrs	r3, r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	8a7b      	ldrh	r3, [r7, #18]
 80049e6:	4413      	add	r3, r2
 80049e8:	b29e      	uxth	r6, r3
 80049ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80049ee:	089b      	lsrs	r3, r3, #2
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	8abb      	ldrh	r3, [r7, #20]
 80049f4:	4413      	add	r3, r2
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80049fc:	4937      	ldr	r1, [pc, #220]	; (8004adc <getChooseSetAndRun+0x101c>)
 80049fe:	fba1 1202 	umull	r1, r2, r1, r2
 8004a02:	0852      	lsrs	r2, r2, #1
 8004a04:	b291      	uxth	r1, r2
 8004a06:	8a7a      	ldrh	r2, [r7, #18]
 8004a08:	440a      	add	r2, r1
 8004a0a:	b292      	uxth	r2, r2
 8004a0c:	9201      	str	r2, [sp, #4]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	4633      	mov	r3, r6
 8004a12:	462a      	mov	r2, r5
 8004a14:	4621      	mov	r1, r4
 8004a16:	f7fc ff95 	bl	8001944 <Fill_Triangel>
									YsButtonUpDownTimeHold+heightButtonUpDown/3, \
									XsButtonUpDownTimeHold + widthButtonUpDown/4, \
									YsButtonUpDownTimeHold+heightButtonUpDown/3);
							Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/4,\
 8004a1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004a1e:	089b      	lsrs	r3, r3, #2
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	8abb      	ldrh	r3, [r7, #20]
 8004a24:	4413      	add	r3, r2
 8004a26:	b298      	uxth	r0, r3
									YsButtonUpDownTimeHold + heightButtonUpDown*2/3, \
 8004a28:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	4a2c      	ldr	r2, [pc, #176]	; (8004ae0 <getChooseSetAndRun+0x1020>)
 8004a30:	fb82 1203 	smull	r1, r2, r2, r3
 8004a34:	17db      	asrs	r3, r3, #31
 8004a36:	1ad3      	subs	r3, r2, r3
							Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/4,\
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	8a7b      	ldrh	r3, [r7, #18]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	b29c      	uxth	r4, r3
									XsButtonUpDownTimeHold + widthButtonUpDown/2+widthButtonUpDown/4, \
 8004a40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004a44:	085b      	lsrs	r3, r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	8abb      	ldrh	r3, [r7, #20]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	b29a      	uxth	r2, r3
							Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/4,\
 8004a4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004a52:	089b      	lsrs	r3, r3, #2
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	4413      	add	r3, r2
 8004a58:	b29d      	uxth	r5, r3
									YsButtonUpDownTimeHold + heightButtonUpDown*2/3, \
 8004a5a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	4a1f      	ldr	r2, [pc, #124]	; (8004ae0 <getChooseSetAndRun+0x1020>)
 8004a62:	fb82 1203 	smull	r1, r2, r2, r3
 8004a66:	17db      	asrs	r3, r3, #31
 8004a68:	1ad3      	subs	r3, r2, r3
							Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/4,\
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	8a7b      	ldrh	r3, [r7, #18]
 8004a6e:	4413      	add	r3, r2
 8004a70:	b29e      	uxth	r6, r3
 8004a72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004a76:	085b      	lsrs	r3, r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	8abb      	ldrh	r3, [r7, #20]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	b29b      	uxth	r3, r3
									XsButtonUpDownTimeHold + widthButtonUpDown/2, \
									YsButtonUpDownTimeHold + heightButtonUpDown-3);
 8004a80:	8a79      	ldrh	r1, [r7, #18]
 8004a82:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004a86:	440a      	add	r2, r1
 8004a88:	b292      	uxth	r2, r2
							Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/4,\
 8004a8a:	3a03      	subs	r2, #3
 8004a8c:	b292      	uxth	r2, r2
 8004a8e:	9201      	str	r2, [sp, #4]
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	4633      	mov	r3, r6
 8004a94:	462a      	mov	r2, r5
 8004a96:	4621      	mov	r1, r4
 8004a98:	f7fc ff54 	bl	8001944 <Fill_Triangel>
							pData[4] = dwTimeHoldTemp;
 8004a9c:	4b0d      	ldr	r3, [pc, #52]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a10      	ldr	r2, [pc, #64]	; (8004ae4 <getChooseSetAndRun+0x1024>)
 8004aa2:	6113      	str	r3, [r2, #16]
							break;
 8004aa4:	e00f      	b.n	8004ac6 <getChooseSetAndRun+0x1006>
						case SELECT_DOUBLE:
							dwTimeHoldTemp = 0;
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 8004aac:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <getChooseSetAndRun+0x1014>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004ab2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004ab4:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8004ab6:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	4623      	mov	r3, r4
 8004abc:	f7fd fc96 	bl	80023ec <LCD_UpdateEditNum>
							key = NOKEY;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004ac4:	bf00      	nop
						}
					}while(key != SELECT);
 8004ac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	f47f adf8 	bne.w	80046be <getChooseSetAndRun+0xbfe>

					key = NOKEY;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ad2:	e034      	b.n	8004b3e <getChooseSetAndRun+0x107e>
 8004ad4:	2000012c 	.word	0x2000012c
 8004ad8:	0001869f 	.word	0x0001869f
 8004adc:	aaaaaaab 	.word	0xaaaaaaab
 8004ae0:	55555556 	.word	0x55555556
 8004ae4:	20000110 	.word	0x20000110
				}else if(Row == 2)
 8004ae8:	4b1a      	ldr	r3, [pc, #104]	; (8004b54 <getChooseSetAndRun+0x1094>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d11d      	bne.n	8004b2c <getChooseSetAndRun+0x106c>
				{
					pData[0] = STOP;
 8004af0:	4b19      	ldr	r3, [pc, #100]	; (8004b58 <getChooseSetAndRun+0x1098>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
					pUpdateDataStopHandle((void*)pData);
 8004af6:	4b19      	ldr	r3, [pc, #100]	; (8004b5c <getChooseSetAndRun+0x109c>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4817      	ldr	r0, [pc, #92]	; (8004b58 <getChooseSetAndRun+0x1098>)
 8004afc:	4798      	blx	r3
					pData[0] = RUN;
 8004afe:	4b16      	ldr	r3, [pc, #88]	; (8004b58 <getChooseSetAndRun+0x1098>)
 8004b00:	2202      	movs	r2, #2
 8004b02:	601a      	str	r2, [r3, #0]
					pData[2] = 0;
 8004b04:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <getChooseSetAndRun+0x1098>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	609a      	str	r2, [r3, #8]
					pData[3] = 0;
 8004b0a:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <getChooseSetAndRun+0x1098>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	60da      	str	r2, [r3, #12]
					pUpdateDataStopHandle((void*)pData);
 8004b10:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <getChooseSetAndRun+0x109c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4810      	ldr	r0, [pc, #64]	; (8004b58 <getChooseSetAndRun+0x1098>)
 8004b16:	4798      	blx	r3
					action = SELECT_ACTION;
 8004b18:	2302      	movs	r3, #2
 8004b1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					flag = 0;
 8004b1e:	4b10      	ldr	r3, [pc, #64]	; (8004b60 <getChooseSetAndRun+0x10a0>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	701a      	strb	r2, [r3, #0]
					Row = 0;
 8004b24:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <getChooseSetAndRun+0x1094>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	e008      	b.n	8004b3e <getChooseSetAndRun+0x107e>
				}
				else
				{
					//pData[0] = STOP;
					//pUpdateDataStopHandle((void*)pData);
					action = RETURN_ACTION;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					flag = 0;
 8004b32:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <getChooseSetAndRun+0x10a0>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	701a      	strb	r2, [r3, #0]
					Row = 0;
 8004b38:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <getChooseSetAndRun+0x1094>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	701a      	strb	r2, [r3, #0]
				}
				//Print Titel
				key = NOKEY;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	65bb      	str	r3, [r7, #88]	; 0x58
				break;
 8004b42:	e000      	b.n	8004b46 <getChooseSetAndRun+0x1086>
			default:
				break;
 8004b44:	bf00      	nop
			}
	return action;
 8004b46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3764      	adds	r7, #100	; 0x64
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20000131 	.word	0x20000131
 8004b58:	20000110 	.word	0x20000110
 8004b5c:	2000010c 	.word	0x2000010c
 8004b60:	20000130 	.word	0x20000130

08004b64 <getChooseMainMenu>:
uint8_t getChooseMainMenu(uint8_t byNumOfRows,\
				uint8_t bySizeOfRow,\
				char pStrInterface[][20],\
				uint8_t bySize)
{
 8004b64:	b590      	push	{r4, r7, lr}
 8004b66:	b089      	sub	sp, #36	; 0x24
 8004b68:	af04      	add	r7, sp, #16
 8004b6a:	603a      	str	r2, [r7, #0]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4603      	mov	r3, r0
 8004b70:	71fb      	strb	r3, [r7, #7]
 8004b72:	460b      	mov	r3, r1
 8004b74:	71bb      	strb	r3, [r7, #6]
 8004b76:	4613      	mov	r3, r2
 8004b78:	717b      	strb	r3, [r7, #5]
	ValueKey_e key = NOKEY ;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	73fb      	strb	r3, [r7, #15]
	uint8_t byRow = 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	73bb      	strb	r3, [r7, #14]
	static uint8_t byRowTemp = 0;
	static uint8_t byFlag = 0;
	static u16 cursorOfOptionBox[10];
	cursorOfOptionBox[0] = 30;
 8004b82:	4ba8      	ldr	r3, [pc, #672]	; (8004e24 <getChooseMainMenu+0x2c0>)
 8004b84:	221e      	movs	r2, #30
 8004b86:	801a      	strh	r2, [r3, #0]
	if(byFlag == 0)
 8004b88:	4ba7      	ldr	r3, [pc, #668]	; (8004e28 <getChooseMainMenu+0x2c4>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d154      	bne.n	8004c3a <getChooseMainMenu+0xd6>
	{
		LCD_Clear(WHITE);
 8004b90:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004b94:	f7fe f966 	bl	8002e64 <LCD_Clear>
		//Print Titel
		LCD_ShowTitle(bySizeOfRow, WHITE, BLUE, (u8*)pStrInterface[0], 16, 1);
 8004b98:	79bb      	ldrb	r3, [r7, #6]
 8004b9a:	b298      	uxth	r0, r3
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	9301      	str	r3, [sp, #4]
 8004ba0:	2310      	movs	r3, #16
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	221f      	movs	r2, #31
 8004ba8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004bac:	f7fc fff4 	bl	8001b98 <LCD_ShowTitle>

		for(uint8_t i = 1;i<byNumOfRows+1;i++)
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	737b      	strb	r3, [r7, #13]
 8004bb4:	e020      	b.n	8004bf8 <getChooseMainMenu+0x94>
		{
			//print interface
			cursorOfOptionBox[i] = LCD_ShowOption(20, cursorOfOptionBox[i-1], BLACK, CYAN, (u8*)pStrInterface[i], 16, 1);
 8004bb6:	7b7b      	ldrb	r3, [r7, #13]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	4a9a      	ldr	r2, [pc, #616]	; (8004e24 <getChooseMainMenu+0x2c0>)
 8004bbc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004bc0:	7b7a      	ldrb	r2, [r7, #13]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	461a      	mov	r2, r3
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	4413      	add	r3, r2
 8004bd0:	7b7c      	ldrb	r4, [r7, #13]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	9202      	str	r2, [sp, #8]
 8004bd6:	2210      	movs	r2, #16
 8004bd8:	9201      	str	r2, [sp, #4]
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8004be0:	2200      	movs	r2, #0
 8004be2:	2014      	movs	r0, #20
 8004be4:	f7fd f80b 	bl	8001bfe <LCD_ShowOption>
 8004be8:	4603      	mov	r3, r0
 8004bea:	461a      	mov	r2, r3
 8004bec:	4b8d      	ldr	r3, [pc, #564]	; (8004e24 <getChooseMainMenu+0x2c0>)
 8004bee:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		for(uint8_t i = 1;i<byNumOfRows+1;i++)
 8004bf2:	7b7b      	ldrb	r3, [r7, #13]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	737b      	strb	r3, [r7, #13]
 8004bf8:	79fa      	ldrb	r2, [r7, #7]
 8004bfa:	7b7b      	ldrb	r3, [r7, #13]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d2da      	bcs.n	8004bb6 <getChooseMainMenu+0x52>
		}
		LCD_DrawRectangle(10,cursorOfOptionBox[byRowTemp],310,cursorOfOptionBox[byRowTemp]+bySizeOfRow);
 8004c00:	4b8a      	ldr	r3, [pc, #552]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	4b87      	ldr	r3, [pc, #540]	; (8004e24 <getChooseMainMenu+0x2c0>)
 8004c08:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8004c0c:	4b87      	ldr	r3, [pc, #540]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	4b84      	ldr	r3, [pc, #528]	; (8004e24 <getChooseMainMenu+0x2c0>)
 8004c14:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004c18:	79bb      	ldrb	r3, [r7, #6]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	f44f 729b 	mov.w	r2, #310	; 0x136
 8004c24:	200a      	movs	r0, #10
 8004c26:	f7fc fd53 	bl	80016d0 <LCD_DrawRectangle>
		byFlag = 1;
 8004c2a:	4b7f      	ldr	r3, [pc, #508]	; (8004e28 <getChooseMainMenu+0x2c4>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	701a      	strb	r2, [r3, #0]
	}
	while(key == NOKEY)
 8004c30:	e003      	b.n	8004c3a <getChooseMainMenu+0xd6>
	{
		key = processEventButton();
 8004c32:	f7fb feb7 	bl	80009a4 <processEventButton>
 8004c36:	4603      	mov	r3, r0
 8004c38:	73fb      	strb	r3, [r7, #15]
	while(key == NOKEY)
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0f8      	beq.n	8004c32 <getChooseMainMenu+0xce>
	}
	switch(key)
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	2b09      	cmp	r3, #9
 8004c44:	d05a      	beq.n	8004cfc <getChooseMainMenu+0x198>
 8004c46:	2b09      	cmp	r3, #9
 8004c48:	f300 80e6 	bgt.w	8004e18 <getChooseMainMenu+0x2b4>
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	f000 80ac 	beq.w	8004daa <getChooseMainMenu+0x246>
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	f040 80e0 	bne.w	8004e18 <getChooseMainMenu+0x2b4>
	{
	case UP:
		byRowTemp--;
 8004c58:	4b74      	ldr	r3, [pc, #464]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	4b72      	ldr	r3, [pc, #456]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004c62:	701a      	strb	r2, [r3, #0]
		if(byRowTemp == 255)
 8004c64:	4b71      	ldr	r3, [pc, #452]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2bff      	cmp	r3, #255	; 0xff
 8004c6a:	d116      	bne.n	8004c9a <getChooseMainMenu+0x136>
		{
			byRowTemp = byNumOfRows-1;
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	4b6e      	ldr	r3, [pc, #440]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004c74:	701a      	strb	r2, [r3, #0]
			LCD_SetColorPoint(CYAN);
 8004c76:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8004c7a:	f7fe f8c9 	bl	8002e10 <LCD_SetColorPoint>
			LCD_DrawRectangle(10,cursorOfOptionBox[0],310,cursorOfOptionBox[0]+bySizeOfRow);
 8004c7e:	4b69      	ldr	r3, [pc, #420]	; (8004e24 <getChooseMainMenu+0x2c0>)
 8004c80:	8819      	ldrh	r1, [r3, #0]
 8004c82:	4b68      	ldr	r3, [pc, #416]	; (8004e24 <getChooseMainMenu+0x2c0>)
 8004c84:	881a      	ldrh	r2, [r3, #0]
 8004c86:	79bb      	ldrb	r3, [r7, #6]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	4413      	add	r3, r2
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f44f 729b 	mov.w	r2, #310	; 0x136
 8004c92:	200a      	movs	r0, #10
 8004c94:	f7fc fd1c 	bl	80016d0 <LCD_DrawRectangle>
 8004c98:	e018      	b.n	8004ccc <getChooseMainMenu+0x168>
		}else
		{
			LCD_SetColorPoint(CYAN);
 8004c9a:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8004c9e:	f7fe f8b7 	bl	8002e10 <LCD_SetColorPoint>
			LCD_DrawRectangle(10,cursorOfOptionBox[byRowTemp+1],310,cursorOfOptionBox[byRowTemp+1]+bySizeOfRow);
 8004ca2:	4b62      	ldr	r3, [pc, #392]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	4a5e      	ldr	r2, [pc, #376]	; (8004e24 <getChooseMainMenu+0x2c0>)
 8004caa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004cae:	4b5f      	ldr	r3, [pc, #380]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	4a5b      	ldr	r2, [pc, #364]	; (8004e24 <getChooseMainMenu+0x2c0>)
 8004cb6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004cba:	79bb      	ldrb	r3, [r7, #6]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	f44f 729b 	mov.w	r2, #310	; 0x136
 8004cc6:	200a      	movs	r0, #10
 8004cc8:	f7fc fd02 	bl	80016d0 <LCD_DrawRectangle>
		}
		LCD_DrawRectangle(10,cursorOfOptionBox[byRowTemp],310,cursorOfOptionBox[byRowTemp]+bySizeOfRow);
 8004ccc:	4b57      	ldr	r3, [pc, #348]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	4b54      	ldr	r3, [pc, #336]	; (8004e24 <getChooseMainMenu+0x2c0>)
 8004cd4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8004cd8:	4b54      	ldr	r3, [pc, #336]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	4b51      	ldr	r3, [pc, #324]	; (8004e24 <getChooseMainMenu+0x2c0>)
 8004ce0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004ce4:	79bb      	ldrb	r3, [r7, #6]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	4413      	add	r3, r2
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	f44f 729b 	mov.w	r2, #310	; 0x136
 8004cf0:	200a      	movs	r0, #10
 8004cf2:	f7fc fced 	bl	80016d0 <LCD_DrawRectangle>
		key = NOKEY;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	73fb      	strb	r3, [r7, #15]
		break;
 8004cfa:	e08e      	b.n	8004e1a <getChooseMainMenu+0x2b6>
	case DOWN:
		byRowTemp++;
 8004cfc:	4b4b      	ldr	r3, [pc, #300]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	3301      	adds	r3, #1
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	4b49      	ldr	r3, [pc, #292]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004d06:	701a      	strb	r2, [r3, #0]
		if(byRowTemp == byNumOfRows)
 8004d08:	4b48      	ldr	r3, [pc, #288]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	79fa      	ldrb	r2, [r7, #7]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d11a      	bne.n	8004d48 <getChooseMainMenu+0x1e4>
		{
			byRowTemp = 0;
 8004d12:	4b46      	ldr	r3, [pc, #280]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
			LCD_SetColorPoint(CYAN);
 8004d18:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8004d1c:	f7fe f878 	bl	8002e10 <LCD_SetColorPoint>
			LCD_DrawRectangle(10,cursorOfOptionBox[byNumOfRows-1],310,cursorOfOptionBox[byNumOfRows-1]+bySizeOfRow);
 8004d20:	79fb      	ldrb	r3, [r7, #7]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	4a3f      	ldr	r2, [pc, #252]	; (8004e24 <getChooseMainMenu+0x2c0>)
 8004d26:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004d2a:	79fb      	ldrb	r3, [r7, #7]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	4a3d      	ldr	r2, [pc, #244]	; (8004e24 <getChooseMainMenu+0x2c0>)
 8004d30:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004d34:	79bb      	ldrb	r3, [r7, #6]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	4413      	add	r3, r2
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f44f 729b 	mov.w	r2, #310	; 0x136
 8004d40:	200a      	movs	r0, #10
 8004d42:	f7fc fcc5 	bl	80016d0 <LCD_DrawRectangle>
 8004d46:	e018      	b.n	8004d7a <getChooseMainMenu+0x216>
		}else
		{
			LCD_SetColorPoint(CYAN);
 8004d48:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8004d4c:	f7fe f860 	bl	8002e10 <LCD_SetColorPoint>
			LCD_DrawRectangle(10,cursorOfOptionBox[byRowTemp-1],310,cursorOfOptionBox[byRowTemp-1]+bySizeOfRow);
 8004d50:	4b36      	ldr	r3, [pc, #216]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	3b01      	subs	r3, #1
 8004d56:	4a33      	ldr	r2, [pc, #204]	; (8004e24 <getChooseMainMenu+0x2c0>)
 8004d58:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004d5c:	4b33      	ldr	r3, [pc, #204]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	4a30      	ldr	r2, [pc, #192]	; (8004e24 <getChooseMainMenu+0x2c0>)
 8004d64:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004d68:	79bb      	ldrb	r3, [r7, #6]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	f44f 729b 	mov.w	r2, #310	; 0x136
 8004d74:	200a      	movs	r0, #10
 8004d76:	f7fc fcab 	bl	80016d0 <LCD_DrawRectangle>
		}
		LCD_DrawRectangle(10,cursorOfOptionBox[byRowTemp],310,cursorOfOptionBox[byRowTemp]+bySizeOfRow);
 8004d7a:	4b2c      	ldr	r3, [pc, #176]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	4b28      	ldr	r3, [pc, #160]	; (8004e24 <getChooseMainMenu+0x2c0>)
 8004d82:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8004d86:	4b29      	ldr	r3, [pc, #164]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	4b25      	ldr	r3, [pc, #148]	; (8004e24 <getChooseMainMenu+0x2c0>)
 8004d8e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004d92:	79bb      	ldrb	r3, [r7, #6]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	4413      	add	r3, r2
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	f44f 729b 	mov.w	r2, #310	; 0x136
 8004d9e:	200a      	movs	r0, #10
 8004da0:	f7fc fc96 	bl	80016d0 <LCD_DrawRectangle>
		key = NOKEY;
 8004da4:	2300      	movs	r3, #0
 8004da6:	73fb      	strb	r3, [r7, #15]
		break;
 8004da8:	e037      	b.n	8004e1a <getChooseMainMenu+0x2b6>
	case SELECT:
		//lcdClear();
		LCD_Fill(10, cursorOfOptionBox[byRowTemp], 310, cursorOfOptionBox[byRowTemp], RED);
 8004daa:	4b20      	ldr	r3, [pc, #128]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	4b1c      	ldr	r3, [pc, #112]	; (8004e24 <getChooseMainMenu+0x2c0>)
 8004db2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8004db6:	4b1d      	ldr	r3, [pc, #116]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <getChooseMainMenu+0x2c0>)
 8004dbe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004dc2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004dc6:	9200      	str	r2, [sp, #0]
 8004dc8:	f44f 729b 	mov.w	r2, #310	; 0x136
 8004dcc:	200a      	movs	r0, #10
 8004dce:	f7fc fbaf 	bl	8001530 <LCD_Fill>
		LCD_Clear(WHITE);
 8004dd2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004dd6:	f7fe f845 	bl	8002e64 <LCD_Clear>
		//Print Titel
		LCD_ShowTitle(bySizeOfRow, WHITE, BLUE, (u8*)pStrInterface[byRowTemp+1], 16, 1);
 8004dda:	79bb      	ldrb	r3, [r7, #6]
 8004ddc:	b298      	uxth	r0, r3
 8004dde:	4b13      	ldr	r3, [pc, #76]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	4613      	mov	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	461a      	mov	r2, r3
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	4413      	add	r3, r2
 8004df2:	2201      	movs	r2, #1
 8004df4:	9201      	str	r2, [sp, #4]
 8004df6:	2210      	movs	r2, #16
 8004df8:	9200      	str	r2, [sp, #0]
 8004dfa:	221f      	movs	r2, #31
 8004dfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e00:	f7fc feca 	bl	8001b98 <LCD_ShowTitle>
		key = NOKEY;
 8004e04:	2300      	movs	r3, #0
 8004e06:	73fb      	strb	r3, [r7, #15]
		byFlag = 0;
 8004e08:	4b07      	ldr	r3, [pc, #28]	; (8004e28 <getChooseMainMenu+0x2c4>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	701a      	strb	r2, [r3, #0]
		byRow = byRowTemp+1;
 8004e0e:	4b07      	ldr	r3, [pc, #28]	; (8004e2c <getChooseMainMenu+0x2c8>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	3301      	adds	r3, #1
 8004e14:	73bb      	strb	r3, [r7, #14]
		break;
 8004e16:	e000      	b.n	8004e1a <getChooseMainMenu+0x2b6>
	default:
		break;
 8004e18:	bf00      	nop
	}
	return byRow;
 8004e1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd90      	pop	{r4, r7, pc}
 8004e24:	20000134 	.word	0x20000134
 8004e28:	20000148 	.word	0x20000148
 8004e2c:	20000149 	.word	0x20000149

08004e30 <getChooseInformation>:
Action_e getChooseInformation(uint8_t stateRestart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af04      	add	r7, sp, #16
 8004e36:	4603      	mov	r3, r0
 8004e38:	71fb      	strb	r3, [r7, #7]
	Action_e action = NONE_ACTION;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	73fb      	strb	r3, [r7, #15]
	const u16 Xs = 10;
 8004e3e:	230a      	movs	r3, #10
 8004e40:	81bb      	strh	r3, [r7, #12]
	const u16 Y1 = 180;
 8004e42:	23b4      	movs	r3, #180	; 0xb4
 8004e44:	817b      	strh	r3, [r7, #10]
	const u16 Y2 = 210;
 8004e46:	23d2      	movs	r3, #210	; 0xd2
 8004e48:	813b      	strh	r3, [r7, #8]

	static u8 Row = 0,flag = 0;
	ValueKey_e key = NOKEY ;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	73bb      	strb	r3, [r7, #14]

	if(stateRestart == 0)
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d12e      	bne.n	8004eb2 <getChooseInformation+0x82>
	{

		if(flag == 0)
 8004e54:	4b8e      	ldr	r3, [pc, #568]	; (8005090 <getChooseInformation+0x260>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d11d      	bne.n	8004e98 <getChooseInformation+0x68>
		{
			LCD_ShowOption(20, Y2, BLACK, CYAN, (u8*)"RETURN", 16, 1);
 8004e5c:	8939      	ldrh	r1, [r7, #8]
 8004e5e:	2301      	movs	r3, #1
 8004e60:	9302      	str	r3, [sp, #8]
 8004e62:	2310      	movs	r3, #16
 8004e64:	9301      	str	r3, [sp, #4]
 8004e66:	4b8b      	ldr	r3, [pc, #556]	; (8005094 <getChooseInformation+0x264>)
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8004e6e:	2200      	movs	r2, #0
 8004e70:	2014      	movs	r0, #20
 8004e72:	f7fc fec4 	bl	8001bfe <LCD_ShowOption>
			LCD_DrawRectangle(Xs,Y2,310,Y2+20);
 8004e76:	893b      	ldrh	r3, [r7, #8]
 8004e78:	3314      	adds	r3, #20
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	8939      	ldrh	r1, [r7, #8]
 8004e7e:	89b8      	ldrh	r0, [r7, #12]
 8004e80:	f44f 729b 	mov.w	r2, #310	; 0x136
 8004e84:	f7fc fc24 	bl	80016d0 <LCD_DrawRectangle>
			flag = 1;
 8004e88:	4b81      	ldr	r3, [pc, #516]	; (8005090 <getChooseInformation+0x260>)
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	701a      	strb	r2, [r3, #0]
		}
		while(key == NOKEY)
 8004e8e:	e003      	b.n	8004e98 <getChooseInformation+0x68>
		{
			key = processEventButton();
 8004e90:	f7fb fd88 	bl	80009a4 <processEventButton>
 8004e94:	4603      	mov	r3, r0
 8004e96:	73bb      	strb	r3, [r7, #14]
		while(key == NOKEY)
 8004e98:	7bbb      	ldrb	r3, [r7, #14]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0f8      	beq.n	8004e90 <getChooseInformation+0x60>
		}
		if(key == SELECT)
 8004e9e:	7bbb      	ldrb	r3, [r7, #14]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	f040 80ef 	bne.w	8005084 <getChooseInformation+0x254>
		{
			action = RETURN_ACTION;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	73fb      	strb	r3, [r7, #15]
			flag = 0;
 8004eaa:	4b79      	ldr	r3, [pc, #484]	; (8005090 <getChooseInformation+0x260>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	701a      	strb	r2, [r3, #0]
 8004eb0:	e0e8      	b.n	8005084 <getChooseInformation+0x254>
		}
	}else
	{

		if(flag == 0)
 8004eb2:	4b77      	ldr	r3, [pc, #476]	; (8005090 <getChooseInformation+0x260>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d12c      	bne.n	8004f14 <getChooseInformation+0xe4>
		{
			LCD_ShowOption(20, Y1, BLACK, CYAN, (u8*)"RETURN", 16, 1);
 8004eba:	8979      	ldrh	r1, [r7, #10]
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	9302      	str	r3, [sp, #8]
 8004ec0:	2310      	movs	r3, #16
 8004ec2:	9301      	str	r3, [sp, #4]
 8004ec4:	4b73      	ldr	r3, [pc, #460]	; (8005094 <getChooseInformation+0x264>)
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8004ecc:	2200      	movs	r2, #0
 8004ece:	2014      	movs	r0, #20
 8004ed0:	f7fc fe95 	bl	8001bfe <LCD_ShowOption>
			LCD_ShowOption(20, Y2, BLACK, CYAN, (u8*)"RESTART", 16, 1);
 8004ed4:	8939      	ldrh	r1, [r7, #8]
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	9302      	str	r3, [sp, #8]
 8004eda:	2310      	movs	r3, #16
 8004edc:	9301      	str	r3, [sp, #4]
 8004ede:	4b6e      	ldr	r3, [pc, #440]	; (8005098 <getChooseInformation+0x268>)
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2014      	movs	r0, #20
 8004eea:	f7fc fe88 	bl	8001bfe <LCD_ShowOption>

			LCD_DrawRectangle(Xs,Y1,320-Xs,Y1+20);
 8004eee:	89bb      	ldrh	r3, [r7, #12]
 8004ef0:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	897b      	ldrh	r3, [r7, #10]
 8004ef8:	3314      	adds	r3, #20
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	8979      	ldrh	r1, [r7, #10]
 8004efe:	89b8      	ldrh	r0, [r7, #12]
 8004f00:	f7fc fbe6 	bl	80016d0 <LCD_DrawRectangle>
			flag = 1;
 8004f04:	4b62      	ldr	r3, [pc, #392]	; (8005090 <getChooseInformation+0x260>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	701a      	strb	r2, [r3, #0]
		}
		while(key == NOKEY)
 8004f0a:	e003      	b.n	8004f14 <getChooseInformation+0xe4>
		{
			key = processEventButton();
 8004f0c:	f7fb fd4a 	bl	80009a4 <processEventButton>
 8004f10:	4603      	mov	r3, r0
 8004f12:	73bb      	strb	r3, [r7, #14]
		while(key == NOKEY)
 8004f14:	7bbb      	ldrb	r3, [r7, #14]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0f8      	beq.n	8004f0c <getChooseInformation+0xdc>
		}
		switch(key)
 8004f1a:	7bbb      	ldrb	r3, [r7, #14]
 8004f1c:	2b09      	cmp	r3, #9
 8004f1e:	d051      	beq.n	8004fc4 <getChooseInformation+0x194>
 8004f20:	2b09      	cmp	r3, #9
 8004f22:	f300 80ae 	bgt.w	8005082 <getChooseInformation+0x252>
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	f000 8095 	beq.w	8005056 <getChooseInformation+0x226>
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	f040 80a8 	bne.w	8005082 <getChooseInformation+0x252>
			{
			case UP:
				Row--;
 8004f32:	4b5a      	ldr	r3, [pc, #360]	; (800509c <getChooseInformation+0x26c>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	4b58      	ldr	r3, [pc, #352]	; (800509c <getChooseInformation+0x26c>)
 8004f3c:	701a      	strb	r2, [r3, #0]
				if(Row == 255)
 8004f3e:	4b57      	ldr	r3, [pc, #348]	; (800509c <getChooseInformation+0x26c>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2bff      	cmp	r3, #255	; 0xff
 8004f44:	d102      	bne.n	8004f4c <getChooseInformation+0x11c>
				{
					Row = 1;
 8004f46:	4b55      	ldr	r3, [pc, #340]	; (800509c <getChooseInformation+0x26c>)
 8004f48:	2201      	movs	r2, #1
 8004f4a:	701a      	strb	r2, [r3, #0]
				}
				if(Row == 1)
 8004f4c:	4b53      	ldr	r3, [pc, #332]	; (800509c <getChooseInformation+0x26c>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d11a      	bne.n	8004f8a <getChooseInformation+0x15a>
				{
					LCD_SetColorPoint(CYAN);
 8004f54:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8004f58:	f7fd ff5a 	bl	8002e10 <LCD_SetColorPoint>
					LCD_DrawRectangle(Xs,Y1,320-Xs,Y1+20);
 8004f5c:	89bb      	ldrh	r3, [r7, #12]
 8004f5e:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	897b      	ldrh	r3, [r7, #10]
 8004f66:	3314      	adds	r3, #20
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	8979      	ldrh	r1, [r7, #10]
 8004f6c:	89b8      	ldrh	r0, [r7, #12]
 8004f6e:	f7fc fbaf 	bl	80016d0 <LCD_DrawRectangle>
					LCD_DrawRectangle(Xs,Y2,320-Xs,Y2+20);
 8004f72:	89bb      	ldrh	r3, [r7, #12]
 8004f74:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	893b      	ldrh	r3, [r7, #8]
 8004f7c:	3314      	adds	r3, #20
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	8939      	ldrh	r1, [r7, #8]
 8004f82:	89b8      	ldrh	r0, [r7, #12]
 8004f84:	f7fc fba4 	bl	80016d0 <LCD_DrawRectangle>
 8004f88:	e019      	b.n	8004fbe <getChooseInformation+0x18e>
				}else
				{
					LCD_SetColorPoint(CYAN);
 8004f8a:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8004f8e:	f7fd ff3f 	bl	8002e10 <LCD_SetColorPoint>
					LCD_DrawRectangle(Xs,Y2,320-Xs,Y2+20);
 8004f92:	89bb      	ldrh	r3, [r7, #12]
 8004f94:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	893b      	ldrh	r3, [r7, #8]
 8004f9c:	3314      	adds	r3, #20
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	8939      	ldrh	r1, [r7, #8]
 8004fa2:	89b8      	ldrh	r0, [r7, #12]
 8004fa4:	f7fc fb94 	bl	80016d0 <LCD_DrawRectangle>
					LCD_DrawRectangle(Xs,Y1,320-Xs,Y1+20);
 8004fa8:	89bb      	ldrh	r3, [r7, #12]
 8004faa:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	897b      	ldrh	r3, [r7, #10]
 8004fb2:	3314      	adds	r3, #20
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	8979      	ldrh	r1, [r7, #10]
 8004fb8:	89b8      	ldrh	r0, [r7, #12]
 8004fba:	f7fc fb89 	bl	80016d0 <LCD_DrawRectangle>
				}
				key = NOKEY;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	73bb      	strb	r3, [r7, #14]
				break;
 8004fc2:	e05f      	b.n	8005084 <getChooseInformation+0x254>
			case DOWN:
				Row++;
 8004fc4:	4b35      	ldr	r3, [pc, #212]	; (800509c <getChooseInformation+0x26c>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	4b33      	ldr	r3, [pc, #204]	; (800509c <getChooseInformation+0x26c>)
 8004fce:	701a      	strb	r2, [r3, #0]
				if(Row == 2)
 8004fd0:	4b32      	ldr	r3, [pc, #200]	; (800509c <getChooseInformation+0x26c>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d102      	bne.n	8004fde <getChooseInformation+0x1ae>
				{
					Row = 0;
 8004fd8:	4b30      	ldr	r3, [pc, #192]	; (800509c <getChooseInformation+0x26c>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	701a      	strb	r2, [r3, #0]

				}
				if(Row == 1)
 8004fde:	4b2f      	ldr	r3, [pc, #188]	; (800509c <getChooseInformation+0x26c>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d11a      	bne.n	800501c <getChooseInformation+0x1ec>
				{
					LCD_SetColorPoint(CYAN);
 8004fe6:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8004fea:	f7fd ff11 	bl	8002e10 <LCD_SetColorPoint>
					LCD_DrawRectangle(Xs,Y1,320-Xs,Y1+20);
 8004fee:	89bb      	ldrh	r3, [r7, #12]
 8004ff0:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	897b      	ldrh	r3, [r7, #10]
 8004ff8:	3314      	adds	r3, #20
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	8979      	ldrh	r1, [r7, #10]
 8004ffe:	89b8      	ldrh	r0, [r7, #12]
 8005000:	f7fc fb66 	bl	80016d0 <LCD_DrawRectangle>
					LCD_DrawRectangle(Xs,Y2,320-Xs,Y2+20);
 8005004:	89bb      	ldrh	r3, [r7, #12]
 8005006:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800500a:	b29a      	uxth	r2, r3
 800500c:	893b      	ldrh	r3, [r7, #8]
 800500e:	3314      	adds	r3, #20
 8005010:	b29b      	uxth	r3, r3
 8005012:	8939      	ldrh	r1, [r7, #8]
 8005014:	89b8      	ldrh	r0, [r7, #12]
 8005016:	f7fc fb5b 	bl	80016d0 <LCD_DrawRectangle>
 800501a:	e019      	b.n	8005050 <getChooseInformation+0x220>
				}else
				{
					LCD_SetColorPoint(CYAN);
 800501c:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8005020:	f7fd fef6 	bl	8002e10 <LCD_SetColorPoint>
					LCD_DrawRectangle(Xs,Y2,320-Xs,Y2+20);
 8005024:	89bb      	ldrh	r3, [r7, #12]
 8005026:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800502a:	b29a      	uxth	r2, r3
 800502c:	893b      	ldrh	r3, [r7, #8]
 800502e:	3314      	adds	r3, #20
 8005030:	b29b      	uxth	r3, r3
 8005032:	8939      	ldrh	r1, [r7, #8]
 8005034:	89b8      	ldrh	r0, [r7, #12]
 8005036:	f7fc fb4b 	bl	80016d0 <LCD_DrawRectangle>
					LCD_DrawRectangle(Xs,Y1,320-Xs,Y1+20);
 800503a:	89bb      	ldrh	r3, [r7, #12]
 800503c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8005040:	b29a      	uxth	r2, r3
 8005042:	897b      	ldrh	r3, [r7, #10]
 8005044:	3314      	adds	r3, #20
 8005046:	b29b      	uxth	r3, r3
 8005048:	8979      	ldrh	r1, [r7, #10]
 800504a:	89b8      	ldrh	r0, [r7, #12]
 800504c:	f7fc fb40 	bl	80016d0 <LCD_DrawRectangle>
				}
				key = NOKEY;
 8005050:	2300      	movs	r3, #0
 8005052:	73bb      	strb	r3, [r7, #14]
				break;
 8005054:	e016      	b.n	8005084 <getChooseInformation+0x254>
			case SELECT:
				if(Row == 0)
 8005056:	4b11      	ldr	r3, [pc, #68]	; (800509c <getChooseInformation+0x26c>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d102      	bne.n	8005064 <getChooseInformation+0x234>
				{
					action = RETURN_ACTION;
 800505e:	2301      	movs	r3, #1
 8005060:	73fb      	strb	r3, [r7, #15]
 8005062:	e001      	b.n	8005068 <getChooseInformation+0x238>
				}else
				{
					action = SELECT_ACTION;
 8005064:	2302      	movs	r3, #2
 8005066:	73fb      	strb	r3, [r7, #15]
				}

				flag = 0;
 8005068:	4b09      	ldr	r3, [pc, #36]	; (8005090 <getChooseInformation+0x260>)
 800506a:	2200      	movs	r2, #0
 800506c:	701a      	strb	r2, [r3, #0]
				Row = 0;
 800506e:	4b0b      	ldr	r3, [pc, #44]	; (800509c <getChooseInformation+0x26c>)
 8005070:	2200      	movs	r2, #0
 8005072:	701a      	strb	r2, [r3, #0]
				//lcdClear();
				LCD_Clear(WHITE);
 8005074:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005078:	f7fd fef4 	bl	8002e64 <LCD_Clear>
				//Print Titel
				key = NOKEY;
 800507c:	2300      	movs	r3, #0
 800507e:	73bb      	strb	r3, [r7, #14]
				break;
 8005080:	e000      	b.n	8005084 <getChooseInformation+0x254>
			default:
				break;
 8005082:	bf00      	nop
			}
	}


	return action;
 8005084:	7bfb      	ldrb	r3, [r7, #15]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	2000014a 	.word	0x2000014a
 8005094:	080060b0 	.word	0x080060b0
 8005098:	080060b8 	.word	0x080060b8
 800509c:	2000014b 	.word	0x2000014b

080050a0 <getChoosePrepare>:
Action_e getChoosePrepare(void)
{
 80050a0:	b590      	push	{r4, r7, lr}
 80050a2:	b08d      	sub	sp, #52	; 0x34
 80050a4:	af02      	add	r7, sp, #8
	Action_e action = NONE_ACTION;
 80050a6:	2300      	movs	r3, #0
 80050a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	u16 widthButton = 20;
 80050ac:	2314      	movs	r3, #20
 80050ae:	83fb      	strh	r3, [r7, #30]
	u16 heigthButton = 80;
 80050b0:	2350      	movs	r3, #80	; 0x50
 80050b2:	83bb      	strh	r3, [r7, #28]

	u16 XsButtonValve = 230;
 80050b4:	23e6      	movs	r3, #230	; 0xe6
 80050b6:	837b      	strh	r3, [r7, #26]
	u16 XeButtonValve = XsButtonValve + heigthButton;
 80050b8:	8b7a      	ldrh	r2, [r7, #26]
 80050ba:	8bbb      	ldrh	r3, [r7, #28]
 80050bc:	4413      	add	r3, r2
 80050be:	833b      	strh	r3, [r7, #24]
	u16 YsButtonValve = 30;
 80050c0:	231e      	movs	r3, #30
 80050c2:	82fb      	strh	r3, [r7, #22]
	u16 YeButtonValve = YsButtonValve + widthButton;
 80050c4:	8afa      	ldrh	r2, [r7, #22]
 80050c6:	8bfb      	ldrh	r3, [r7, #30]
 80050c8:	4413      	add	r3, r2
 80050ca:	82bb      	strh	r3, [r7, #20]

	u16 XsButtonReturn = XsButtonValve;
 80050cc:	8b7b      	ldrh	r3, [r7, #26]
 80050ce:	827b      	strh	r3, [r7, #18]
	u16 XeButtonReturn = XsButtonReturn + heigthButton;
 80050d0:	8a7a      	ldrh	r2, [r7, #18]
 80050d2:	8bbb      	ldrh	r3, [r7, #28]
 80050d4:	4413      	add	r3, r2
 80050d6:	823b      	strh	r3, [r7, #16]
	u16 YsButtonReturn = YeButtonValve  + 20;
 80050d8:	8abb      	ldrh	r3, [r7, #20]
 80050da:	3314      	adds	r3, #20
 80050dc:	81fb      	strh	r3, [r7, #14]
	u16 YeButtonReturn = YsButtonReturn + widthButton;
 80050de:	89fa      	ldrh	r2, [r7, #14]
 80050e0:	8bfb      	ldrh	r3, [r7, #30]
 80050e2:	4413      	add	r3, r2
 80050e4:	81bb      	strh	r3, [r7, #12]


	static u8 flag = 0;
	static u8 Row = 0;
	key_t key = NOKEY;
 80050e6:	2300      	movs	r3, #0
 80050e8:	623b      	str	r3, [r7, #32]

	static u16 xCurrent,xProHigh,xProLow;
	static eventProximitySensor_e eventProximity;
	static u8 stateCurrentSS = 0;

	u16 yCurrent = 80;
 80050ea:	2350      	movs	r3, #80	; 0x50
 80050ec:	817b      	strh	r3, [r7, #10]
	u16 yProHigh = 130;
 80050ee:	2382      	movs	r3, #130	; 0x82
 80050f0:	813b      	strh	r3, [r7, #8]
	u16 yProLow = 180;
 80050f2:	23b4      	movs	r3, #180	; 0xb4
 80050f4:	80fb      	strh	r3, [r7, #6]
	u16 rCircle = 20;
 80050f6:	2314      	movs	r3, #20
 80050f8:	80bb      	strh	r3, [r7, #4]
	if(flag == 0)
 80050fa:	4b92      	ldr	r3, [pc, #584]	; (8005344 <getChoosePrepare+0x2a4>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f040 80b4 	bne.w	800526c <getChoosePrepare+0x1cc>
	{
		xCurrent = LCD_ShowDevice(20, yCurrent, rCircle, (u8*)"Current: ", 0);
 8005104:	88ba      	ldrh	r2, [r7, #4]
 8005106:	8979      	ldrh	r1, [r7, #10]
 8005108:	2300      	movs	r3, #0
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	4b8e      	ldr	r3, [pc, #568]	; (8005348 <getChoosePrepare+0x2a8>)
 800510e:	2014      	movs	r0, #20
 8005110:	f7fd f85c 	bl	80021cc <LCD_ShowDevice>
 8005114:	4603      	mov	r3, r0
 8005116:	461a      	mov	r2, r3
 8005118:	4b8c      	ldr	r3, [pc, #560]	; (800534c <getChoosePrepare+0x2ac>)
 800511a:	801a      	strh	r2, [r3, #0]
		xProHigh = LCD_ShowDevice(20, yProHigh, rCircle, (u8*)"Proximity High: ", 0);
 800511c:	88ba      	ldrh	r2, [r7, #4]
 800511e:	8939      	ldrh	r1, [r7, #8]
 8005120:	2300      	movs	r3, #0
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	4b8a      	ldr	r3, [pc, #552]	; (8005350 <getChoosePrepare+0x2b0>)
 8005126:	2014      	movs	r0, #20
 8005128:	f7fd f850 	bl	80021cc <LCD_ShowDevice>
 800512c:	4603      	mov	r3, r0
 800512e:	461a      	mov	r2, r3
 8005130:	4b88      	ldr	r3, [pc, #544]	; (8005354 <getChoosePrepare+0x2b4>)
 8005132:	801a      	strh	r2, [r3, #0]
		xProLow = LCD_ShowDevice(20, yProLow, rCircle, (u8*)"Proximity Low: ", 0);
 8005134:	88ba      	ldrh	r2, [r7, #4]
 8005136:	88f9      	ldrh	r1, [r7, #6]
 8005138:	2300      	movs	r3, #0
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	4b86      	ldr	r3, [pc, #536]	; (8005358 <getChoosePrepare+0x2b8>)
 800513e:	2014      	movs	r0, #20
 8005140:	f7fd f844 	bl	80021cc <LCD_ShowDevice>
 8005144:	4603      	mov	r3, r0
 8005146:	461a      	mov	r2, r3
 8005148:	4b84      	ldr	r3, [pc, #528]	; (800535c <getChoosePrepare+0x2bc>)
 800514a:	801a      	strh	r2, [r3, #0]

		LCD_ShowButton(XsButtonValve,YsButtonValve,heigthButton,widthButton,(u8*)"VALVE",GetStateValve());
 800514c:	f000 fd14 	bl	8005b78 <GetStateValve>
 8005150:	4603      	mov	r3, r0
 8005152:	461c      	mov	r4, r3
 8005154:	8bfb      	ldrh	r3, [r7, #30]
 8005156:	8bba      	ldrh	r2, [r7, #28]
 8005158:	8af9      	ldrh	r1, [r7, #22]
 800515a:	8b78      	ldrh	r0, [r7, #26]
 800515c:	9401      	str	r4, [sp, #4]
 800515e:	4c80      	ldr	r4, [pc, #512]	; (8005360 <getChoosePrepare+0x2c0>)
 8005160:	9400      	str	r4, [sp, #0]
 8005162:	f7fc ffc3 	bl	80020ec <LCD_ShowButton>
		LCD_ShowButton(XsButtonReturn,YsButtonReturn,heigthButton,widthButton,(u8*)"RETURN",1);
 8005166:	8bfb      	ldrh	r3, [r7, #30]
 8005168:	8bba      	ldrh	r2, [r7, #28]
 800516a:	89f9      	ldrh	r1, [r7, #14]
 800516c:	8a78      	ldrh	r0, [r7, #18]
 800516e:	2401      	movs	r4, #1
 8005170:	9401      	str	r4, [sp, #4]
 8005172:	4c7c      	ldr	r4, [pc, #496]	; (8005364 <getChoosePrepare+0x2c4>)
 8005174:	9400      	str	r4, [sp, #0]
 8005176:	f7fc ffb9 	bl	80020ec <LCD_ShowButton>

		LCD_DrawRectangle(XsButtonValve-1,YsButtonValve-1,XeButtonValve+1,YeButtonValve+1);
 800517a:	8b7b      	ldrh	r3, [r7, #26]
 800517c:	3b01      	subs	r3, #1
 800517e:	b298      	uxth	r0, r3
 8005180:	8afb      	ldrh	r3, [r7, #22]
 8005182:	3b01      	subs	r3, #1
 8005184:	b299      	uxth	r1, r3
 8005186:	8b3b      	ldrh	r3, [r7, #24]
 8005188:	3301      	adds	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	8abb      	ldrh	r3, [r7, #20]
 800518e:	3301      	adds	r3, #1
 8005190:	b29b      	uxth	r3, r3
 8005192:	f7fc fa9d 	bl	80016d0 <LCD_DrawRectangle>
		flag = 1;
 8005196:	4b6b      	ldr	r3, [pc, #428]	; (8005344 <getChoosePrepare+0x2a4>)
 8005198:	2201      	movs	r2, #1
 800519a:	701a      	strb	r2, [r3, #0]
	}
	while(key == NOKEY)
 800519c:	e066      	b.n	800526c <getChoosePrepare+0x1cc>
	{
		key = processEventButton();
 800519e:	f7fb fc01 	bl	80009a4 <processEventButton>
 80051a2:	4603      	mov	r3, r0
 80051a4:	623b      	str	r3, [r7, #32]

		//Update State Sensor
			//Current-Sensor
		if(stateCurrentSS != currentSensorScan())
 80051a6:	f000 fa25 	bl	80055f4 <currentSensorScan>
 80051aa:	4603      	mov	r3, r0
 80051ac:	461a      	mov	r2, r3
 80051ae:	4b6e      	ldr	r3, [pc, #440]	; (8005368 <getChoosePrepare+0x2c8>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d018      	beq.n	80051e8 <getChoosePrepare+0x148>
		{
			stateCurrentSS = currentSensorScan();
 80051b6:	f000 fa1d 	bl	80055f4 <currentSensorScan>
 80051ba:	4603      	mov	r3, r0
 80051bc:	461a      	mov	r2, r3
 80051be:	4b6a      	ldr	r3, [pc, #424]	; (8005368 <getChoosePrepare+0x2c8>)
 80051c0:	701a      	strb	r2, [r3, #0]
			if(stateCurrentSS == 0)
 80051c2:	4b69      	ldr	r3, [pc, #420]	; (8005368 <getChoosePrepare+0x2c8>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d107      	bne.n	80051da <getChoosePrepare+0x13a>
			{
				LCD_UpdateDeviceState(xCurrent, yCurrent, rCircle, 0);
 80051ca:	4b60      	ldr	r3, [pc, #384]	; (800534c <getChoosePrepare+0x2ac>)
 80051cc:	8818      	ldrh	r0, [r3, #0]
 80051ce:	88ba      	ldrh	r2, [r7, #4]
 80051d0:	8979      	ldrh	r1, [r7, #10]
 80051d2:	2300      	movs	r3, #0
 80051d4:	f7fd f890 	bl	80022f8 <LCD_UpdateDeviceState>
 80051d8:	e006      	b.n	80051e8 <getChoosePrepare+0x148>
			}else
			{
				LCD_UpdateDeviceState(xCurrent, yCurrent, rCircle, 1);
 80051da:	4b5c      	ldr	r3, [pc, #368]	; (800534c <getChoosePrepare+0x2ac>)
 80051dc:	8818      	ldrh	r0, [r3, #0]
 80051de:	88ba      	ldrh	r2, [r7, #4]
 80051e0:	8979      	ldrh	r1, [r7, #10]
 80051e2:	2301      	movs	r3, #1
 80051e4:	f7fd f888 	bl	80022f8 <LCD_UpdateDeviceState>
			}
		}
		if(eventProximity !=proximitySensorScan())
 80051e8:	f000 fa3a 	bl	8005660 <proximitySensorScan>
 80051ec:	4603      	mov	r3, r0
 80051ee:	461a      	mov	r2, r3
 80051f0:	4b5e      	ldr	r3, [pc, #376]	; (800536c <getChoosePrepare+0x2cc>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d039      	beq.n	800526c <getChoosePrepare+0x1cc>
		{
			eventProximity = proximitySensorScan();
 80051f8:	f000 fa32 	bl	8005660 <proximitySensorScan>
 80051fc:	4603      	mov	r3, r0
 80051fe:	461a      	mov	r2, r3
 8005200:	4b5a      	ldr	r3, [pc, #360]	; (800536c <getChoosePrepare+0x2cc>)
 8005202:	701a      	strb	r2, [r3, #0]
			if(eventProximity == HIGH_LOCATION)
 8005204:	4b59      	ldr	r3, [pc, #356]	; (800536c <getChoosePrepare+0x2cc>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d10e      	bne.n	800522a <getChoosePrepare+0x18a>
			{
				LCD_UpdateDeviceState(xProHigh, yProHigh, rCircle, 1);
 800520c:	4b51      	ldr	r3, [pc, #324]	; (8005354 <getChoosePrepare+0x2b4>)
 800520e:	8818      	ldrh	r0, [r3, #0]
 8005210:	88ba      	ldrh	r2, [r7, #4]
 8005212:	8939      	ldrh	r1, [r7, #8]
 8005214:	2301      	movs	r3, #1
 8005216:	f7fd f86f 	bl	80022f8 <LCD_UpdateDeviceState>
				LCD_UpdateDeviceState(xProLow, yProLow, rCircle, 0);
 800521a:	4b50      	ldr	r3, [pc, #320]	; (800535c <getChoosePrepare+0x2bc>)
 800521c:	8818      	ldrh	r0, [r3, #0]
 800521e:	88ba      	ldrh	r2, [r7, #4]
 8005220:	88f9      	ldrh	r1, [r7, #6]
 8005222:	2300      	movs	r3, #0
 8005224:	f7fd f868 	bl	80022f8 <LCD_UpdateDeviceState>
 8005228:	e020      	b.n	800526c <getChoosePrepare+0x1cc>
			}else if(eventProximity == LOW_LOCATION)
 800522a:	4b50      	ldr	r3, [pc, #320]	; (800536c <getChoosePrepare+0x2cc>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d10e      	bne.n	8005250 <getChoosePrepare+0x1b0>
			{
				LCD_UpdateDeviceState(xProHigh, yProHigh, rCircle, 0);
 8005232:	4b48      	ldr	r3, [pc, #288]	; (8005354 <getChoosePrepare+0x2b4>)
 8005234:	8818      	ldrh	r0, [r3, #0]
 8005236:	88ba      	ldrh	r2, [r7, #4]
 8005238:	8939      	ldrh	r1, [r7, #8]
 800523a:	2300      	movs	r3, #0
 800523c:	f7fd f85c 	bl	80022f8 <LCD_UpdateDeviceState>
				LCD_UpdateDeviceState(xProLow, yProLow, rCircle, 1);
 8005240:	4b46      	ldr	r3, [pc, #280]	; (800535c <getChoosePrepare+0x2bc>)
 8005242:	8818      	ldrh	r0, [r3, #0]
 8005244:	88ba      	ldrh	r2, [r7, #4]
 8005246:	88f9      	ldrh	r1, [r7, #6]
 8005248:	2301      	movs	r3, #1
 800524a:	f7fd f855 	bl	80022f8 <LCD_UpdateDeviceState>
 800524e:	e00d      	b.n	800526c <getChoosePrepare+0x1cc>
			}else
			{
				LCD_UpdateDeviceState(xProHigh, yProHigh, rCircle, 0);
 8005250:	4b40      	ldr	r3, [pc, #256]	; (8005354 <getChoosePrepare+0x2b4>)
 8005252:	8818      	ldrh	r0, [r3, #0]
 8005254:	88ba      	ldrh	r2, [r7, #4]
 8005256:	8939      	ldrh	r1, [r7, #8]
 8005258:	2300      	movs	r3, #0
 800525a:	f7fd f84d 	bl	80022f8 <LCD_UpdateDeviceState>
				LCD_UpdateDeviceState(xProLow, yProLow, rCircle, 0);
 800525e:	4b3f      	ldr	r3, [pc, #252]	; (800535c <getChoosePrepare+0x2bc>)
 8005260:	8818      	ldrh	r0, [r3, #0]
 8005262:	88ba      	ldrh	r2, [r7, #4]
 8005264:	88f9      	ldrh	r1, [r7, #6]
 8005266:	2300      	movs	r3, #0
 8005268:	f7fd f846 	bl	80022f8 <LCD_UpdateDeviceState>
	while(key == NOKEY)
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d095      	beq.n	800519e <getChoosePrepare+0xfe>

			//Proximity-Sensor

	}
	u8 state;
	switch(key)
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	2b09      	cmp	r3, #9
 8005276:	d07d      	beq.n	8005374 <getChoosePrepare+0x2d4>
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	2b09      	cmp	r3, #9
 800527c:	f300 8108 	bgt.w	8005490 <getChoosePrepare+0x3f0>
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	2b01      	cmp	r3, #1
 8005284:	f000 80cf 	beq.w	8005426 <getChoosePrepare+0x386>
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	2b03      	cmp	r3, #3
 800528c:	f040 8100 	bne.w	8005490 <getChoosePrepare+0x3f0>
		{
		case UP:
			Row--;
 8005290:	4b37      	ldr	r3, [pc, #220]	; (8005370 <getChoosePrepare+0x2d0>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	3b01      	subs	r3, #1
 8005296:	b2da      	uxtb	r2, r3
 8005298:	4b35      	ldr	r3, [pc, #212]	; (8005370 <getChoosePrepare+0x2d0>)
 800529a:	701a      	strb	r2, [r3, #0]
			if(Row == 255)
 800529c:	4b34      	ldr	r3, [pc, #208]	; (8005370 <getChoosePrepare+0x2d0>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2bff      	cmp	r3, #255	; 0xff
 80052a2:	d102      	bne.n	80052aa <getChoosePrepare+0x20a>
			{
				Row = 1;
 80052a4:	4b32      	ldr	r3, [pc, #200]	; (8005370 <getChoosePrepare+0x2d0>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	701a      	strb	r2, [r3, #0]
			}
			if(Row == 1)
 80052aa:	4b31      	ldr	r3, [pc, #196]	; (8005370 <getChoosePrepare+0x2d0>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d120      	bne.n	80052f4 <getChoosePrepare+0x254>
			{
				LCD_SetColorPoint(CYAN);
 80052b2:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80052b6:	f7fd fdab 	bl	8002e10 <LCD_SetColorPoint>
				LCD_DrawRectangle(XsButtonValve-1,YsButtonValve-1,XeButtonValve+1,YeButtonValve+1);
 80052ba:	8b7b      	ldrh	r3, [r7, #26]
 80052bc:	3b01      	subs	r3, #1
 80052be:	b298      	uxth	r0, r3
 80052c0:	8afb      	ldrh	r3, [r7, #22]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	b299      	uxth	r1, r3
 80052c6:	8b3b      	ldrh	r3, [r7, #24]
 80052c8:	3301      	adds	r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	8abb      	ldrh	r3, [r7, #20]
 80052ce:	3301      	adds	r3, #1
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f7fc f9fd 	bl	80016d0 <LCD_DrawRectangle>
				LCD_DrawRectangle(XsButtonReturn-1,YsButtonReturn-1,XeButtonReturn+1,YeButtonReturn+1);
 80052d6:	8a7b      	ldrh	r3, [r7, #18]
 80052d8:	3b01      	subs	r3, #1
 80052da:	b298      	uxth	r0, r3
 80052dc:	89fb      	ldrh	r3, [r7, #14]
 80052de:	3b01      	subs	r3, #1
 80052e0:	b299      	uxth	r1, r3
 80052e2:	8a3b      	ldrh	r3, [r7, #16]
 80052e4:	3301      	adds	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	89bb      	ldrh	r3, [r7, #12]
 80052ea:	3301      	adds	r3, #1
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	f7fc f9ef 	bl	80016d0 <LCD_DrawRectangle>
 80052f2:	e023      	b.n	800533c <getChoosePrepare+0x29c>
			}else
			{
				LCD_SetColorPoint(CYAN);
 80052f4:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80052f8:	f7fd fd8a 	bl	8002e10 <LCD_SetColorPoint>
				LCD_SetColorPoint(CYAN);
 80052fc:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8005300:	f7fd fd86 	bl	8002e10 <LCD_SetColorPoint>
				LCD_DrawRectangle(XsButtonReturn-1,YsButtonReturn-1,XeButtonReturn+1,YeButtonReturn+1);
 8005304:	8a7b      	ldrh	r3, [r7, #18]
 8005306:	3b01      	subs	r3, #1
 8005308:	b298      	uxth	r0, r3
 800530a:	89fb      	ldrh	r3, [r7, #14]
 800530c:	3b01      	subs	r3, #1
 800530e:	b299      	uxth	r1, r3
 8005310:	8a3b      	ldrh	r3, [r7, #16]
 8005312:	3301      	adds	r3, #1
 8005314:	b29a      	uxth	r2, r3
 8005316:	89bb      	ldrh	r3, [r7, #12]
 8005318:	3301      	adds	r3, #1
 800531a:	b29b      	uxth	r3, r3
 800531c:	f7fc f9d8 	bl	80016d0 <LCD_DrawRectangle>
				LCD_DrawRectangle(XsButtonValve-1,YsButtonValve-1,XeButtonValve+1,YeButtonValve+1);
 8005320:	8b7b      	ldrh	r3, [r7, #26]
 8005322:	3b01      	subs	r3, #1
 8005324:	b298      	uxth	r0, r3
 8005326:	8afb      	ldrh	r3, [r7, #22]
 8005328:	3b01      	subs	r3, #1
 800532a:	b299      	uxth	r1, r3
 800532c:	8b3b      	ldrh	r3, [r7, #24]
 800532e:	3301      	adds	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	8abb      	ldrh	r3, [r7, #20]
 8005334:	3301      	adds	r3, #1
 8005336:	b29b      	uxth	r3, r3
 8005338:	f7fc f9ca 	bl	80016d0 <LCD_DrawRectangle>

			}
			key = NOKEY;
 800533c:	2300      	movs	r3, #0
 800533e:	623b      	str	r3, [r7, #32]
			break;
 8005340:	e0a7      	b.n	8005492 <getChoosePrepare+0x3f2>
 8005342:	bf00      	nop
 8005344:	2000014c 	.word	0x2000014c
 8005348:	080060c0 	.word	0x080060c0
 800534c:	2000014e 	.word	0x2000014e
 8005350:	080060cc 	.word	0x080060cc
 8005354:	20000150 	.word	0x20000150
 8005358:	080060e0 	.word	0x080060e0
 800535c:	20000152 	.word	0x20000152
 8005360:	080060f0 	.word	0x080060f0
 8005364:	080060b0 	.word	0x080060b0
 8005368:	20000154 	.word	0x20000154
 800536c:	20000155 	.word	0x20000155
 8005370:	20000156 	.word	0x20000156
		case DOWN:
			Row++;
 8005374:	4b4a      	ldr	r3, [pc, #296]	; (80054a0 <getChoosePrepare+0x400>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	3301      	adds	r3, #1
 800537a:	b2da      	uxtb	r2, r3
 800537c:	4b48      	ldr	r3, [pc, #288]	; (80054a0 <getChoosePrepare+0x400>)
 800537e:	701a      	strb	r2, [r3, #0]
			if(Row == 2)
 8005380:	4b47      	ldr	r3, [pc, #284]	; (80054a0 <getChoosePrepare+0x400>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b02      	cmp	r3, #2
 8005386:	d102      	bne.n	800538e <getChoosePrepare+0x2ee>
			{
				Row = 0;
 8005388:	4b45      	ldr	r3, [pc, #276]	; (80054a0 <getChoosePrepare+0x400>)
 800538a:	2200      	movs	r2, #0
 800538c:	701a      	strb	r2, [r3, #0]

			}
			if(Row == 1)
 800538e:	4b44      	ldr	r3, [pc, #272]	; (80054a0 <getChoosePrepare+0x400>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d120      	bne.n	80053d8 <getChoosePrepare+0x338>
			{
				LCD_SetColorPoint(CYAN);
 8005396:	f647 70ff 	movw	r0, #32767	; 0x7fff
 800539a:	f7fd fd39 	bl	8002e10 <LCD_SetColorPoint>
				LCD_DrawRectangle(XsButtonValve-1,YsButtonValve-1,XeButtonValve+1,YeButtonValve+1);
 800539e:	8b7b      	ldrh	r3, [r7, #26]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b298      	uxth	r0, r3
 80053a4:	8afb      	ldrh	r3, [r7, #22]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b299      	uxth	r1, r3
 80053aa:	8b3b      	ldrh	r3, [r7, #24]
 80053ac:	3301      	adds	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	8abb      	ldrh	r3, [r7, #20]
 80053b2:	3301      	adds	r3, #1
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f7fc f98b 	bl	80016d0 <LCD_DrawRectangle>
				LCD_DrawRectangle(XsButtonReturn-1,YsButtonReturn-1,XeButtonReturn+1,YeButtonReturn+1);
 80053ba:	8a7b      	ldrh	r3, [r7, #18]
 80053bc:	3b01      	subs	r3, #1
 80053be:	b298      	uxth	r0, r3
 80053c0:	89fb      	ldrh	r3, [r7, #14]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b299      	uxth	r1, r3
 80053c6:	8a3b      	ldrh	r3, [r7, #16]
 80053c8:	3301      	adds	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	89bb      	ldrh	r3, [r7, #12]
 80053ce:	3301      	adds	r3, #1
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	f7fc f97d 	bl	80016d0 <LCD_DrawRectangle>
 80053d6:	e023      	b.n	8005420 <getChoosePrepare+0x380>
			}else
			{
				LCD_SetColorPoint(CYAN);
 80053d8:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80053dc:	f7fd fd18 	bl	8002e10 <LCD_SetColorPoint>
				LCD_SetColorPoint(CYAN);
 80053e0:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80053e4:	f7fd fd14 	bl	8002e10 <LCD_SetColorPoint>
				LCD_DrawRectangle(XsButtonReturn-1,YsButtonReturn-1,XeButtonReturn+1,YeButtonReturn+1);
 80053e8:	8a7b      	ldrh	r3, [r7, #18]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b298      	uxth	r0, r3
 80053ee:	89fb      	ldrh	r3, [r7, #14]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b299      	uxth	r1, r3
 80053f4:	8a3b      	ldrh	r3, [r7, #16]
 80053f6:	3301      	adds	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	89bb      	ldrh	r3, [r7, #12]
 80053fc:	3301      	adds	r3, #1
 80053fe:	b29b      	uxth	r3, r3
 8005400:	f7fc f966 	bl	80016d0 <LCD_DrawRectangle>
				LCD_DrawRectangle(XsButtonValve-1,YsButtonValve-1,XeButtonValve+1,YeButtonValve+1);
 8005404:	8b7b      	ldrh	r3, [r7, #26]
 8005406:	3b01      	subs	r3, #1
 8005408:	b298      	uxth	r0, r3
 800540a:	8afb      	ldrh	r3, [r7, #22]
 800540c:	3b01      	subs	r3, #1
 800540e:	b299      	uxth	r1, r3
 8005410:	8b3b      	ldrh	r3, [r7, #24]
 8005412:	3301      	adds	r3, #1
 8005414:	b29a      	uxth	r2, r3
 8005416:	8abb      	ldrh	r3, [r7, #20]
 8005418:	3301      	adds	r3, #1
 800541a:	b29b      	uxth	r3, r3
 800541c:	f7fc f958 	bl	80016d0 <LCD_DrawRectangle>

			}
			key = NOKEY;
 8005420:	2300      	movs	r3, #0
 8005422:	623b      	str	r3, [r7, #32]
			break;
 8005424:	e035      	b.n	8005492 <getChoosePrepare+0x3f2>
		case SELECT:

			if(Row == 0)
 8005426:	4b1e      	ldr	r3, [pc, #120]	; (80054a0 <getChoosePrepare+0x400>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d124      	bne.n	8005478 <getChoosePrepare+0x3d8>
			{
				state = GetStateValve();
 800542e:	f000 fba3 	bl	8005b78 <GetStateValve>
 8005432:	4603      	mov	r3, r0
 8005434:	70fb      	strb	r3, [r7, #3]
				if(state == PISTON_PUSH_UP)
 8005436:	78fb      	ldrb	r3, [r7, #3]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10e      	bne.n	800545a <getChoosePrepare+0x3ba>
				{
					//state = PISTON_PUSH_DOWN;
					valveControl(PISTON_PUSH_DOWN,VALVE_NUM_1);
 800543c:	2100      	movs	r1, #0
 800543e:	2001      	movs	r0, #1
 8005440:	f000 fb5a 	bl	8005af8 <valveControl>
					//Update state on LCD
					LCD_ShowButton(XsButtonValve,YsButtonValve,heigthButton,widthButton,(u8*)"VALVE",1);
 8005444:	8bfb      	ldrh	r3, [r7, #30]
 8005446:	8bba      	ldrh	r2, [r7, #28]
 8005448:	8af9      	ldrh	r1, [r7, #22]
 800544a:	8b78      	ldrh	r0, [r7, #26]
 800544c:	2401      	movs	r4, #1
 800544e:	9401      	str	r4, [sp, #4]
 8005450:	4c14      	ldr	r4, [pc, #80]	; (80054a4 <getChoosePrepare+0x404>)
 8005452:	9400      	str	r4, [sp, #0]
 8005454:	f7fc fe4a 	bl	80020ec <LCD_ShowButton>
 8005458:	e014      	b.n	8005484 <getChoosePrepare+0x3e4>
				}else
				{
					//state = PISTON_PUSH_UP;
					valveControl(PISTON_PUSH_UP,VALVE_NUM_1);
 800545a:	2100      	movs	r1, #0
 800545c:	2000      	movs	r0, #0
 800545e:	f000 fb4b 	bl	8005af8 <valveControl>
					LCD_ShowButton(XsButtonValve,YsButtonValve,heigthButton,widthButton,(u8*)"VALVE",0);
 8005462:	8bfb      	ldrh	r3, [r7, #30]
 8005464:	8bba      	ldrh	r2, [r7, #28]
 8005466:	8af9      	ldrh	r1, [r7, #22]
 8005468:	8b78      	ldrh	r0, [r7, #26]
 800546a:	2400      	movs	r4, #0
 800546c:	9401      	str	r4, [sp, #4]
 800546e:	4c0d      	ldr	r4, [pc, #52]	; (80054a4 <getChoosePrepare+0x404>)
 8005470:	9400      	str	r4, [sp, #0]
 8005472:	f7fc fe3b 	bl	80020ec <LCD_ShowButton>
 8005476:	e005      	b.n	8005484 <getChoosePrepare+0x3e4>
				}
			}else
			{
				action = RETURN_ACTION;
 8005478:	2301      	movs	r3, #1
 800547a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				flag = 0;
 800547e:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <getChoosePrepare+0x408>)
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]
			}


			Row = 0;
 8005484:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <getChoosePrepare+0x400>)
 8005486:	2200      	movs	r2, #0
 8005488:	701a      	strb	r2, [r3, #0]

			//Print Titel
			key = NOKEY;
 800548a:	2300      	movs	r3, #0
 800548c:	623b      	str	r3, [r7, #32]
			break;
 800548e:	e000      	b.n	8005492 <getChoosePrepare+0x3f2>
		default:
			break;
 8005490:	bf00      	nop
		}
	return action;
 8005492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005496:	4618      	mov	r0, r3
 8005498:	372c      	adds	r7, #44	; 0x2c
 800549a:	46bd      	mov	sp, r7
 800549c:	bd90      	pop	{r4, r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000156 	.word	0x20000156
 80054a4:	080060f0 	.word	0x080060f0
 80054a8:	2000014c 	.word	0x2000014c

080054ac <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	4603      	mov	r3, r0
 80054b4:	6039      	str	r1, [r7, #0]
 80054b6:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 80054b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	da0b      	bge.n	80054d8 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	490c      	ldr	r1, [pc, #48]	; (80054f8 <NVIC_SetPriority+0x4c>)
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	3b04      	subs	r3, #4
 80054ce:	0112      	lsls	r2, r2, #4
 80054d0:	b2d2      	uxtb	r2, r2
 80054d2:	440b      	add	r3, r1
 80054d4:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054d6:	e009      	b.n	80054ec <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	4907      	ldr	r1, [pc, #28]	; (80054fc <NVIC_SetPriority+0x50>)
 80054de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e2:	0112      	lsls	r2, r2, #4
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	440b      	add	r3, r1
 80054e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	e000ed00 	.word	0xe000ed00
 80054fc:	e000e100 	.word	0xe000e100

08005500 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3b01      	subs	r3, #1
 800550c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005510:	d301      	bcc.n	8005516 <SysTick_Config+0x16>
 8005512:	2301      	movs	r3, #1
 8005514:	e00f      	b.n	8005536 <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005516:	4a0a      	ldr	r2, [pc, #40]	; (8005540 <SysTick_Config+0x40>)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3b01      	subs	r3, #1
 800551c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800551e:	210f      	movs	r1, #15
 8005520:	f04f 30ff 	mov.w	r0, #4294967295
 8005524:	f7ff ffc2 	bl	80054ac <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005528:	4b05      	ldr	r3, [pc, #20]	; (8005540 <SysTick_Config+0x40>)
 800552a:	2200      	movs	r2, #0
 800552c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800552e:	4b04      	ldr	r3, [pc, #16]	; (8005540 <SysTick_Config+0x40>)
 8005530:	2207      	movs	r2, #7
 8005532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	e000e010 	.word	0xe000e010

08005544 <TimerInit>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimerInit(void) {
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    RCC_GetClocksFreq(&RCC_Clocks);
 800554a:	463b      	mov	r3, r7
 800554c:	4618      	mov	r0, r3
 800554e:	f7fb f863 	bl	8000618 <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.SYSCLK_Frequency/1000);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	4a0a      	ldr	r2, [pc, #40]	; (8005580 <TimerInit+0x3c>)
 8005556:	fba2 2303 	umull	r2, r3, r2, r3
 800555a:	099b      	lsrs	r3, r3, #6
 800555c:	4618      	mov	r0, r3
 800555e:	f7ff ffcf 	bl	8005500 <SysTick_Config>
    NVIC_SetPriority(SysTick_IRQn, 1);
 8005562:	2101      	movs	r1, #1
 8005564:	f04f 30ff 	mov.w	r0, #4294967295
 8005568:	f7ff ffa0 	bl	80054ac <NVIC_SetPriority>
    memsetl((uint8_t *)g_pTimerHandle, 0, sizeof(g_pTimerHandle));
 800556c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005570:	2100      	movs	r1, #0
 8005572:	4804      	ldr	r0, [pc, #16]	; (8005584 <TimerInit+0x40>)
 8005574:	f000 fa80 	bl	8005a78 <memsetl>
    DBG_TIMER_SEND_STR("$ TimerInit\n");
}
 8005578:	bf00      	nop
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	10624dd3 	.word	0x10624dd3
 8005584:	20000158 	.word	0x20000158

08005588 <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 800558c:	4b03      	ldr	r3, [pc, #12]	; (800559c <GetMilSecTick+0x14>)
 800558e:	681b      	ldr	r3, [r3, #0]
}
 8005590:	4618      	mov	r0, r3
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	200002d8 	.word	0x200002d8

080055a0 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 80055a0:	b480      	push	{r7}
 80055a2:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 80055a4:	4b04      	ldr	r3, [pc, #16]	; (80055b8 <SysTick_Handler+0x18>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3301      	adds	r3, #1
 80055aa:	4a03      	ldr	r2, [pc, #12]	; (80055b8 <SysTick_Handler+0x18>)
 80055ac:	6013      	str	r3, [r2, #0]
}
 80055ae:	bf00      	nop
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	200002d8 	.word	0x200002d8

080055bc <currentSensorInit>:
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

/******************************************************************************/
void currentSensorInit(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	RCC_AHB1PeriphClockCmd(CURRENT_SENSOR_RCC, ENABLE);
 80055c2:	2101      	movs	r1, #1
 80055c4:	2001      	movs	r0, #1
 80055c6:	f7fb f8d5 	bl	8000774 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 80055ca:	2300      	movs	r3, #0
 80055cc:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_Pin  = CURRENT_SENSOR_PIN;
 80055ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055d2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80055d4:	2301      	movs	r3, #1
 80055d6:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 80055d8:	2302      	movs	r3, #2
 80055da:	717b      	strb	r3, [r7, #5]

	GPIO_Init(CURRENT_SENSOR_PORT, &GPIO_InitStruct);
 80055dc:	463b      	mov	r3, r7
 80055de:	4619      	mov	r1, r3
 80055e0:	4803      	ldr	r0, [pc, #12]	; (80055f0 <currentSensorInit+0x34>)
 80055e2:	f7fa ff09 	bl	80003f8 <GPIO_Init>
}
 80055e6:	bf00      	nop
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	40020000 	.word	0x40020000

080055f4 <currentSensorScan>:
uint8_t currentSensorScan(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
	uint8_t state = 0;
 80055fa:	2300      	movs	r3, #0
 80055fc:	71fb      	strb	r3, [r7, #7]
	if(GPIO_ReadInputDataBit(CURRENT_SENSOR_PORT, CURRENT_SENSOR_PIN))
 80055fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005602:	4808      	ldr	r0, [pc, #32]	; (8005624 <currentSensorScan+0x30>)
 8005604:	f7fa ff87 	bl	8000516 <GPIO_ReadInputDataBit>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d002      	beq.n	8005614 <currentSensorScan+0x20>
	{
		state = 0;
 800560e:	2300      	movs	r3, #0
 8005610:	71fb      	strb	r3, [r7, #7]
 8005612:	e001      	b.n	8005618 <currentSensorScan+0x24>
	}else
		state = 1;
 8005614:	2301      	movs	r3, #1
 8005616:	71fb      	strb	r3, [r7, #7]
	return state;
 8005618:	79fb      	ldrb	r3, [r7, #7]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	40020000 	.word	0x40020000

08005628 <proximitySensorInit>:
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

/******************************************************************************/
void proximitySensorInit(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	RCC_AHB1PeriphClockCmd(PROXIMITY_SENSOR_RCC, ENABLE);
 800562e:	2101      	movs	r1, #1
 8005630:	2004      	movs	r0, #4
 8005632:	f7fb f89f 	bl	8000774 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8005636:	2300      	movs	r3, #0
 8005638:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_Pin  = PROXIMITY_SENSOR_1_PIN|PROXIMITY_SENSOR_2_PIN;
 800563a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800563e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8005640:	2302      	movs	r3, #2
 8005642:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8005644:	2302      	movs	r3, #2
 8005646:	717b      	strb	r3, [r7, #5]

	GPIO_Init(PROXIMITY_SENSOR_PORT, &GPIO_InitStruct);
 8005648:	463b      	mov	r3, r7
 800564a:	4619      	mov	r1, r3
 800564c:	4803      	ldr	r0, [pc, #12]	; (800565c <proximitySensorInit+0x34>)
 800564e:	f7fa fed3 	bl	80003f8 <GPIO_Init>
}
 8005652:	bf00      	nop
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	40020800 	.word	0x40020800

08005660 <proximitySensorScan>:
eventProximitySensor_e proximitySensorScan(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
	uint8_t byFlagHighLocation = 0;
 8005666:	2300      	movs	r3, #0
 8005668:	71fb      	strb	r3, [r7, #7]
	uint8_t byFlagLowLocation = 0;
 800566a:	2300      	movs	r3, #0
 800566c:	71bb      	strb	r3, [r7, #6]
	eventProximitySensor_e temp;
	if(GPIO_ReadInputDataBit(PROXIMITY_SENSOR_PORT, PROXIMITY_SENSOR_1_PIN))
 800566e:	2140      	movs	r1, #64	; 0x40
 8005670:	4818      	ldr	r0, [pc, #96]	; (80056d4 <proximitySensorScan+0x74>)
 8005672:	f7fa ff50 	bl	8000516 <GPIO_ReadInputDataBit>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <proximitySensorScan+0x22>
	{
		byFlagHighLocation = 1;
 800567c:	2301      	movs	r3, #1
 800567e:	71fb      	strb	r3, [r7, #7]
 8005680:	e001      	b.n	8005686 <proximitySensorScan+0x26>
	}else
		byFlagHighLocation = 0;
 8005682:	2300      	movs	r3, #0
 8005684:	71fb      	strb	r3, [r7, #7]
	if(GPIO_ReadInputDataBit(PROXIMITY_SENSOR_PORT, PROXIMITY_SENSOR_2_PIN))
 8005686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800568a:	4812      	ldr	r0, [pc, #72]	; (80056d4 <proximitySensorScan+0x74>)
 800568c:	f7fa ff43 	bl	8000516 <GPIO_ReadInputDataBit>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <proximitySensorScan+0x3c>
	{
		byFlagLowLocation = 1;
 8005696:	2301      	movs	r3, #1
 8005698:	71bb      	strb	r3, [r7, #6]
 800569a:	e001      	b.n	80056a0 <proximitySensorScan+0x40>
	}else
		byFlagLowLocation = 0;
 800569c:	2300      	movs	r3, #0
 800569e:	71bb      	strb	r3, [r7, #6]
	if(byFlagHighLocation)
 80056a0:	79fb      	ldrb	r3, [r7, #7]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d008      	beq.n	80056b8 <proximitySensorScan+0x58>
	{
		if(byFlagLowLocation)
 80056a6:	79bb      	ldrb	r3, [r7, #6]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <proximitySensorScan+0x52>
		{
			temp = ERROR_SENSOR;
 80056ac:	2300      	movs	r3, #0
 80056ae:	717b      	strb	r3, [r7, #5]
 80056b0:	e00a      	b.n	80056c8 <proximitySensorScan+0x68>
		}else
		{
			temp = HIGH_LOCATION;
 80056b2:	2301      	movs	r3, #1
 80056b4:	717b      	strb	r3, [r7, #5]
 80056b6:	e007      	b.n	80056c8 <proximitySensorScan+0x68>
		}
	}else
	{
		if(byFlagLowLocation)
 80056b8:	79bb      	ldrb	r3, [r7, #6]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <proximitySensorScan+0x64>
		{
			temp = LOW_LOCATION;
 80056be:	2302      	movs	r3, #2
 80056c0:	717b      	strb	r3, [r7, #5]
 80056c2:	e001      	b.n	80056c8 <proximitySensorScan+0x68>
		}else
		{
			temp = BW2_LOCATION;
 80056c4:	2303      	movs	r3, #3
 80056c6:	717b      	strb	r3, [r7, #5]
		}
	}
	return temp;
 80056c8:	797b      	ldrb	r3, [r7, #5]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	40020800 	.word	0x40020800

080056d8 <updateDataRunHandleCallBack>:
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

/******************************************************************************/
void updateDataRunHandleCallBack(upDateDataRunHandle pHandle)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
	pUpdateRunDataHandle = pHandle;
 80056e0:	4a04      	ldr	r2, [pc, #16]	; (80056f4 <updateDataRunHandleCallBack+0x1c>)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6013      	str	r3, [r2, #0]
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	200002dc 	.word	0x200002dc

080056f8 <setCountValue>:
void setCountValue(u32 countMax,u32 TimeHold)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
	g_dwCountMax = countMax;
 8005702:	4a06      	ldr	r2, [pc, #24]	; (800571c <setCountValue+0x24>)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6013      	str	r3, [r2, #0]
	g_TimeHold = TimeHold;
 8005708:	4a05      	ldr	r2, [pc, #20]	; (8005720 <setCountValue+0x28>)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	6013      	str	r3, [r2, #0]
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	200002ec 	.word	0x200002ec
 8005720:	200002f0 	.word	0x200002f0

08005724 <byProcessSequenceControl>:
u8 byProcessSequenceControl(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
	u8 state = 0;
 800572a:	2300      	movs	r3, #0
 800572c:	71fb      	strb	r3, [r7, #7]
	static u32 dwTimeInit = 0,dwTimeCurrent;
	static u8 byFlagTemp = 0;
	static u8 byCountError = 0;
	if(g_dwCountValue <= g_dwCountMax)
 800572e:	4b88      	ldr	r3, [pc, #544]	; (8005950 <byProcessSequenceControl+0x22c>)
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	4b88      	ldr	r3, [pc, #544]	; (8005954 <byProcessSequenceControl+0x230>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	f200 80f7 	bhi.w	800592a <byProcessSequenceControl+0x206>
	{
		switch(eventDevice)
 800573c:	4b86      	ldr	r3, [pc, #536]	; (8005958 <byProcessSequenceControl+0x234>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b04      	cmp	r3, #4
 8005742:	f200 80ee 	bhi.w	8005922 <byProcessSequenceControl+0x1fe>
 8005746:	a201      	add	r2, pc, #4	; (adr r2, 800574c <byProcessSequenceControl+0x28>)
 8005748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574c:	08005761 	.word	0x08005761
 8005750:	08005799 	.word	0x08005799
 8005754:	08005817 	.word	0x08005817
 8005758:	08005831 	.word	0x08005831
 800575c:	080058ad 	.word	0x080058ad
		{
		case PUSH_UP:
			//Dua piston len cao va luu thoi gian
			pData[0] = RUN;
 8005760:	4b7e      	ldr	r3, [pc, #504]	; (800595c <byProcessSequenceControl+0x238>)
 8005762:	2202      	movs	r2, #2
 8005764:	601a      	str	r2, [r3, #0]
			pData[2]= g_dwCountValue;
 8005766:	4b7a      	ldr	r3, [pc, #488]	; (8005950 <byProcessSequenceControl+0x22c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a7c      	ldr	r2, [pc, #496]	; (800595c <byProcessSequenceControl+0x238>)
 800576c:	6093      	str	r3, [r2, #8]
			pData[3]= g_dwCountMiss;
 800576e:	4b7c      	ldr	r3, [pc, #496]	; (8005960 <byProcessSequenceControl+0x23c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a7a      	ldr	r2, [pc, #488]	; (800595c <byProcessSequenceControl+0x238>)
 8005774:	60d3      	str	r3, [r2, #12]
			pUpdateRunDataHandle((void*)pData);
 8005776:	4b7b      	ldr	r3, [pc, #492]	; (8005964 <byProcessSequenceControl+0x240>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4878      	ldr	r0, [pc, #480]	; (800595c <byProcessSequenceControl+0x238>)
 800577c:	4798      	blx	r3
			dwTimeInit = GetMilSecTick();
 800577e:	f7ff ff03 	bl	8005588 <GetMilSecTick>
 8005782:	4603      	mov	r3, r0
 8005784:	4a78      	ldr	r2, [pc, #480]	; (8005968 <byProcessSequenceControl+0x244>)
 8005786:	6013      	str	r3, [r2, #0]
			valveControl(PISTON_PUSH_UP, VALVE_NUM_1);
 8005788:	2100      	movs	r1, #0
 800578a:	2000      	movs	r0, #0
 800578c:	f000 f9b4 	bl	8005af8 <valveControl>
			eventDevice = PUSH_UP_DONE;
 8005790:	4b71      	ldr	r3, [pc, #452]	; (8005958 <byProcessSequenceControl+0x234>)
 8005792:	2201      	movs	r2, #1
 8005794:	701a      	strb	r2, [r3, #0]
			break;
 8005796:	e0d6      	b.n	8005946 <byProcessSequenceControl+0x222>
		case PUSH_UP_DONE:
			if(proximitySensorScan() == HIGH_LOCATION)
 8005798:	f7ff ff62 	bl	8005660 <proximitySensorScan>
 800579c:	4603      	mov	r3, r0
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d11c      	bne.n	80057dc <byProcessSequenceControl+0xb8>
			{
				dwTimeCurrent = GetMilSecTick();
 80057a2:	f7ff fef1 	bl	8005588 <GetMilSecTick>
 80057a6:	4603      	mov	r3, r0
 80057a8:	4a70      	ldr	r2, [pc, #448]	; (800596c <byProcessSequenceControl+0x248>)
 80057aa:	6013      	str	r3, [r2, #0]
				if(dwCalculatorTime(dwTimeInit, dwTimeCurrent)>g_TimeHold)
 80057ac:	4b6e      	ldr	r3, [pc, #440]	; (8005968 <byProcessSequenceControl+0x244>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a6e      	ldr	r2, [pc, #440]	; (800596c <byProcessSequenceControl+0x248>)
 80057b2:	6812      	ldr	r2, [r2, #0]
 80057b4:	4611      	mov	r1, r2
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 f9ea 	bl	8005b90 <dwCalculatorTime>
 80057bc:	4602      	mov	r2, r0
 80057be:	4b6c      	ldr	r3, [pc, #432]	; (8005970 <byProcessSequenceControl+0x24c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	f240 80ba 	bls.w	800593c <byProcessSequenceControl+0x218>
				{
					//Bao loi
					eventDevice = PUSH_DOWN;
 80057c8:	4b63      	ldr	r3, [pc, #396]	; (8005958 <byProcessSequenceControl+0x234>)
 80057ca:	2202      	movs	r2, #2
 80057cc:	701a      	strb	r2, [r3, #0]
					dwTimeInit = 0;
 80057ce:	4b66      	ldr	r3, [pc, #408]	; (8005968 <byProcessSequenceControl+0x244>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
					dwTimeCurrent = 0;
 80057d4:	4b65      	ldr	r3, [pc, #404]	; (800596c <byProcessSequenceControl+0x248>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]
					eventDevice = PUSH_UP;
					dwTimeInit = 0;
					dwTimeCurrent = 0;
				}
			}
			break;
 80057da:	e0af      	b.n	800593c <byProcessSequenceControl+0x218>
				dwTimeCurrent = GetMilSecTick();
 80057dc:	f7ff fed4 	bl	8005588 <GetMilSecTick>
 80057e0:	4603      	mov	r3, r0
 80057e2:	4a62      	ldr	r2, [pc, #392]	; (800596c <byProcessSequenceControl+0x248>)
 80057e4:	6013      	str	r3, [r2, #0]
				if(dwCalculatorTime(dwTimeInit, dwTimeCurrent)>g_TimeHold)
 80057e6:	4b60      	ldr	r3, [pc, #384]	; (8005968 <byProcessSequenceControl+0x244>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a60      	ldr	r2, [pc, #384]	; (800596c <byProcessSequenceControl+0x248>)
 80057ec:	6812      	ldr	r2, [r2, #0]
 80057ee:	4611      	mov	r1, r2
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 f9cd 	bl	8005b90 <dwCalculatorTime>
 80057f6:	4602      	mov	r2, r0
 80057f8:	4b5d      	ldr	r3, [pc, #372]	; (8005970 <byProcessSequenceControl+0x24c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	f240 809d 	bls.w	800593c <byProcessSequenceControl+0x218>
					eventDevice = PUSH_UP;
 8005802:	4b55      	ldr	r3, [pc, #340]	; (8005958 <byProcessSequenceControl+0x234>)
 8005804:	2200      	movs	r2, #0
 8005806:	701a      	strb	r2, [r3, #0]
					dwTimeInit = 0;
 8005808:	4b57      	ldr	r3, [pc, #348]	; (8005968 <byProcessSequenceControl+0x244>)
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]
					dwTimeCurrent = 0;
 800580e:	4b57      	ldr	r3, [pc, #348]	; (800596c <byProcessSequenceControl+0x248>)
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]
			break;
 8005814:	e092      	b.n	800593c <byProcessSequenceControl+0x218>
		case PUSH_DOWN:
			//Dua piston Xuong duoi va luu thoi gian
			dwTimeInit = GetMilSecTick();
 8005816:	f7ff feb7 	bl	8005588 <GetMilSecTick>
 800581a:	4603      	mov	r3, r0
 800581c:	4a52      	ldr	r2, [pc, #328]	; (8005968 <byProcessSequenceControl+0x244>)
 800581e:	6013      	str	r3, [r2, #0]

			valveControl(PISTON_PUSH_DOWN, VALVE_NUM_1);
 8005820:	2100      	movs	r1, #0
 8005822:	2001      	movs	r0, #1
 8005824:	f000 f968 	bl	8005af8 <valveControl>
			eventDevice = PUSH_DOWN_DONE;
 8005828:	4b4b      	ldr	r3, [pc, #300]	; (8005958 <byProcessSequenceControl+0x234>)
 800582a:	2203      	movs	r2, #3
 800582c:	701a      	strb	r2, [r3, #0]
			break;
 800582e:	e08a      	b.n	8005946 <byProcessSequenceControl+0x222>
		case PUSH_DOWN_DONE:
			if(proximitySensorScan() == LOW_LOCATION)
 8005830:	f7ff ff16 	bl	8005660 <proximitySensorScan>
 8005834:	4603      	mov	r3, r0
 8005836:	2b02      	cmp	r3, #2
 8005838:	d103      	bne.n	8005842 <byProcessSequenceControl+0x11e>
			{
				eventDevice = CHECK_CURRENT_SENSOR;
 800583a:	4b47      	ldr	r3, [pc, #284]	; (8005958 <byProcessSequenceControl+0x234>)
 800583c:	2204      	movs	r2, #4
 800583e:	701a      	strb	r2, [r3, #0]
					byCountError = 0;
					eventDevice = PUSH_UP;
					state = 1;
				}
			}
			break;
 8005840:	e07e      	b.n	8005940 <byProcessSequenceControl+0x21c>
				dwTimeCurrent = GetMilSecTick();
 8005842:	f7ff fea1 	bl	8005588 <GetMilSecTick>
 8005846:	4603      	mov	r3, r0
 8005848:	4a48      	ldr	r2, [pc, #288]	; (800596c <byProcessSequenceControl+0x248>)
 800584a:	6013      	str	r3, [r2, #0]
				if(dwCalculatorTime(dwTimeInit, dwTimeCurrent)>g_TimeHold)
 800584c:	4b46      	ldr	r3, [pc, #280]	; (8005968 <byProcessSequenceControl+0x244>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a46      	ldr	r2, [pc, #280]	; (800596c <byProcessSequenceControl+0x248>)
 8005852:	6812      	ldr	r2, [r2, #0]
 8005854:	4611      	mov	r1, r2
 8005856:	4618      	mov	r0, r3
 8005858:	f000 f99a 	bl	8005b90 <dwCalculatorTime>
 800585c:	4602      	mov	r2, r0
 800585e:	4b44      	ldr	r3, [pc, #272]	; (8005970 <byProcessSequenceControl+0x24c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d915      	bls.n	8005892 <byProcessSequenceControl+0x16e>
					g_dwCountValue++;
 8005866:	4b3a      	ldr	r3, [pc, #232]	; (8005950 <byProcessSequenceControl+0x22c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3301      	adds	r3, #1
 800586c:	4a38      	ldr	r2, [pc, #224]	; (8005950 <byProcessSequenceControl+0x22c>)
 800586e:	6013      	str	r3, [r2, #0]
					g_dwCountMiss ++;
 8005870:	4b3b      	ldr	r3, [pc, #236]	; (8005960 <byProcessSequenceControl+0x23c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3301      	adds	r3, #1
 8005876:	4a3a      	ldr	r2, [pc, #232]	; (8005960 <byProcessSequenceControl+0x23c>)
 8005878:	6013      	str	r3, [r2, #0]
					byCountError ++;
 800587a:	4b3e      	ldr	r3, [pc, #248]	; (8005974 <byProcessSequenceControl+0x250>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	3301      	adds	r3, #1
 8005880:	b2da      	uxtb	r2, r3
 8005882:	4b3c      	ldr	r3, [pc, #240]	; (8005974 <byProcessSequenceControl+0x250>)
 8005884:	701a      	strb	r2, [r3, #0]
					dwTimeInit = 0;
 8005886:	4b38      	ldr	r3, [pc, #224]	; (8005968 <byProcessSequenceControl+0x244>)
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]
					dwTimeCurrent = 0;
 800588c:	4b37      	ldr	r3, [pc, #220]	; (800596c <byProcessSequenceControl+0x248>)
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
				if(byCountError >= 10)
 8005892:	4b38      	ldr	r3, [pc, #224]	; (8005974 <byProcessSequenceControl+0x250>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b09      	cmp	r3, #9
 8005898:	d952      	bls.n	8005940 <byProcessSequenceControl+0x21c>
					byCountError = 0;
 800589a:	4b36      	ldr	r3, [pc, #216]	; (8005974 <byProcessSequenceControl+0x250>)
 800589c:	2200      	movs	r2, #0
 800589e:	701a      	strb	r2, [r3, #0]
					eventDevice = PUSH_UP;
 80058a0:	4b2d      	ldr	r3, [pc, #180]	; (8005958 <byProcessSequenceControl+0x234>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	701a      	strb	r2, [r3, #0]
					state = 1;
 80058a6:	2301      	movs	r3, #1
 80058a8:	71fb      	strb	r3, [r7, #7]
			break;
 80058aa:	e049      	b.n	8005940 <byProcessSequenceControl+0x21c>
		case CHECK_CURRENT_SENSOR:

			if(byFlagTemp == 0)
 80058ac:	4b32      	ldr	r3, [pc, #200]	; (8005978 <byProcessSequenceControl+0x254>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d108      	bne.n	80058c6 <byProcessSequenceControl+0x1a2>
			{
				dwTimeInit = GetMilSecTick();
 80058b4:	f7ff fe68 	bl	8005588 <GetMilSecTick>
 80058b8:	4603      	mov	r3, r0
 80058ba:	4a2b      	ldr	r2, [pc, #172]	; (8005968 <byProcessSequenceControl+0x244>)
 80058bc:	6013      	str	r3, [r2, #0]
				byFlagTemp = 1;
 80058be:	4b2e      	ldr	r3, [pc, #184]	; (8005978 <byProcessSequenceControl+0x254>)
 80058c0:	2201      	movs	r2, #1
 80058c2:	701a      	strb	r2, [r3, #0]
					dwTimeInit = 0;
					dwTimeCurrent = 0;
					byFlagTemp = 0;
				}
			}
			break;
 80058c4:	e03e      	b.n	8005944 <byProcessSequenceControl+0x220>
				dwTimeCurrent = GetMilSecTick();
 80058c6:	f7ff fe5f 	bl	8005588 <GetMilSecTick>
 80058ca:	4603      	mov	r3, r0
 80058cc:	4a27      	ldr	r2, [pc, #156]	; (800596c <byProcessSequenceControl+0x248>)
 80058ce:	6013      	str	r3, [r2, #0]
				if(dwCalculatorTime(dwTimeInit, dwTimeCurrent)>g_TimeHold)
 80058d0:	4b25      	ldr	r3, [pc, #148]	; (8005968 <byProcessSequenceControl+0x244>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a25      	ldr	r2, [pc, #148]	; (800596c <byProcessSequenceControl+0x248>)
 80058d6:	6812      	ldr	r2, [r2, #0]
 80058d8:	4611      	mov	r1, r2
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 f958 	bl	8005b90 <dwCalculatorTime>
 80058e0:	4602      	mov	r2, r0
 80058e2:	4b23      	ldr	r3, [pc, #140]	; (8005970 <byProcessSequenceControl+0x24c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d92c      	bls.n	8005944 <byProcessSequenceControl+0x220>
					if(currentSensorScan())
 80058ea:	f7ff fe83 	bl	80055f4 <currentSensorScan>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d104      	bne.n	80058fe <byProcessSequenceControl+0x1da>
						g_dwCountMiss ++;
 80058f4:	4b1a      	ldr	r3, [pc, #104]	; (8005960 <byProcessSequenceControl+0x23c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3301      	adds	r3, #1
 80058fa:	4a19      	ldr	r2, [pc, #100]	; (8005960 <byProcessSequenceControl+0x23c>)
 80058fc:	6013      	str	r3, [r2, #0]
					g_dwCountValue++;
 80058fe:	4b14      	ldr	r3, [pc, #80]	; (8005950 <byProcessSequenceControl+0x22c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3301      	adds	r3, #1
 8005904:	4a12      	ldr	r2, [pc, #72]	; (8005950 <byProcessSequenceControl+0x22c>)
 8005906:	6013      	str	r3, [r2, #0]
					eventDevice = PUSH_UP;
 8005908:	4b13      	ldr	r3, [pc, #76]	; (8005958 <byProcessSequenceControl+0x234>)
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]
					dwTimeInit = 0;
 800590e:	4b16      	ldr	r3, [pc, #88]	; (8005968 <byProcessSequenceControl+0x244>)
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
					dwTimeCurrent = 0;
 8005914:	4b15      	ldr	r3, [pc, #84]	; (800596c <byProcessSequenceControl+0x248>)
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]
					byFlagTemp = 0;
 800591a:	4b17      	ldr	r3, [pc, #92]	; (8005978 <byProcessSequenceControl+0x254>)
 800591c:	2200      	movs	r2, #0
 800591e:	701a      	strb	r2, [r3, #0]
			break;
 8005920:	e010      	b.n	8005944 <byProcessSequenceControl+0x220>
		default:
			eventDevice = PUSH_UP;
 8005922:	4b0d      	ldr	r3, [pc, #52]	; (8005958 <byProcessSequenceControl+0x234>)
 8005924:	2200      	movs	r2, #0
 8005926:	701a      	strb	r2, [r3, #0]
			break;
 8005928:	e00d      	b.n	8005946 <byProcessSequenceControl+0x222>
		}
	}else
	{
		g_dwCountMiss = 0;
 800592a:	4b0d      	ldr	r3, [pc, #52]	; (8005960 <byProcessSequenceControl+0x23c>)
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]
		g_dwCountValue = 0;
 8005930:	4b07      	ldr	r3, [pc, #28]	; (8005950 <byProcessSequenceControl+0x22c>)
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]
		state = 1;
 8005936:	2301      	movs	r3, #1
 8005938:	71fb      	strb	r3, [r7, #7]
 800593a:	e004      	b.n	8005946 <byProcessSequenceControl+0x222>
			break;
 800593c:	bf00      	nop
 800593e:	e002      	b.n	8005946 <byProcessSequenceControl+0x222>
			break;
 8005940:	bf00      	nop
 8005942:	e000      	b.n	8005946 <byProcessSequenceControl+0x222>
			break;
 8005944:	bf00      	nop
	}
	return state;
 8005946:	79fb      	ldrb	r3, [r7, #7]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	200002e4 	.word	0x200002e4
 8005954:	200002ec 	.word	0x200002ec
 8005958:	200002e0 	.word	0x200002e0
 800595c:	200002f4 	.word	0x200002f4
 8005960:	200002e8 	.word	0x200002e8
 8005964:	200002dc 	.word	0x200002dc
 8005968:	20000308 	.word	0x20000308
 800596c:	2000030c 	.word	0x2000030c
 8005970:	200002f0 	.word	0x200002f0
 8005974:	20000310 	.word	0x20000310
 8005978:	20000311 	.word	0x20000311

0800597c <SPI_WriteByte>:
 * @parameters :SPIx: SPI type,x for 1,2,3
                Byte:Data to be written
 * @retvalue   :Data received by the bus
******************************************************************************/
u8 SPI_WriteByte(SPI_TypeDef* SPIx,u8 Byte)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	460b      	mov	r3, r1
 8005986:	70fb      	strb	r3, [r7, #3]
	while((SPIx->SR&SPI_I2S_FLAG_TXE)==RESET);
 8005988:	bf00      	nop
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	891b      	ldrh	r3, [r3, #8]
 800598e:	b29b      	uxth	r3, r3
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0f8      	beq.n	800598a <SPI_WriteByte+0xe>
	SPIx->DR=Byte;
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	b29a      	uxth	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	819a      	strh	r2, [r3, #12]
	while((SPIx->SR&SPI_I2S_FLAG_RXNE)==RESET);
 80059a0:	bf00      	nop
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	891b      	ldrh	r3, [r3, #8]
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d0f8      	beq.n	80059a2 <SPI_WriteByte+0x26>
	return SPIx->DR;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	899b      	ldrh	r3, [r3, #12]
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	b2db      	uxtb	r3, r3
} 
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <SPI1_Init>:
 * @function   :Initialize the STM32 hardware SPI1
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void SPI1_Init(void)	
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b088      	sub	sp, #32
 80059c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStructure;
	SPI_InitTypeDef  SPI_InitStructure;

	RCC_AHB1PeriphClockCmd(LCD_GPIO_RCC, ENABLE);
 80059ca:	2101      	movs	r1, #1
 80059cc:	2002      	movs	r0, #2
 80059ce:	f7fa fed1 	bl	8000774 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(LCD_SPI_RCC, ENABLE);
 80059d2:	2101      	movs	r1, #1
 80059d4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80059d8:	f7fa feec 	bl	80007b4 <RCC_APB2PeriphClockCmd>
	
	GPIO_InitStructure.GPIO_Pin = LCD_SPI_GPIO_SCK|LCD_SPI_GPIO_MISO|LCD_SPI_GPIO_MOSI;
 80059dc:	2338      	movs	r3, #56	; 0x38
 80059de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80059e0:	2302      	movs	r3, #2
 80059e2:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80059e4:	2300      	movs	r3, #0
 80059e6:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80059e8:	2303      	movs	r3, #3
 80059ea:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80059ec:	2301      	movs	r3, #1
 80059ee:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(LCD_SPI_PORT, &GPIO_InitStructure);
 80059f0:	f107 0318 	add.w	r3, r7, #24
 80059f4:	4619      	mov	r1, r3
 80059f6:	481e      	ldr	r0, [pc, #120]	; (8005a70 <SPI1_Init+0xac>)
 80059f8:	f7fa fcfe 	bl	80003f8 <GPIO_Init>
	
	GPIO_PinAFConfig(LCD_SPI_PORT,LCD_SPI_PINSOURCE_SCK,LCD_SPI_AF);
 80059fc:	2205      	movs	r2, #5
 80059fe:	2103      	movs	r1, #3
 8005a00:	481b      	ldr	r0, [pc, #108]	; (8005a70 <SPI1_Init+0xac>)
 8005a02:	f7fa fdc0 	bl	8000586 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(LCD_SPI_PORT,LCD_SPI_PINSOURCE_MISO,LCD_SPI_AF);
 8005a06:	2205      	movs	r2, #5
 8005a08:	2104      	movs	r1, #4
 8005a0a:	4819      	ldr	r0, [pc, #100]	; (8005a70 <SPI1_Init+0xac>)
 8005a0c:	f7fa fdbb 	bl	8000586 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(LCD_SPI_PORT,LCD_SPI_PINSOURCE_MOSI,LCD_SPI_AF);
 8005a10:	2205      	movs	r2, #5
 8005a12:	2105      	movs	r1, #5
 8005a14:	4816      	ldr	r0, [pc, #88]	; (8005a70 <SPI1_Init+0xac>)
 8005a16:	f7fa fdb6 	bl	8000586 <GPIO_PinAFConfig>

	RCC_APB2PeriphResetCmd(LCD_SPI_RCC,ENABLE);
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005a20:	f7fa fee8 	bl	80007f4 <RCC_APB2PeriphResetCmd>
	RCC_APB2PeriphResetCmd(LCD_SPI_RCC,DISABLE);
 8005a24:	2100      	movs	r1, #0
 8005a26:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005a2a:	f7fa fee3 	bl	80007f4 <RCC_APB2PeriphResetCmd>

	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8005a32:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005a36:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8005a40:	2300      	movs	r3, #0
 8005a42:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8005a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a48:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8005a52:	2307      	movs	r3, #7
 8005a54:	82bb      	strh	r3, [r7, #20]
	SPI_Init(LCD_SPI, &SPI_InitStructure);
 8005a56:	1d3b      	adds	r3, r7, #4
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4806      	ldr	r0, [pc, #24]	; (8005a74 <SPI1_Init+0xb0>)
 8005a5c:	f7fa feea 	bl	8000834 <SPI_Init>
 
	SPI_Cmd(LCD_SPI, ENABLE);
 8005a60:	2101      	movs	r1, #1
 8005a62:	4804      	ldr	r0, [pc, #16]	; (8005a74 <SPI1_Init+0xb0>)
 8005a64:	f7fa ff2a 	bl	80008bc <SPI_Cmd>
	
	
}
 8005a68:	bf00      	nop
 8005a6a:	3720      	adds	r7, #32
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	40020400 	.word	0x40020400
 8005a74:	40013000 	.word	0x40013000

08005a78 <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	70fb      	strb	r3, [r7, #3]
 8005a84:	4613      	mov	r3, r2
 8005a86:	803b      	strh	r3, [r7, #0]
    while (size--) {
 8005a88:	e004      	b.n	8005a94 <memsetl+0x1c>
        *dst++ = value;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	78fa      	ldrb	r2, [r7, #3]
 8005a92:	701a      	strb	r2, [r3, #0]
    while (size--) {
 8005a94:	883b      	ldrh	r3, [r7, #0]
 8005a96:	1e5a      	subs	r2, r3, #1
 8005a98:	803a      	strh	r2, [r7, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f5      	bne.n	8005a8a <memsetl+0x12>
    }    
}
 8005a9e:	bf00      	nop
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <valveInit>:
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

/******************************************************************************/
void valveInit(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GpioInitStruct;

	RCC_AHB1PeriphClockCmd(VALVE_1_RCC|VALVE_2_RCC, ENABLE);
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	2004      	movs	r0, #4
 8005ab6:	f7fa fe5d 	bl	8000774 <RCC_AHB1PeriphClockCmd>
	GpioInitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8005aba:	2301      	movs	r3, #1
 8005abc:	713b      	strb	r3, [r7, #4]
	GpioInitStruct.GPIO_OType = GPIO_OType_PP;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	71bb      	strb	r3, [r7, #6]
	GpioInitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	71fb      	strb	r3, [r7, #7]
	GpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	717b      	strb	r3, [r7, #5]

	GpioInitStruct.GPIO_Pin = VALVE_1_PIN;
 8005aca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ace:	603b      	str	r3, [r7, #0]
	GPIO_Init(VALVE_1_PORT, &GpioInitStruct);
 8005ad0:	463b      	mov	r3, r7
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	4807      	ldr	r0, [pc, #28]	; (8005af4 <valveInit+0x48>)
 8005ad6:	f7fa fc8f 	bl	80003f8 <GPIO_Init>

	GpioInitStruct.GPIO_Pin = VALVE_2_PIN;
 8005ada:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ade:	603b      	str	r3, [r7, #0]
	GPIO_Init(VALVE_2_PORT, &GpioInitStruct);
 8005ae0:	463b      	mov	r3, r7
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	4803      	ldr	r0, [pc, #12]	; (8005af4 <valveInit+0x48>)
 8005ae6:	f7fa fc87 	bl	80003f8 <GPIO_Init>

}
 8005aea:	bf00      	nop
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	40020800 	.word	0x40020800

08005af8 <valveControl>:
/*
 * state: DOWN(1),UP(0)
 * valve: VALVE1,VALVE2
 */
void valveControl(uint8_t state,uint8_t valveNumber)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	4603      	mov	r3, r0
 8005b00:	460a      	mov	r2, r1
 8005b02:	71fb      	strb	r3, [r7, #7]
 8005b04:	4613      	mov	r3, r2
 8005b06:	71bb      	strb	r3, [r7, #6]
	if(valveNumber == VALVE_NUM_1)
 8005b08:	79bb      	ldrb	r3, [r7, #6]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d113      	bne.n	8005b36 <valveControl+0x3e>
	{
		if(state == PISTON_PUSH_DOWN)
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d108      	bne.n	8005b26 <valveControl+0x2e>
		{
			g_stateValve_1 = PISTON_PUSH_DOWN;
 8005b14:	4b15      	ldr	r3, [pc, #84]	; (8005b6c <valveControl+0x74>)
 8005b16:	2201      	movs	r2, #1
 8005b18:	701a      	strb	r2, [r3, #0]
			GPIO_SetBits(VALVE_1_PORT, VALVE_1_PIN);
 8005b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b1e:	4814      	ldr	r0, [pc, #80]	; (8005b70 <valveControl+0x78>)
 8005b20:	f7fa fd13 	bl	800054a <GPIO_SetBits>
 8005b24:	e007      	b.n	8005b36 <valveControl+0x3e>
		}else
		{
			g_stateValve_1 = PISTON_PUSH_UP;
 8005b26:	4b11      	ldr	r3, [pc, #68]	; (8005b6c <valveControl+0x74>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	701a      	strb	r2, [r3, #0]
			GPIO_ResetBits(VALVE_1_PORT, VALVE_1_PIN);
 8005b2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b30:	480f      	ldr	r0, [pc, #60]	; (8005b70 <valveControl+0x78>)
 8005b32:	f7fa fd19 	bl	8000568 <GPIO_ResetBits>
		}
	}
	if(valveNumber == VALVE_NUM_2)
 8005b36:	79bb      	ldrb	r3, [r7, #6]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d113      	bne.n	8005b64 <valveControl+0x6c>
	{
		if(state == PISTON_PUSH_DOWN)
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d108      	bne.n	8005b54 <valveControl+0x5c>
		{
			g_stateValve_2 = PISTON_PUSH_DOWN;
 8005b42:	4b0c      	ldr	r3, [pc, #48]	; (8005b74 <valveControl+0x7c>)
 8005b44:	2201      	movs	r2, #1
 8005b46:	701a      	strb	r2, [r3, #0]
			GPIO_SetBits(VALVE_2_PORT, VALVE_2_PIN);
 8005b48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b4c:	4808      	ldr	r0, [pc, #32]	; (8005b70 <valveControl+0x78>)
 8005b4e:	f7fa fcfc 	bl	800054a <GPIO_SetBits>
		{
			g_stateValve_2 = PISTON_PUSH_UP;
			GPIO_ResetBits(VALVE_2_PORT, VALVE_2_PIN);
		}
	}
}
 8005b52:	e007      	b.n	8005b64 <valveControl+0x6c>
			g_stateValve_2 = PISTON_PUSH_UP;
 8005b54:	4b07      	ldr	r3, [pc, #28]	; (8005b74 <valveControl+0x7c>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	701a      	strb	r2, [r3, #0]
			GPIO_ResetBits(VALVE_2_PORT, VALVE_2_PIN);
 8005b5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b5e:	4804      	ldr	r0, [pc, #16]	; (8005b70 <valveControl+0x78>)
 8005b60:	f7fa fd02 	bl	8000568 <GPIO_ResetBits>
}
 8005b64:	bf00      	nop
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	20000312 	.word	0x20000312
 8005b70:	40020800 	.word	0x40020800
 8005b74:	20000313 	.word	0x20000313

08005b78 <GetStateValve>:
u8 GetStateValve(void)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
	return g_stateValve_1;
 8005b7c:	4b03      	ldr	r3, [pc, #12]	; (8005b8c <GetStateValve+0x14>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	20000312 	.word	0x20000312

08005b90 <dwCalculatorTime>:
#include "sys.h"
#include "timer.h"
#include "delay.h"

uint32_t dwCalculatorTime(uint32_t dwTimeInit,uint32_t dwTimeCurrent)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
	if(dwTimeCurrent >= dwTimeInit)
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d303      	bcc.n	8005baa <dwCalculatorTime+0x1a>
	{
		return (dwTimeCurrent - dwTimeInit);
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	e003      	b.n	8005bb2 <dwCalculatorTime+0x22>
	}else
	{
		return (0xFFFFFFFF + dwTimeCurrent - dwTimeInit);
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	3b01      	subs	r3, #1
	}
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <delay_ms>:
void delay_ms(u32 nms)
{	 	 
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b084      	sub	sp, #16
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
	uint32_t dwTimeInit = GetMilSecTick();
 8005bc6:	f7ff fcdf 	bl	8005588 <GetMilSecTick>
 8005bca:	60f8      	str	r0, [r7, #12]
	uint32_t dwTimeCurrent = 0;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	60bb      	str	r3, [r7, #8]

	do{
		dwTimeCurrent = GetMilSecTick();
 8005bd0:	f7ff fcda 	bl	8005588 <GetMilSecTick>
 8005bd4:	60b8      	str	r0, [r7, #8]
	}
	while(dwCalculatorTime(dwTimeInit, dwTimeCurrent)<nms);
 8005bd6:	68b9      	ldr	r1, [r7, #8]
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f7ff ffd9 	bl	8005b90 <dwCalculatorTime>
 8005bde:	4602      	mov	r2, r0
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d8f4      	bhi.n	8005bd0 <delay_ms+0x12>
}
 8005be6:	bf00      	nop
 8005be8:	bf00      	nop
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <main>:

/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/
int main(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
	static DeviceState_e DeviceStateTemp_e = ERROR_DEVICE;
	appInitCommon();
 8005bf4:	f000 f816 	bl	8005c24 <appInitCommon>

    /* Loop forever */
	while(1)
	{
		appStateManager();
 8005bf8:	f000 f882 	bl	8005d00 <appStateManager>
		if(DeviceStateTemp_e != eDeviceState)
 8005bfc:	4b07      	ldr	r3, [pc, #28]	; (8005c1c <main+0x2c>)
 8005bfe:	781a      	ldrb	r2, [r3, #0]
 8005c00:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <main+0x30>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d0f7      	beq.n	8005bf8 <main+0x8>
		{
			DeviceStateTemp_e = eDeviceState;
 8005c08:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <main+0x30>)
 8005c0a:	781a      	ldrb	r2, [r3, #0]
 8005c0c:	4b03      	ldr	r3, [pc, #12]	; (8005c1c <main+0x2c>)
 8005c0e:	701a      	strb	r2, [r3, #0]
			controlLed(eDeviceState);
 8005c10:	4b03      	ldr	r3, [pc, #12]	; (8005c20 <main+0x30>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7fd fbd1 	bl	80033bc <controlLed>
		appStateManager();
 8005c1a:	e7ed      	b.n	8005bf8 <main+0x8>
 8005c1c:	2000008c 	.word	0x2000008c
 8005c20:	20000329 	.word	0x20000329

08005c24 <appInitCommon>:
 * @param  None
 * @retval None
 */

static void appInitCommon(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0
	SystemCoreClockUpdate();
 8005c28:	f7fa fb12 	bl	8000250 <SystemCoreClockUpdate>
	buttonInit();
 8005c2c:	f7fa fe66 	bl	80008fc <buttonInit>
	proximitySensorInit();
 8005c30:	f7ff fcfa 	bl	8005628 <proximitySensorInit>
	currentSensorInit();
 8005c34:	f7ff fcc2 	bl	80055bc <currentSensorInit>
	valveInit();
 8005c38:	f7ff ff38 	bl	8005aac <valveInit>
	ledInit();
 8005c3c:	f7fd fc0a 	bl	8003454 <ledInit>
	TimerInit();
 8005c40:	f7ff fc80 	bl	8005544 <TimerInit>
	LCD_Init();
 8005c44:	f7fd f9d6 	bl	8002ff4 <LCD_Init>
	LCD_direction(1);
 8005c48:	2001      	movs	r0, #1
 8005c4a:	f7fd fb63 	bl	8003314 <LCD_direction>
	eCurrentState = STATE_APP_STARTUP;
 8005c4e:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <appInitCommon+0x40>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	701a      	strb	r2, [r3, #0]
	updateDataStopHandleCallBack(UpDateData);
 8005c54:	4804      	ldr	r0, [pc, #16]	; (8005c68 <appInitCommon+0x44>)
 8005c56:	f7fd fc2d 	bl	80034b4 <updateDataStopHandleCallBack>
	updateDataRunHandleCallBack(UpDateData);
 8005c5a:	4803      	ldr	r0, [pc, #12]	; (8005c68 <appInitCommon+0x44>)
 8005c5c:	f7ff fd3c 	bl	80056d8 <updateDataRunHandleCallBack>
	//Gui_Drawbmp16(0,0,gImage_logo);
}
 8005c60:	bf00      	nop
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	20000328 	.word	0x20000328
 8005c68:	08005ca5 	.word	0x08005ca5

08005c6c <setStateApp>:
 * @param  state: State of application
 * @retval None
 */

static void setStateApp(StateApp_e state)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	4603      	mov	r3, r0
 8005c74:	71fb      	strb	r3, [r7, #7]
	eCurrentState = state;
 8005c76:	4a04      	ldr	r2, [pc, #16]	; (8005c88 <setStateApp+0x1c>)
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	7013      	strb	r3, [r2, #0]
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	20000328 	.word	0x20000328

08005c8c <getStateApp>:
 * @brief  Get state of application
 * @param  None
 * @retval State of application
 */
static StateApp_e getStateApp(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
	return eCurrentState;
 8005c90:	4b03      	ldr	r3, [pc, #12]	; (8005ca0 <getStateApp+0x14>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	20000328 	.word	0x20000328

08005ca4 <UpDateData>:
 * @brief  Manager state application
 * @param  event: Su kien
 * @retval None
 */
static void UpDateData(void*arg)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
	Data_t pData = (Data_t)arg;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	60fb      	str	r3, [r7, #12]
	switch(pData->deviceState)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00a      	beq.n	8005cce <UpDateData+0x2a>
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d111      	bne.n	8005ce0 <UpDateData+0x3c>
	{
	case RUN:
		g_dwCountMiss = pData->dwCountMiss;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	4a0b      	ldr	r2, [pc, #44]	; (8005cf0 <UpDateData+0x4c>)
 8005cc2:	6013      	str	r3, [r2, #0]
		g_dwCounting = pData->dwCounting;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	4a0a      	ldr	r2, [pc, #40]	; (8005cf4 <UpDateData+0x50>)
 8005cca:	6013      	str	r3, [r2, #0]
		break;
 8005ccc:	e009      	b.n	8005ce2 <UpDateData+0x3e>
	case STOP:
		g_dwCountMax = pData->dwCountMax;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	4a09      	ldr	r2, [pc, #36]	; (8005cf8 <UpDateData+0x54>)
 8005cd4:	6013      	str	r3, [r2, #0]
		g_dwThold = pData->dwThold;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	4a08      	ldr	r2, [pc, #32]	; (8005cfc <UpDateData+0x58>)
 8005cdc:	6013      	str	r3, [r2, #0]
		break;
 8005cde:	e000      	b.n	8005ce2 <UpDateData+0x3e>
	default:
		break;
 8005ce0:	bf00      	nop
	}

}
 8005ce2:	bf00      	nop
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	20000320 	.word	0x20000320
 8005cf4:	20000318 	.word	0x20000318
 8005cf8:	20000314 	.word	0x20000314
 8005cfc:	20000324 	.word	0x20000324

08005d00 <appStateManager>:
static void appStateManager(void)
{
 8005d00:	b590      	push	{r4, r7, lr}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af04      	add	r7, sp, #16
	StateApp_e event = getStateApp();
 8005d06:	f7ff ffc1 	bl	8005c8c <getStateApp>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	71fb      	strb	r3, [r7, #7]
	switch(event)
 8005d0e:	79fb      	ldrb	r3, [r7, #7]
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	f000 80cf 	beq.w	8005eb4 <appStateManager+0x1b4>
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	f300 80d0 	bgt.w	8005ebc <appStateManager+0x1bc>
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <appStateManager+0x28>
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	f000 80a7 	beq.w	8005e74 <appStateManager+0x174>
		break;
	case STATE_APP_RESET:
		setStateApp(STATE_APP_STARTUP);
		break;
	default:
		break;
 8005d26:	e0c9      	b.n	8005ebc <appStateManager+0x1bc>
		switch(eDeviceState)
 8005d28:	4b68      	ldr	r3, [pc, #416]	; (8005ecc <appStateManager+0x1cc>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b03      	cmp	r3, #3
 8005d2e:	f200 80c7 	bhi.w	8005ec0 <appStateManager+0x1c0>
 8005d32:	a201      	add	r2, pc, #4	; (adr r2, 8005d38 <appStateManager+0x38>)
 8005d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d38:	08005e4f 	.word	0x08005e4f
 8005d3c:	08005d49 	.word	0x08005d49
 8005d40:	08005df1 	.word	0x08005df1
 8005d44:	08005d85 	.word	0x08005d85
			LCD_ClearCursor(20, 210, 320, 240, WHITE);
 8005d48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	23f0      	movs	r3, #240	; 0xf0
 8005d50:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005d54:	21d2      	movs	r1, #210	; 0xd2
 8005d56:	2014      	movs	r0, #20
 8005d58:	f7fd f8c4 	bl	8002ee4 <LCD_ClearCursor>
			Gui_StrCenter(20, 210, BLACK, WHITE, (u8*)"ERROR", 16, 1);
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	9302      	str	r3, [sp, #8]
 8005d60:	2310      	movs	r3, #16
 8005d62:	9301      	str	r3, [sp, #4]
 8005d64:	4b5a      	ldr	r3, [pc, #360]	; (8005ed0 <appStateManager+0x1d0>)
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	21d2      	movs	r1, #210	; 0xd2
 8005d70:	2014      	movs	r0, #20
 8005d72:	f7fc ff91 	bl	8002c98 <Gui_StrCenter>
			while(proKey()==0);
 8005d76:	bf00      	nop
 8005d78:	f000 f8ba 	bl	8005ef0 <proKey>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0fa      	beq.n	8005d78 <appStateManager+0x78>
			break;
 8005d82:	e076      	b.n	8005e72 <appStateManager+0x172>
			HMI(g_dwCountMax,g_dwCounting,g_dwCountMiss,g_dwThold,1);
 8005d84:	4b53      	ldr	r3, [pc, #332]	; (8005ed4 <appStateManager+0x1d4>)
 8005d86:	6818      	ldr	r0, [r3, #0]
 8005d88:	4b53      	ldr	r3, [pc, #332]	; (8005ed8 <appStateManager+0x1d8>)
 8005d8a:	6819      	ldr	r1, [r3, #0]
 8005d8c:	4b53      	ldr	r3, [pc, #332]	; (8005edc <appStateManager+0x1dc>)
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	4b53      	ldr	r3, [pc, #332]	; (8005ee0 <appStateManager+0x1e0>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2401      	movs	r4, #1
 8005d96:	9400      	str	r4, [sp, #0]
 8005d98:	f7fd fb9c 	bl	80034d4 <HMI>
			HMI(g_dwCountMax,g_dwCounting,g_dwCountMiss,g_dwThold,0);
 8005d9c:	4b4d      	ldr	r3, [pc, #308]	; (8005ed4 <appStateManager+0x1d4>)
 8005d9e:	6818      	ldr	r0, [r3, #0]
 8005da0:	4b4d      	ldr	r3, [pc, #308]	; (8005ed8 <appStateManager+0x1d8>)
 8005da2:	6819      	ldr	r1, [r3, #0]
 8005da4:	4b4d      	ldr	r3, [pc, #308]	; (8005edc <appStateManager+0x1dc>)
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	4b4d      	ldr	r3, [pc, #308]	; (8005ee0 <appStateManager+0x1e0>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2400      	movs	r4, #0
 8005dae:	9400      	str	r4, [sp, #0]
 8005db0:	f7fd fb90 	bl	80034d4 <HMI>
			LCD_ClearCursor(20, 210, 320, 240, WHITE);
 8005db4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	23f0      	movs	r3, #240	; 0xf0
 8005dbc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005dc0:	21d2      	movs	r1, #210	; 0xd2
 8005dc2:	2014      	movs	r0, #20
 8005dc4:	f7fd f88e 	bl	8002ee4 <LCD_ClearCursor>
			Gui_StrCenter(20, 210, BLACK, WHITE, (u8*)"PAUSE", 16, 1);
 8005dc8:	2301      	movs	r3, #1
 8005dca:	9302      	str	r3, [sp, #8]
 8005dcc:	2310      	movs	r3, #16
 8005dce:	9301      	str	r3, [sp, #4]
 8005dd0:	4b44      	ldr	r3, [pc, #272]	; (8005ee4 <appStateManager+0x1e4>)
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005dd8:	2200      	movs	r2, #0
 8005dda:	21d2      	movs	r1, #210	; 0xd2
 8005ddc:	2014      	movs	r0, #20
 8005dde:	f7fc ff5b 	bl	8002c98 <Gui_StrCenter>
			while(proKey() == 0);
 8005de2:	bf00      	nop
 8005de4:	f000 f884 	bl	8005ef0 <proKey>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0fa      	beq.n	8005de4 <appStateManager+0xe4>
			break;
 8005dee:	e040      	b.n	8005e72 <appStateManager+0x172>
			LCD_ClearCursor(20, 210, 320, 240, WHITE);
 8005df0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	23f0      	movs	r3, #240	; 0xf0
 8005df8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005dfc:	21d2      	movs	r1, #210	; 0xd2
 8005dfe:	2014      	movs	r0, #20
 8005e00:	f7fd f870 	bl	8002ee4 <LCD_ClearCursor>
			Gui_StrCenter(20, 210, BLACK, WHITE, (u8*)"RUN", 16, 1);
 8005e04:	2301      	movs	r3, #1
 8005e06:	9302      	str	r3, [sp, #8]
 8005e08:	2310      	movs	r3, #16
 8005e0a:	9301      	str	r3, [sp, #4]
 8005e0c:	4b36      	ldr	r3, [pc, #216]	; (8005ee8 <appStateManager+0x1e8>)
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e14:	2200      	movs	r2, #0
 8005e16:	21d2      	movs	r1, #210	; 0xd2
 8005e18:	2014      	movs	r0, #20
 8005e1a:	f7fc ff3d 	bl	8002c98 <Gui_StrCenter>
			HMI(g_dwCountMax,g_dwCounting,g_dwCountMiss,g_dwThold,1);
 8005e1e:	4b2d      	ldr	r3, [pc, #180]	; (8005ed4 <appStateManager+0x1d4>)
 8005e20:	6818      	ldr	r0, [r3, #0]
 8005e22:	4b2d      	ldr	r3, [pc, #180]	; (8005ed8 <appStateManager+0x1d8>)
 8005e24:	6819      	ldr	r1, [r3, #0]
 8005e26:	4b2d      	ldr	r3, [pc, #180]	; (8005edc <appStateManager+0x1dc>)
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	4b2d      	ldr	r3, [pc, #180]	; (8005ee0 <appStateManager+0x1e0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2401      	movs	r4, #1
 8005e30:	9400      	str	r4, [sp, #0]
 8005e32:	f7fd fb4f 	bl	80034d4 <HMI>
			setCountValue(g_dwCountMax, g_dwThold);
 8005e36:	4b27      	ldr	r3, [pc, #156]	; (8005ed4 <appStateManager+0x1d4>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a29      	ldr	r2, [pc, #164]	; (8005ee0 <appStateManager+0x1e0>)
 8005e3c:	6812      	ldr	r2, [r2, #0]
 8005e3e:	4611      	mov	r1, r2
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7ff fc59 	bl	80056f8 <setCountValue>
			setStateApp(STATE_APP_IDLE);
 8005e46:	2001      	movs	r0, #1
 8005e48:	f7ff ff10 	bl	8005c6c <setStateApp>
			break;
 8005e4c:	e011      	b.n	8005e72 <appStateManager+0x172>
			while(processMainMenu(g_dwCountMax,g_dwCounting,g_dwCountMiss,g_dwThold)==0);
 8005e4e:	bf00      	nop
 8005e50:	4b20      	ldr	r3, [pc, #128]	; (8005ed4 <appStateManager+0x1d4>)
 8005e52:	6818      	ldr	r0, [r3, #0]
 8005e54:	4b20      	ldr	r3, [pc, #128]	; (8005ed8 <appStateManager+0x1d8>)
 8005e56:	6819      	ldr	r1, [r3, #0]
 8005e58:	4b20      	ldr	r3, [pc, #128]	; (8005edc <appStateManager+0x1dc>)
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	4b20      	ldr	r3, [pc, #128]	; (8005ee0 <appStateManager+0x1e0>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f7fd fc90 	bl	8003784 <processMainMenu>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0f2      	beq.n	8005e50 <appStateManager+0x150>
			eDeviceState = PAUSE;
 8005e6a:	4b18      	ldr	r3, [pc, #96]	; (8005ecc <appStateManager+0x1cc>)
 8005e6c:	2203      	movs	r2, #3
 8005e6e:	701a      	strb	r2, [r3, #0]
			break;
 8005e70:	bf00      	nop
		break;
 8005e72:	e025      	b.n	8005ec0 <appStateManager+0x1c0>
		if(byProcessSequenceControl()== 1)
 8005e74:	f7ff fc56 	bl	8005724 <byProcessSequenceControl>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d105      	bne.n	8005e8a <appStateManager+0x18a>
			eDeviceState = PAUSE;
 8005e7e:	4b13      	ldr	r3, [pc, #76]	; (8005ecc <appStateManager+0x1cc>)
 8005e80:	2203      	movs	r2, #3
 8005e82:	701a      	strb	r2, [r3, #0]
			setStateApp(STATE_APP_STARTUP);
 8005e84:	2000      	movs	r0, #0
 8005e86:	f7ff fef1 	bl	8005c6c <setStateApp>
		if(g_dwCounting !=g_dwCountingTemp)
 8005e8a:	4b13      	ldr	r3, [pc, #76]	; (8005ed8 <appStateManager+0x1d8>)
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	4b17      	ldr	r3, [pc, #92]	; (8005eec <appStateManager+0x1ec>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d00b      	beq.n	8005eae <appStateManager+0x1ae>
		HMI(g_dwCountMax,g_dwCounting,g_dwCountMiss,g_dwThold,1);
 8005e96:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <appStateManager+0x1d4>)
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	4b0f      	ldr	r3, [pc, #60]	; (8005ed8 <appStateManager+0x1d8>)
 8005e9c:	6819      	ldr	r1, [r3, #0]
 8005e9e:	4b0f      	ldr	r3, [pc, #60]	; (8005edc <appStateManager+0x1dc>)
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	4b0f      	ldr	r3, [pc, #60]	; (8005ee0 <appStateManager+0x1e0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2401      	movs	r4, #1
 8005ea8:	9400      	str	r4, [sp, #0]
 8005eaa:	f7fd fb13 	bl	80034d4 <HMI>
		proKey();
 8005eae:	f000 f81f 	bl	8005ef0 <proKey>
		break;
 8005eb2:	e006      	b.n	8005ec2 <appStateManager+0x1c2>
		setStateApp(STATE_APP_STARTUP);
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	f7ff fed9 	bl	8005c6c <setStateApp>
		break;
 8005eba:	e002      	b.n	8005ec2 <appStateManager+0x1c2>
		break;
 8005ebc:	bf00      	nop
 8005ebe:	e000      	b.n	8005ec2 <appStateManager+0x1c2>
		break;
 8005ec0:	bf00      	nop

	}
}
 8005ec2:	bf00      	nop
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd90      	pop	{r4, r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20000329 	.word	0x20000329
 8005ed0:	080060f8 	.word	0x080060f8
 8005ed4:	20000314 	.word	0x20000314
 8005ed8:	20000318 	.word	0x20000318
 8005edc:	20000320 	.word	0x20000320
 8005ee0:	20000324 	.word	0x20000324
 8005ee4:	08006100 	.word	0x08006100
 8005ee8:	08006108 	.word	0x08006108
 8005eec:	2000031c 	.word	0x2000031c

08005ef0 <proKey>:
static u8 proKey(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
	ValueKey_e valueKeyTemp = NOKEY;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	71bb      	strb	r3, [r7, #6]
	u8 state = 0;
 8005efa:	2300      	movs	r3, #0
 8005efc:	71fb      	strb	r3, [r7, #7]
	valueKeyTemp = processEventButton();
 8005efe:	f7fa fd51 	bl	80009a4 <processEventButton>
 8005f02:	4603      	mov	r3, r0
 8005f04:	71bb      	strb	r3, [r7, #6]
	if(valueKeyTemp == SELECT)
 8005f06:	79bb      	ldrb	r3, [r7, #6]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d111      	bne.n	8005f30 <proKey+0x40>
	{
		setStateApp(STATE_APP_STARTUP);
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	f7ff fead 	bl	8005c6c <setStateApp>
		if(eDeviceState == RUN)
 8005f12:	4b0f      	ldr	r3, [pc, #60]	; (8005f50 <proKey+0x60>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d105      	bne.n	8005f26 <proKey+0x36>
		{
			eDeviceState = PAUSE;
 8005f1a:	4b0d      	ldr	r3, [pc, #52]	; (8005f50 <proKey+0x60>)
 8005f1c:	2203      	movs	r2, #3
 8005f1e:	701a      	strb	r2, [r3, #0]
			state = 1;
 8005f20:	2301      	movs	r3, #1
 8005f22:	71fb      	strb	r3, [r7, #7]
 8005f24:	e004      	b.n	8005f30 <proKey+0x40>
		}else
		{
		eDeviceState = RUN;
 8005f26:	4b0a      	ldr	r3, [pc, #40]	; (8005f50 <proKey+0x60>)
 8005f28:	2202      	movs	r2, #2
 8005f2a:	701a      	strb	r2, [r3, #0]
		state = 1;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	71fb      	strb	r3, [r7, #7]
		}

	}
	if(valueKeyTemp == RETURN)
 8005f30:	79bb      	ldrb	r3, [r7, #6]
 8005f32:	2b11      	cmp	r3, #17
 8005f34:	d107      	bne.n	8005f46 <proKey+0x56>
	{
		setStateApp(STATE_APP_STARTUP);
 8005f36:	2000      	movs	r0, #0
 8005f38:	f7ff fe98 	bl	8005c6c <setStateApp>
		eDeviceState = STOP;
 8005f3c:	4b04      	ldr	r3, [pc, #16]	; (8005f50 <proKey+0x60>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	701a      	strb	r2, [r3, #0]
		state = 1;
 8005f42:	2301      	movs	r3, #1
 8005f44:	71fb      	strb	r3, [r7, #7]
	}
	return state;
 8005f46:	79fb      	ldrb	r3, [r7, #7]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	20000329 	.word	0x20000329

08005f54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005f54:	480d      	ldr	r0, [pc, #52]	; (8005f8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005f56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005f58:	f7fa f944 	bl	80001e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f5c:	480c      	ldr	r0, [pc, #48]	; (8005f90 <LoopForever+0x6>)
  ldr r1, =_edata
 8005f5e:	490d      	ldr	r1, [pc, #52]	; (8005f94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005f60:	4a0d      	ldr	r2, [pc, #52]	; (8005f98 <LoopForever+0xe>)
  movs r3, #0
 8005f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f64:	e002      	b.n	8005f6c <LoopCopyDataInit>

08005f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f6a:	3304      	adds	r3, #4

08005f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f70:	d3f9      	bcc.n	8005f66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f72:	4a0a      	ldr	r2, [pc, #40]	; (8005f9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005f74:	4c0a      	ldr	r4, [pc, #40]	; (8005fa0 <LoopForever+0x16>)
  movs r3, #0
 8005f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f78:	e001      	b.n	8005f7e <LoopFillZerobss>

08005f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f7c:	3204      	adds	r2, #4

08005f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f80:	d3fb      	bcc.n	8005f7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005f82:	f000 f811 	bl	8005fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005f86:	f7ff fe33 	bl	8005bf0 <main>

08005f8a <LoopForever>:

LoopForever:
    b LoopForever
 8005f8a:	e7fe      	b.n	8005f8a <LoopForever>
  ldr   r0, =_estack
 8005f8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8005f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f94:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8005f98:	080077c4 	.word	0x080077c4
  ldr r2, =_sbss
 8005f9c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8005fa0:	2000032c 	.word	0x2000032c

08005fa4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005fa4:	e7fe      	b.n	8005fa4 <ADC_IRQHandler>
	...

08005fa8 <__libc_init_array>:
 8005fa8:	b570      	push	{r4, r5, r6, lr}
 8005faa:	4d0d      	ldr	r5, [pc, #52]	; (8005fe0 <__libc_init_array+0x38>)
 8005fac:	4c0d      	ldr	r4, [pc, #52]	; (8005fe4 <__libc_init_array+0x3c>)
 8005fae:	1b64      	subs	r4, r4, r5
 8005fb0:	10a4      	asrs	r4, r4, #2
 8005fb2:	2600      	movs	r6, #0
 8005fb4:	42a6      	cmp	r6, r4
 8005fb6:	d109      	bne.n	8005fcc <__libc_init_array+0x24>
 8005fb8:	4d0b      	ldr	r5, [pc, #44]	; (8005fe8 <__libc_init_array+0x40>)
 8005fba:	4c0c      	ldr	r4, [pc, #48]	; (8005fec <__libc_init_array+0x44>)
 8005fbc:	f000 f820 	bl	8006000 <_init>
 8005fc0:	1b64      	subs	r4, r4, r5
 8005fc2:	10a4      	asrs	r4, r4, #2
 8005fc4:	2600      	movs	r6, #0
 8005fc6:	42a6      	cmp	r6, r4
 8005fc8:	d105      	bne.n	8005fd6 <__libc_init_array+0x2e>
 8005fca:	bd70      	pop	{r4, r5, r6, pc}
 8005fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd0:	4798      	blx	r3
 8005fd2:	3601      	adds	r6, #1
 8005fd4:	e7ee      	b.n	8005fb4 <__libc_init_array+0xc>
 8005fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fda:	4798      	blx	r3
 8005fdc:	3601      	adds	r6, #1
 8005fde:	e7f2      	b.n	8005fc6 <__libc_init_array+0x1e>
 8005fe0:	080077bc 	.word	0x080077bc
 8005fe4:	080077bc 	.word	0x080077bc
 8005fe8:	080077bc 	.word	0x080077bc
 8005fec:	080077c0 	.word	0x080077c0

08005ff0 <memset>:
 8005ff0:	4402      	add	r2, r0
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d100      	bne.n	8005ffa <memset+0xa>
 8005ff8:	4770      	bx	lr
 8005ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8005ffe:	e7f9      	b.n	8005ff4 <memset+0x4>

08006000 <_init>:
 8006000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006002:	bf00      	nop
 8006004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006006:	bc08      	pop	{r3}
 8006008:	469e      	mov	lr, r3
 800600a:	4770      	bx	lr

0800600c <_fini>:
 800600c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600e:	bf00      	nop
 8006010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006012:	bc08      	pop	{r3}
 8006014:	469e      	mov	lr, r3
 8006016:	4770      	bx	lr
