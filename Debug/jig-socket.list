
jig-socket.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065c0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017a8  08006754  08006754  00016754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007efc  08007efc  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08007efc  08007efc  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007efc  08007efc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007efc  08007efc  00017efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f00  08007f00  00017f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08007f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000094  08007f98  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08007f98  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009537  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a2  00000000  00000000  000295fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0002b8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000870  00000000  00000000  0002c258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e6f4  00000000  00000000  0002cac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb20  00000000  00000000  0003b1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00047fc3  00000000  00000000  00046cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008ec9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002630  00000000  00000000  0008ecf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000094 	.word	0x20000094
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800673c 	.word	0x0800673c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000098 	.word	0x20000098
 80001d0:	0800673c 	.word	0x0800673c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001e8:	4b16      	ldr	r3, [pc, #88]	; (8000244 <SystemInit+0x60>)
 80001ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001ee:	4a15      	ldr	r2, [pc, #84]	; (8000244 <SystemInit+0x60>)
 80001f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001f8:	4b13      	ldr	r3, [pc, #76]	; (8000248 <SystemInit+0x64>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a12      	ldr	r2, [pc, #72]	; (8000248 <SystemInit+0x64>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000204:	4b10      	ldr	r3, [pc, #64]	; (8000248 <SystemInit+0x64>)
 8000206:	2200      	movs	r2, #0
 8000208:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800020a:	4b0f      	ldr	r3, [pc, #60]	; (8000248 <SystemInit+0x64>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a0e      	ldr	r2, [pc, #56]	; (8000248 <SystemInit+0x64>)
 8000210:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000218:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800021a:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <SystemInit+0x64>)
 800021c:	4a0b      	ldr	r2, [pc, #44]	; (800024c <SystemInit+0x68>)
 800021e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <SystemInit+0x64>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a08      	ldr	r2, [pc, #32]	; (8000248 <SystemInit+0x64>)
 8000226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800022a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <SystemInit+0x64>)
 800022e:	2200      	movs	r2, #0
 8000230:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000232:	f000 f88f 	bl	8000354 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000236:	4b03      	ldr	r3, [pc, #12]	; (8000244 <SystemInit+0x60>)
 8000238:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800023c:	609a      	str	r2, [r3, #8]
#endif
}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	e000ed00 	.word	0xe000ed00
 8000248:	40023800 	.word	0x40023800
 800024c:	24003010 	.word	0x24003010

08000250 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000250:	b480      	push	{r7}
 8000252:	b087      	sub	sp, #28
 8000254:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000256:	2300      	movs	r3, #0
 8000258:	613b      	str	r3, [r7, #16]
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]
 800025e:	2302      	movs	r3, #2
 8000260:	60fb      	str	r3, [r7, #12]
 8000262:	2300      	movs	r3, #0
 8000264:	60bb      	str	r3, [r7, #8]
 8000266:	2302      	movs	r3, #2
 8000268:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800026a:	4b35      	ldr	r3, [pc, #212]	; (8000340 <SystemCoreClockUpdate+0xf0>)
 800026c:	689b      	ldr	r3, [r3, #8]
 800026e:	f003 030c 	and.w	r3, r3, #12
 8000272:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000274:	693b      	ldr	r3, [r7, #16]
 8000276:	2b08      	cmp	r3, #8
 8000278:	d011      	beq.n	800029e <SystemCoreClockUpdate+0x4e>
 800027a:	693b      	ldr	r3, [r7, #16]
 800027c:	2b08      	cmp	r3, #8
 800027e:	d844      	bhi.n	800030a <SystemCoreClockUpdate+0xba>
 8000280:	693b      	ldr	r3, [r7, #16]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d003      	beq.n	800028e <SystemCoreClockUpdate+0x3e>
 8000286:	693b      	ldr	r3, [r7, #16]
 8000288:	2b04      	cmp	r3, #4
 800028a:	d004      	beq.n	8000296 <SystemCoreClockUpdate+0x46>
 800028c:	e03d      	b.n	800030a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800028e:	4b2d      	ldr	r3, [pc, #180]	; (8000344 <SystemCoreClockUpdate+0xf4>)
 8000290:	4a2d      	ldr	r2, [pc, #180]	; (8000348 <SystemCoreClockUpdate+0xf8>)
 8000292:	601a      	str	r2, [r3, #0]
      break;
 8000294:	e03d      	b.n	8000312 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000296:	4b2b      	ldr	r3, [pc, #172]	; (8000344 <SystemCoreClockUpdate+0xf4>)
 8000298:	4a2c      	ldr	r2, [pc, #176]	; (800034c <SystemCoreClockUpdate+0xfc>)
 800029a:	601a      	str	r2, [r3, #0]
      break;
 800029c:	e039      	b.n	8000312 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800029e:	4b28      	ldr	r3, [pc, #160]	; (8000340 <SystemCoreClockUpdate+0xf0>)
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	0d9b      	lsrs	r3, r3, #22
 80002a4:	f003 0301 	and.w	r3, r3, #1
 80002a8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80002aa:	4b25      	ldr	r3, [pc, #148]	; (8000340 <SystemCoreClockUpdate+0xf0>)
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002b2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d00c      	beq.n	80002d4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002ba:	4a24      	ldr	r2, [pc, #144]	; (800034c <SystemCoreClockUpdate+0xfc>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	fbb2 f3f3 	udiv	r3, r2, r3
 80002c2:	4a1f      	ldr	r2, [pc, #124]	; (8000340 <SystemCoreClockUpdate+0xf0>)
 80002c4:	6852      	ldr	r2, [r2, #4]
 80002c6:	0992      	lsrs	r2, r2, #6
 80002c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002cc:	fb02 f303 	mul.w	r3, r2, r3
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	e00b      	b.n	80002ec <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002d4:	4a1c      	ldr	r2, [pc, #112]	; (8000348 <SystemCoreClockUpdate+0xf8>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002dc:	4a18      	ldr	r2, [pc, #96]	; (8000340 <SystemCoreClockUpdate+0xf0>)
 80002de:	6852      	ldr	r2, [r2, #4]
 80002e0:	0992      	lsrs	r2, r2, #6
 80002e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002e6:	fb02 f303 	mul.w	r3, r2, r3
 80002ea:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002ec:	4b14      	ldr	r3, [pc, #80]	; (8000340 <SystemCoreClockUpdate+0xf0>)
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	0c1b      	lsrs	r3, r3, #16
 80002f2:	f003 0303 	and.w	r3, r3, #3
 80002f6:	3301      	adds	r3, #1
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002fc:	697a      	ldr	r2, [r7, #20]
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	fbb2 f3f3 	udiv	r3, r2, r3
 8000304:	4a0f      	ldr	r2, [pc, #60]	; (8000344 <SystemCoreClockUpdate+0xf4>)
 8000306:	6013      	str	r3, [r2, #0]
      break;
 8000308:	e003      	b.n	8000312 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <SystemCoreClockUpdate+0xf4>)
 800030c:	4a0e      	ldr	r2, [pc, #56]	; (8000348 <SystemCoreClockUpdate+0xf8>)
 800030e:	601a      	str	r2, [r3, #0]
      break;
 8000310:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <SystemCoreClockUpdate+0xf0>)
 8000314:	689b      	ldr	r3, [r3, #8]
 8000316:	091b      	lsrs	r3, r3, #4
 8000318:	f003 030f 	and.w	r3, r3, #15
 800031c:	4a0c      	ldr	r2, [pc, #48]	; (8000350 <SystemCoreClockUpdate+0x100>)
 800031e:	5cd3      	ldrb	r3, [r2, r3]
 8000320:	b2db      	uxtb	r3, r3
 8000322:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000324:	4b07      	ldr	r3, [pc, #28]	; (8000344 <SystemCoreClockUpdate+0xf4>)
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	fa22 f303 	lsr.w	r3, r2, r3
 800032e:	4a05      	ldr	r2, [pc, #20]	; (8000344 <SystemCoreClockUpdate+0xf4>)
 8000330:	6013      	str	r3, [r2, #0]
}
 8000332:	bf00      	nop
 8000334:	371c      	adds	r7, #28
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40023800 	.word	0x40023800
 8000344:	20000000 	.word	0x20000000
 8000348:	00f42400 	.word	0x00f42400
 800034c:	017d7840 	.word	0x017d7840
 8000350:	20000004 	.word	0x20000004

08000354 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000358:	4b23      	ldr	r3, [pc, #140]	; (80003e8 <SetSysClock+0x94>)
 800035a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800035c:	4a22      	ldr	r2, [pc, #136]	; (80003e8 <SetSysClock+0x94>)
 800035e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000362:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000364:	4b21      	ldr	r3, [pc, #132]	; (80003ec <SetSysClock+0x98>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a20      	ldr	r2, [pc, #128]	; (80003ec <SetSysClock+0x98>)
 800036a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800036e:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000370:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <SetSysClock+0x94>)
 8000372:	4a1d      	ldr	r2, [pc, #116]	; (80003e8 <SetSysClock+0x94>)
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000378:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <SetSysClock+0x94>)
 800037a:	4a1b      	ldr	r2, [pc, #108]	; (80003e8 <SetSysClock+0x94>)
 800037c:	689b      	ldr	r3, [r3, #8]
 800037e:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000380:	4b19      	ldr	r3, [pc, #100]	; (80003e8 <SetSysClock+0x94>)
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	4a18      	ldr	r2, [pc, #96]	; (80003e8 <SetSysClock+0x94>)
 8000386:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800038a:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800038c:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <SetSysClock+0x94>)
 800038e:	4a18      	ldr	r2, [pc, #96]	; (80003f0 <SetSysClock+0x9c>)
 8000390:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <SetSysClock+0x94>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <SetSysClock+0x94>)
 8000398:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800039c:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800039e:	bf00      	nop
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <SetSysClock+0x94>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d0f9      	beq.n	80003a0 <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SetSysClock+0xa0>)
 80003ae:	f240 6202 	movw	r2, #1538	; 0x602
 80003b2:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <SetSysClock+0x94>)
 80003b6:	689b      	ldr	r3, [r3, #8]
 80003b8:	4a0b      	ldr	r2, [pc, #44]	; (80003e8 <SetSysClock+0x94>)
 80003ba:	f023 0303 	bic.w	r3, r3, #3
 80003be:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <SetSysClock+0x94>)
 80003c2:	689b      	ldr	r3, [r3, #8]
 80003c4:	4a08      	ldr	r2, [pc, #32]	; (80003e8 <SetSysClock+0x94>)
 80003c6:	f043 0302 	orr.w	r3, r3, #2
 80003ca:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003cc:	bf00      	nop
 80003ce:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <SetSysClock+0x94>)
 80003d0:	689b      	ldr	r3, [r3, #8]
 80003d2:	f003 030c 	and.w	r3, r3, #12
 80003d6:	2b08      	cmp	r3, #8
 80003d8:	d1f9      	bne.n	80003ce <SetSysClock+0x7a>
}
 80003da:	bf00      	nop
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40023800 	.word	0x40023800
 80003ec:	40007000 	.word	0x40007000
 80003f0:	08015410 	.word	0x08015410
 80003f4:	40023c00 	.word	0x40023c00

080003f8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b087      	sub	sp, #28
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
 8000406:	2300      	movs	r3, #0
 8000408:	613b      	str	r3, [r7, #16]
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
 8000412:	e076      	b.n	8000502 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000414:	2201      	movs	r2, #1
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	fa02 f303 	lsl.w	r3, r2, r3
 800041c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	693a      	ldr	r2, [r7, #16]
 8000424:	4013      	ands	r3, r2
 8000426:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000428:	68fa      	ldr	r2, [r7, #12]
 800042a:	693b      	ldr	r3, [r7, #16]
 800042c:	429a      	cmp	r2, r3
 800042e:	d165      	bne.n	80004fc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	005b      	lsls	r3, r3, #1
 8000438:	2103      	movs	r1, #3
 800043a:	fa01 f303 	lsl.w	r3, r1, r3
 800043e:	43db      	mvns	r3, r3
 8000440:	401a      	ands	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	791b      	ldrb	r3, [r3, #4]
 800044e:	4619      	mov	r1, r3
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	fa01 f303 	lsl.w	r3, r1, r3
 8000458:	431a      	orrs	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	791b      	ldrb	r3, [r3, #4]
 8000462:	2b01      	cmp	r3, #1
 8000464:	d003      	beq.n	800046e <GPIO_Init+0x76>
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	791b      	ldrb	r3, [r3, #4]
 800046a:	2b02      	cmp	r3, #2
 800046c:	d12e      	bne.n	80004cc <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	689a      	ldr	r2, [r3, #8]
 8000472:	697b      	ldr	r3, [r7, #20]
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	2103      	movs	r1, #3
 8000478:	fa01 f303 	lsl.w	r3, r1, r3
 800047c:	43db      	mvns	r3, r3
 800047e:	401a      	ands	r2, r3
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	689a      	ldr	r2, [r3, #8]
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	795b      	ldrb	r3, [r3, #5]
 800048c:	4619      	mov	r1, r3
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	fa01 f303 	lsl.w	r3, r1, r3
 8000496:	431a      	orrs	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	685a      	ldr	r2, [r3, #4]
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	4619      	mov	r1, r3
 80004a6:	2301      	movs	r3, #1
 80004a8:	408b      	lsls	r3, r1
 80004aa:	43db      	mvns	r3, r3
 80004ac:	401a      	ands	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	683a      	ldr	r2, [r7, #0]
 80004b8:	7992      	ldrb	r2, [r2, #6]
 80004ba:	4611      	mov	r1, r2
 80004bc:	697a      	ldr	r2, [r7, #20]
 80004be:	b292      	uxth	r2, r2
 80004c0:	fa01 f202 	lsl.w	r2, r1, r2
 80004c4:	b292      	uxth	r2, r2
 80004c6:	431a      	orrs	r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	68da      	ldr	r2, [r3, #12]
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	2103      	movs	r1, #3
 80004d8:	fa01 f303 	lsl.w	r3, r1, r3
 80004dc:	43db      	mvns	r3, r3
 80004de:	401a      	ands	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	68da      	ldr	r2, [r3, #12]
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	79db      	ldrb	r3, [r3, #7]
 80004ec:	4619      	mov	r1, r3
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	431a      	orrs	r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	3301      	adds	r3, #1
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	2b0f      	cmp	r3, #15
 8000506:	d985      	bls.n	8000414 <GPIO_Init+0x1c>
    }
  }
}
 8000508:	bf00      	nop
 800050a:	bf00      	nop
 800050c:	371c      	adds	r7, #28
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000516:	b480      	push	{r7}
 8000518:	b085      	sub	sp, #20
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	460b      	mov	r3, r1
 8000520:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000522:	2300      	movs	r3, #0
 8000524:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	691a      	ldr	r2, [r3, #16]
 800052a:	887b      	ldrh	r3, [r7, #2]
 800052c:	4013      	ands	r3, r2
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000532:	2301      	movs	r3, #1
 8000534:	73fb      	strb	r3, [r7, #15]
 8000536:	e001      	b.n	800053c <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000538:	2300      	movs	r3, #0
 800053a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800053c:	7bfb      	ldrb	r3, [r7, #15]
}
 800053e:	4618      	mov	r0, r3
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr

0800054a <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800054a:	b480      	push	{r7}
 800054c:	b083      	sub	sp, #12
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
 8000552:	460b      	mov	r3, r1
 8000554:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	887a      	ldrh	r2, [r7, #2]
 800055a:	831a      	strh	r2, [r3, #24]
}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	887a      	ldrh	r2, [r7, #2]
 8000578:	835a      	strh	r2, [r3, #26]
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000586:	b480      	push	{r7}
 8000588:	b085      	sub	sp, #20
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
 800058e:	460b      	mov	r3, r1
 8000590:	807b      	strh	r3, [r7, #2]
 8000592:	4613      	mov	r3, r2
 8000594:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800059e:	787a      	ldrb	r2, [r7, #1]
 80005a0:	887b      	ldrh	r3, [r7, #2]
 80005a2:	f003 0307 	and.w	r3, r3, #7
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ac:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005ae:	887b      	ldrh	r3, [r7, #2]
 80005b0:	08db      	lsrs	r3, r3, #3
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	3208      	adds	r2, #8
 80005ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005be:	887b      	ldrh	r3, [r7, #2]
 80005c0:	f003 0307 	and.w	r3, r3, #7
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	210f      	movs	r1, #15
 80005c8:	fa01 f303 	lsl.w	r3, r1, r3
 80005cc:	43db      	mvns	r3, r3
 80005ce:	8879      	ldrh	r1, [r7, #2]
 80005d0:	08c9      	lsrs	r1, r1, #3
 80005d2:	b289      	uxth	r1, r1
 80005d4:	4608      	mov	r0, r1
 80005d6:	ea02 0103 	and.w	r1, r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f100 0208 	add.w	r2, r0, #8
 80005e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80005e4:	887b      	ldrh	r3, [r7, #2]
 80005e6:	08db      	lsrs	r3, r3, #3
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	461a      	mov	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3208      	adds	r2, #8
 80005f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	4313      	orrs	r3, r2
 80005f8:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80005fa:	887b      	ldrh	r3, [r7, #2]
 80005fc:	08db      	lsrs	r3, r3, #3
 80005fe:	b29b      	uxth	r3, r3
 8000600:	461a      	mov	r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	3208      	adds	r2, #8
 8000606:	68b9      	ldr	r1, [r7, #8]
 8000608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000618:	b480      	push	{r7}
 800061a:	b089      	sub	sp, #36	; 0x24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
 800062c:	2302      	movs	r3, #2
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	2302      	movs	r3, #2
 8000636:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000638:	4b4a      	ldr	r3, [pc, #296]	; (8000764 <RCC_GetClocksFreq+0x14c>)
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	f003 030c 	and.w	r3, r3, #12
 8000640:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000642:	69bb      	ldr	r3, [r7, #24]
 8000644:	2b08      	cmp	r3, #8
 8000646:	d011      	beq.n	800066c <RCC_GetClocksFreq+0x54>
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	2b08      	cmp	r3, #8
 800064c:	d844      	bhi.n	80006d8 <RCC_GetClocksFreq+0xc0>
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d003      	beq.n	800065c <RCC_GetClocksFreq+0x44>
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	2b04      	cmp	r3, #4
 8000658:	d004      	beq.n	8000664 <RCC_GetClocksFreq+0x4c>
 800065a:	e03d      	b.n	80006d8 <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a42      	ldr	r2, [pc, #264]	; (8000768 <RCC_GetClocksFreq+0x150>)
 8000660:	601a      	str	r2, [r3, #0]
    break;
 8000662:	e03d      	b.n	80006e0 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a41      	ldr	r2, [pc, #260]	; (800076c <RCC_GetClocksFreq+0x154>)
 8000668:	601a      	str	r2, [r3, #0]
    break;
 800066a:	e039      	b.n	80006e0 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800066c:	4b3d      	ldr	r3, [pc, #244]	; (8000764 <RCC_GetClocksFreq+0x14c>)
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	0d9b      	lsrs	r3, r3, #22
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000678:	4b3a      	ldr	r3, [pc, #232]	; (8000764 <RCC_GetClocksFreq+0x14c>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000680:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d00c      	beq.n	80006a2 <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000688:	4a38      	ldr	r2, [pc, #224]	; (800076c <RCC_GetClocksFreq+0x154>)
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000690:	4a34      	ldr	r2, [pc, #208]	; (8000764 <RCC_GetClocksFreq+0x14c>)
 8000692:	6852      	ldr	r2, [r2, #4]
 8000694:	0992      	lsrs	r2, r2, #6
 8000696:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800069a:	fb02 f303 	mul.w	r3, r2, r3
 800069e:	61fb      	str	r3, [r7, #28]
 80006a0:	e00b      	b.n	80006ba <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80006a2:	4a31      	ldr	r2, [pc, #196]	; (8000768 <RCC_GetClocksFreq+0x150>)
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006aa:	4a2e      	ldr	r2, [pc, #184]	; (8000764 <RCC_GetClocksFreq+0x14c>)
 80006ac:	6852      	ldr	r2, [r2, #4]
 80006ae:	0992      	lsrs	r2, r2, #6
 80006b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80006ba:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <RCC_GetClocksFreq+0x14c>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	0c1b      	lsrs	r3, r3, #16
 80006c0:	f003 0303 	and.w	r3, r3, #3
 80006c4:	3301      	adds	r3, #1
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80006ca:	69fa      	ldr	r2, [r7, #28]
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	601a      	str	r2, [r3, #0]
    break;
 80006d6:	e003      	b.n	80006e0 <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a23      	ldr	r2, [pc, #140]	; (8000768 <RCC_GetClocksFreq+0x150>)
 80006dc:	601a      	str	r2, [r3, #0]
    break;
 80006de:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80006e0:	4b20      	ldr	r3, [pc, #128]	; (8000764 <RCC_GetClocksFreq+0x14c>)
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006e8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	091b      	lsrs	r3, r3, #4
 80006ee:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80006f0:	4a1f      	ldr	r2, [pc, #124]	; (8000770 <RCC_GetClocksFreq+0x158>)
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	4413      	add	r3, r2
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	40da      	lsrs	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <RCC_GetClocksFreq+0x14c>)
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000710:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000712:	69bb      	ldr	r3, [r7, #24]
 8000714:	0a9b      	lsrs	r3, r3, #10
 8000716:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000718:	4a15      	ldr	r2, [pc, #84]	; (8000770 <RCC_GetClocksFreq+0x158>)
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	4413      	add	r3, r2
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	685a      	ldr	r2, [r3, #4]
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	40da      	lsrs	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <RCC_GetClocksFreq+0x14c>)
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000738:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	0b5b      	lsrs	r3, r3, #13
 800073e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000740:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <RCC_GetClocksFreq+0x158>)
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	4413      	add	r3, r2
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	685a      	ldr	r2, [r3, #4]
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	40da      	lsrs	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	60da      	str	r2, [r3, #12]
}
 8000758:	bf00      	nop
 800075a:	3724      	adds	r7, #36	; 0x24
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	40023800 	.word	0x40023800
 8000768:	00f42400 	.word	0x00f42400
 800076c:	017d7840 	.word	0x017d7840
 8000770:	20000014 	.word	0x20000014

08000774 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d006      	beq.n	8000794 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800078a:	4909      	ldr	r1, [pc, #36]	; (80007b0 <RCC_AHB1PeriphClockCmd+0x3c>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4313      	orrs	r3, r2
 8000790:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000792:	e006      	b.n	80007a2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	43db      	mvns	r3, r3
 800079c:	4904      	ldr	r1, [pc, #16]	; (80007b0 <RCC_AHB1PeriphClockCmd+0x3c>)
 800079e:	4013      	ands	r3, r2
 80007a0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800

080007b4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007c0:	78fb      	ldrb	r3, [r7, #3]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d006      	beq.n	80007d4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <RCC_APB2PeriphClockCmd+0x3c>)
 80007c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007ca:	4909      	ldr	r1, [pc, #36]	; (80007f0 <RCC_APB2PeriphClockCmd+0x3c>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4313      	orrs	r3, r2
 80007d0:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80007d2:	e006      	b.n	80007e2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <RCC_APB2PeriphClockCmd+0x3c>)
 80007d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	43db      	mvns	r3, r3
 80007dc:	4904      	ldr	r1, [pc, #16]	; (80007f0 <RCC_APB2PeriphClockCmd+0x3c>)
 80007de:	4013      	ands	r3, r2
 80007e0:	644b      	str	r3, [r1, #68]	; 0x44
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000800:	78fb      	ldrb	r3, [r7, #3]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d006      	beq.n	8000814 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <RCC_APB2PeriphResetCmd+0x3c>)
 8000808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800080a:	4909      	ldr	r1, [pc, #36]	; (8000830 <RCC_APB2PeriphResetCmd+0x3c>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4313      	orrs	r3, r2
 8000810:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000812:	e006      	b.n	8000822 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <RCC_APB2PeriphResetCmd+0x3c>)
 8000816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	43db      	mvns	r3, r3
 800081c:	4904      	ldr	r1, [pc, #16]	; (8000830 <RCC_APB2PeriphResetCmd+0x3c>)
 800081e:	4013      	ands	r3, r2
 8000820:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000848:	89fb      	ldrh	r3, [r7, #14]
 800084a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800084e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	881a      	ldrh	r2, [r3, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	885b      	ldrh	r3, [r3, #2]
 8000858:	4313      	orrs	r3, r2
 800085a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000860:	4313      	orrs	r3, r2
 8000862:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000868:	4313      	orrs	r3, r2
 800086a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000870:	4313      	orrs	r3, r2
 8000872:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000878:	4313      	orrs	r3, r2
 800087a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000880:	4313      	orrs	r3, r2
 8000882:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000888:	4313      	orrs	r3, r2
 800088a:	b29a      	uxth	r2, r3
 800088c:	89fb      	ldrh	r3, [r7, #14]
 800088e:	4313      	orrs	r3, r2
 8000890:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	89fa      	ldrh	r2, [r7, #14]
 8000896:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	8b9b      	ldrh	r3, [r3, #28]
 800089c:	b29b      	uxth	r3, r3
 800089e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	8a1a      	ldrh	r2, [r3, #16]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	821a      	strh	r2, [r3, #16]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d008      	beq.n	80008e0 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d8:	b29a      	uxth	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 80008de:	e007      	b.n	80008f0 <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	801a      	strh	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <FLASH_SetLatency>:
  *       FLASH_Latency_0 and FLASH_Latency_15. 
  *         
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <FLASH_SetLatency+0x1c>)
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	701a      	strb	r2, [r3, #0]
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	40023c00 	.word	0x40023c00

0800091c <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d006      	beq.n	800093a <FLASH_PrefetchBufferCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <FLASH_PrefetchBufferCmd+0x38>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a08      	ldr	r2, [pc, #32]	; (8000954 <FLASH_PrefetchBufferCmd+0x38>)
 8000932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000936:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
  }
}
 8000938:	e005      	b.n	8000946 <FLASH_PrefetchBufferCmd+0x2a>
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <FLASH_PrefetchBufferCmd+0x38>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <FLASH_PrefetchBufferCmd+0x38>)
 8000940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000944:	6013      	str	r3, [r2, #0]
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40023c00 	.word	0x40023c00

08000958 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <FLASH_Unlock+0x24>)
 800095e:	691b      	ldr	r3, [r3, #16]
 8000960:	2b00      	cmp	r3, #0
 8000962:	da05      	bge.n	8000970 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <FLASH_Unlock+0x24>)
 8000966:	4a06      	ldr	r2, [pc, #24]	; (8000980 <FLASH_Unlock+0x28>)
 8000968:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 800096a:	4b04      	ldr	r3, [pc, #16]	; (800097c <FLASH_Unlock+0x24>)
 800096c:	4a05      	ldr	r2, [pc, #20]	; (8000984 <FLASH_Unlock+0x2c>)
 800096e:	605a      	str	r2, [r3, #4]
  }  
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40023c00 	.word	0x40023c00
 8000980:	45670123 	.word	0x45670123
 8000984:	cdef89ab 	.word	0xcdef89ab

08000988 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <FLASH_Lock+0x1c>)
 800098e:	691b      	ldr	r3, [r3, #16]
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <FLASH_Lock+0x1c>)
 8000992:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000996:	6113      	str	r3, [r2, #16]
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40023c00 	.word	0x40023c00

080009a8 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 80009b8:	2309      	movs	r3, #9
 80009ba:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 80009bc:	78fb      	ldrb	r3, [r7, #3]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d102      	bne.n	80009c8 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e010      	b.n	80009ea <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 80009c8:	78fb      	ldrb	r3, [r7, #3]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d103      	bne.n	80009d6 <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80009ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	e009      	b.n	80009ea <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 80009d6:	78fb      	ldrb	r3, [r7, #3]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d103      	bne.n	80009e4 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80009dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	e002      	b.n	80009ea <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80009e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009e8:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80009ea:	f000 f8bf 	bl	8000b6c <FLASH_WaitForLastOperation>
 80009ee:	4603      	mov	r3, r0
 80009f0:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 80009f2:	7afb      	ldrb	r3, [r7, #11]
 80009f4:	2b09      	cmp	r3, #9
 80009f6:	d12f      	bne.n	8000a58 <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 80009f8:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <FLASH_EraseSector+0xbc>)
 80009fa:	691b      	ldr	r3, [r3, #16]
 80009fc:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <FLASH_EraseSector+0xbc>)
 80009fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a02:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <FLASH_EraseSector+0xbc>)
 8000a06:	691a      	ldr	r2, [r3, #16]
 8000a08:	4916      	ldr	r1, [pc, #88]	; (8000a64 <FLASH_EraseSector+0xbc>)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <FLASH_EraseSector+0xbc>)
 8000a12:	691b      	ldr	r3, [r3, #16]
 8000a14:	4a13      	ldr	r2, [pc, #76]	; (8000a64 <FLASH_EraseSector+0xbc>)
 8000a16:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a1a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <FLASH_EraseSector+0xbc>)
 8000a1e:	691a      	ldr	r2, [r3, #16]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <FLASH_EraseSector+0xbc>)
 8000a26:	f043 0302 	orr.w	r3, r3, #2
 8000a2a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <FLASH_EraseSector+0xbc>)
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	4a0c      	ldr	r2, [pc, #48]	; (8000a64 <FLASH_EraseSector+0xbc>)
 8000a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a36:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8000a38:	f000 f898 	bl	8000b6c <FLASH_WaitForLastOperation>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <FLASH_EraseSector+0xbc>)
 8000a42:	691b      	ldr	r3, [r3, #16]
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <FLASH_EraseSector+0xbc>)
 8000a46:	f023 0302 	bic.w	r3, r3, #2
 8000a4a:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <FLASH_EraseSector+0xbc>)
 8000a4e:	691b      	ldr	r3, [r3, #16]
 8000a50:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <FLASH_EraseSector+0xbc>)
 8000a52:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a56:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 8000a58:	7afb      	ldrb	r3, [r7, #11]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023c00 	.word	0x40023c00

08000a68 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 8000a72:	2309      	movs	r3, #9
 8000a74:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8000a76:	f000 f879 	bl	8000b6c <FLASH_WaitForLastOperation>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	2b09      	cmp	r3, #9
 8000a82:	d11e      	bne.n	8000ac2 <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <FLASH_ProgramWord+0x64>)
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	4a10      	ldr	r2, [pc, #64]	; (8000acc <FLASH_ProgramWord+0x64>)
 8000a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a8e:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <FLASH_ProgramWord+0x64>)
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <FLASH_ProgramWord+0x64>)
 8000a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <FLASH_ProgramWord+0x64>)
 8000a9e:	691b      	ldr	r3, [r3, #16]
 8000aa0:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <FLASH_ProgramWord+0x64>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	6113      	str	r3, [r2, #16]
  
    *(__IO uint32_t*)Address = Data;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	683a      	ldr	r2, [r7, #0]
 8000aac:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8000aae:	f000 f85d 	bl	8000b6c <FLASH_WaitForLastOperation>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <FLASH_ProgramWord+0x64>)
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	4a04      	ldr	r2, [pc, #16]	; (8000acc <FLASH_ProgramWord+0x64>)
 8000abc:	f023 0301 	bic.w	r3, r3, #1
 8000ac0:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023c00 	.word	0x40023c00

08000ad0 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42xx/43xxx and STM32F401xx/411xE devices)   
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <FLASH_ClearFlag+0x1c>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	60d3      	str	r3, [r2, #12]
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40023c00 	.word	0x40023c00

08000af0 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_RD, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 8000af6:	2309      	movs	r3, #9
 8000af8:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8000afa:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <FLASH_GetStatus+0x78>)
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b06:	d102      	bne.n	8000b0e <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	71fb      	strb	r3, [r7, #7]
 8000b0c:	e025      	b.n	8000b5a <FLASH_GetStatus+0x6a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <FLASH_GetStatus+0x78>)
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	f003 0310 	and.w	r3, r3, #16
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP;
 8000b1a:	2306      	movs	r3, #6
 8000b1c:	71fb      	strb	r3, [r7, #7]
 8000b1e:	e01c      	b.n	8000b5a <FLASH_GetStatus+0x6a>
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <FLASH_GetStatus+0x78>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d002      	beq.n	8000b32 <FLASH_GetStatus+0x42>
      { 
        flashstatus = FLASH_ERROR_RD;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	71fb      	strb	r3, [r7, #7]
 8000b30:	e013      	b.n	8000b5a <FLASH_GetStatus+0x6a>
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <FLASH_GetStatus+0x78>)
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d002      	beq.n	8000b44 <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_PROGRAM; 
 8000b3e:	2307      	movs	r3, #7
 8000b40:	71fb      	strb	r3, [r7, #7]
 8000b42:	e00a      	b.n	8000b5a <FLASH_GetStatus+0x6a>
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <FLASH_GetStatus+0x78>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d002      	beq.n	8000b56 <FLASH_GetStatus+0x66>
          {
            flashstatus = FLASH_ERROR_OPERATION;
 8000b50:	2308      	movs	r3, #8
 8000b52:	71fb      	strb	r3, [r7, #7]
 8000b54:	e001      	b.n	8000b5a <FLASH_GetStatus+0x6a>
          }
          else
          {
            flashstatus = FLASH_COMPLETE;
 8000b56:	2309      	movs	r3, #9
 8000b58:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	40023c00 	.word	0x40023c00

08000b6c <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 8000b72:	2309      	movs	r3, #9
 8000b74:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8000b76:	f7ff ffbb 	bl	8000af0 <FLASH_GetStatus>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8000b7e:	e003      	b.n	8000b88 <FLASH_WaitForLastOperation+0x1c>
  {
    status = FLASH_GetStatus();
 8000b80:	f7ff ffb6 	bl	8000af0 <FLASH_GetStatus>
 8000b84:	4603      	mov	r3, r0
 8000b86:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d0f7      	beq.n	8000b80 <FLASH_WaitForLastOperation+0x14>
  }
  /* Return the operation status */
  return status;
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	b2db      	uxtb	r3, r3
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <buttonInit>:
/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

void buttonInit(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioInitStruct;

	//---------------------------------------------------------------------------B3
	//1. Bat xung clock
	RCC_AHB1PeriphClockCmd(BUTTON_1_2_GPIO_RCC, ENABLE);
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	f7ff fde5 	bl	8000774 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(BUTTON_3_4_GPIO_RCC, ENABLE);
 8000baa:	2101      	movs	r1, #1
 8000bac:	2004      	movs	r0, #4
 8000bae:	f7ff fde1 	bl	8000774 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(BUTTON_5_GPIO_RCC, ENABLE);
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f7ff fddd 	bl	8000774 <RCC_AHB1PeriphClockCmd>
	//RCC_AHB1PeriphClockCmd(LED_BUTTON_PORT, ENABLE);
	//2. Config GPIO
	gpioInitStruct.GPIO_Mode = GPIO_Mode_IN;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	713b      	strb	r3, [r7, #4]
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	717b      	strb	r3, [r7, #5]
	gpioInitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	71fb      	strb	r3, [r7, #7]

	gpioInitStruct.GPIO_Pin = BUTTON_1_PIN|BUTTON_2_PIN;
 8000bc6:	2306      	movs	r3, #6
 8000bc8:	603b      	str	r3, [r7, #0]
	GPIO_Init(BUTTON_1_2_PORT, &gpioInitStruct);
 8000bca:	463b      	mov	r3, r7
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480e      	ldr	r0, [pc, #56]	; (8000c08 <buttonInit+0x6c>)
 8000bd0:	f7ff fc12 	bl	80003f8 <GPIO_Init>

	gpioInitStruct.GPIO_Pin = BUTTON_3_PIN|BUTTON_4_PIN;
 8000bd4:	2309      	movs	r3, #9
 8000bd6:	603b      	str	r3, [r7, #0]
	GPIO_Init(BUTTON_3_4_PORT, &gpioInitStruct);
 8000bd8:	463b      	mov	r3, r7
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480b      	ldr	r0, [pc, #44]	; (8000c0c <buttonInit+0x70>)
 8000bde:	f7ff fc0b 	bl	80003f8 <GPIO_Init>

	gpioInitStruct.GPIO_Pin = BUTTON_5_PIN;
 8000be2:	2320      	movs	r3, #32
 8000be4:	603b      	str	r3, [r7, #0]
	GPIO_Init(BUTTON_5_PORT, &gpioInitStruct);
 8000be6:	463b      	mov	r3, r7
 8000be8:	4619      	mov	r1, r3
 8000bea:	4809      	ldr	r0, [pc, #36]	; (8000c10 <buttonInit+0x74>)
 8000bec:	f7ff fc04 	bl	80003f8 <GPIO_Init>

	gpioInitStruct.GPIO_Pin = LED_BUTTON_PIN;
 8000bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf4:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_BUTTON_PORT, &gpioInitStruct);
 8000bf6:	463b      	mov	r3, r7
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4803      	ldr	r0, [pc, #12]	; (8000c08 <buttonInit+0x6c>)
 8000bfc:	f7ff fbfc 	bl	80003f8 <GPIO_Init>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	40020800 	.word	0x40020800
 8000c10:	40020000 	.word	0x40020000

08000c14 <dwCalculatorTime>:
	}else
		state = 0;
	return state;
}
static uint32_t dwCalculatorTime(uint32_t dwTimeInit,uint32_t dwTimeCurrent)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
	if(dwTimeCurrent >= dwTimeInit)
 8000c1e:	683a      	ldr	r2, [r7, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d303      	bcc.n	8000c2e <dwCalculatorTime+0x1a>
	{
		return (dwTimeCurrent - dwTimeInit);
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	e003      	b.n	8000c36 <dwCalculatorTime+0x22>
	}else
	{
		return (0xFFFFFFFF + dwTimeCurrent - dwTimeInit);
 8000c2e:	683a      	ldr	r2, [r7, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	3b01      	subs	r3, #1
	}
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <processEventButton>:

ValueKey_e processEventButton(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
	ValueKey_e valueKeyTemp = NOKEY;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	71fb      	strb	r3, [r7, #7]

	GetEventButton();
 8000c4e:	f000 f923 	bl	8000e98 <GetEventButton>

	switch(button1.buttonEven)
 8000c52:	4b8c      	ldr	r3, [pc, #560]	; (8000e84 <processEventButton+0x240>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	2b05      	cmp	r3, #5
 8000c5a:	d833      	bhi.n	8000cc4 <processEventButton+0x80>
 8000c5c:	a201      	add	r2, pc, #4	; (adr r2, 8000c64 <processEventButton+0x20>)
 8000c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c62:	bf00      	nop
 8000c64:	08000c89 	.word	0x08000c89
 8000c68:	08000c95 	.word	0x08000c95
 8000c6c:	08000ca1 	.word	0x08000ca1
 8000c70:	08000cad 	.word	0x08000cad
 8000c74:	08000cb9 	.word	0x08000cb9
 8000c78:	08000c7d 	.word	0x08000c7d
	{
	case EVENT_OF_BUTTON_HOLD_500MS:
		valueKeyTemp = DOWN_HOLD;
 8000c7c:	230e      	movs	r3, #14
 8000c7e:	71fb      	strb	r3, [r7, #7]
		button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000c80:	4b80      	ldr	r3, [pc, #512]	; (8000e84 <processEventButton+0x240>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
		break;
 8000c86:	e021      	b.n	8000ccc <processEventButton+0x88>
	case EVENT_OF_BUTTON_PRESS_1_TIMES:
		valueKeyTemp = DOWN;
 8000c88:	2309      	movs	r3, #9
 8000c8a:	71fb      	strb	r3, [r7, #7]
		button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000c8c:	4b7d      	ldr	r3, [pc, #500]	; (8000e84 <processEventButton+0x240>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
		break;
 8000c92:	e01b      	b.n	8000ccc <processEventButton+0x88>
	case EVENT_OF_BUTTON_PRESS_2_TIMES:
		valueKeyTemp = DOWN_DOUBLE;
 8000c94:	230a      	movs	r3, #10
 8000c96:	71fb      	strb	r3, [r7, #7]
		button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000c98:	4b7a      	ldr	r3, [pc, #488]	; (8000e84 <processEventButton+0x240>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
		break;
 8000c9e:	e015      	b.n	8000ccc <processEventButton+0x88>
	case EVENT_OF_BUTTON_PRESS_3_TIMES:
		valueKeyTemp = DOWN_TRIPLE;
 8000ca0:	230b      	movs	r3, #11
 8000ca2:	71fb      	strb	r3, [r7, #7]
		button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000ca4:	4b77      	ldr	r3, [pc, #476]	; (8000e84 <processEventButton+0x240>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
		break;
 8000caa:	e00f      	b.n	8000ccc <processEventButton+0x88>
	case EVENT_OF_BUTTON_PRESS_4_TIMES:
		valueKeyTemp = DOWN_QUADRUPLE;
 8000cac:	230c      	movs	r3, #12
 8000cae:	71fb      	strb	r3, [r7, #7]
		button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000cb0:	4b74      	ldr	r3, [pc, #464]	; (8000e84 <processEventButton+0x240>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
		break;
 8000cb6:	e009      	b.n	8000ccc <processEventButton+0x88>
	case EVENT_OF_BUTTON_PRESS_5_TIMES:
		valueKeyTemp = DOWN_QUINTUPLE;
 8000cb8:	230d      	movs	r3, #13
 8000cba:	71fb      	strb	r3, [r7, #7]
		button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000cbc:	4b71      	ldr	r3, [pc, #452]	; (8000e84 <processEventButton+0x240>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
		break;
 8000cc2:	e003      	b.n	8000ccc <processEventButton+0x88>
	default:
		button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000cc4:	4b6f      	ldr	r3, [pc, #444]	; (8000e84 <processEventButton+0x240>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
		break;
 8000cca:	bf00      	nop
	}
	switch(button2.buttonEven)
 8000ccc:	4b6e      	ldr	r3, [pc, #440]	; (8000e88 <processEventButton+0x244>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	2b05      	cmp	r3, #5
 8000cd4:	d828      	bhi.n	8000d28 <processEventButton+0xe4>
 8000cd6:	a201      	add	r2, pc, #4	; (adr r2, 8000cdc <processEventButton+0x98>)
 8000cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cdc:	08000cfd 	.word	0x08000cfd
 8000ce0:	08000d09 	.word	0x08000d09
 8000ce4:	08000d11 	.word	0x08000d11
 8000ce8:	08000d19 	.word	0x08000d19
 8000cec:	08000d21 	.word	0x08000d21
 8000cf0:	08000cf5 	.word	0x08000cf5
	{
	case EVENT_OF_BUTTON_HOLD_500MS:
		button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000cf4:	4b64      	ldr	r3, [pc, #400]	; (8000e88 <processEventButton+0x244>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
		break;
 8000cfa:	e019      	b.n	8000d30 <processEventButton+0xec>
	case EVENT_OF_BUTTON_PRESS_1_TIMES:
		valueKeyTemp = RIGHT;
 8000cfc:	2310      	movs	r3, #16
 8000cfe:	71fb      	strb	r3, [r7, #7]
		button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000d00:	4b61      	ldr	r3, [pc, #388]	; (8000e88 <processEventButton+0x244>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
		break;
 8000d06:	e013      	b.n	8000d30 <processEventButton+0xec>
	case EVENT_OF_BUTTON_PRESS_2_TIMES:

		button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000d08:	4b5f      	ldr	r3, [pc, #380]	; (8000e88 <processEventButton+0x244>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
		break;
 8000d0e:	e00f      	b.n	8000d30 <processEventButton+0xec>
	case EVENT_OF_BUTTON_PRESS_3_TIMES:

		button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000d10:	4b5d      	ldr	r3, [pc, #372]	; (8000e88 <processEventButton+0x244>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
		break;
 8000d16:	e00b      	b.n	8000d30 <processEventButton+0xec>
	case EVENT_OF_BUTTON_PRESS_4_TIMES:
		button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000d18:	4b5b      	ldr	r3, [pc, #364]	; (8000e88 <processEventButton+0x244>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
		break;
 8000d1e:	e007      	b.n	8000d30 <processEventButton+0xec>
	case EVENT_OF_BUTTON_PRESS_5_TIMES:
		button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000d20:	4b59      	ldr	r3, [pc, #356]	; (8000e88 <processEventButton+0x244>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
		break;
 8000d26:	e003      	b.n	8000d30 <processEventButton+0xec>
	default:
		button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000d28:	4b57      	ldr	r3, [pc, #348]	; (8000e88 <processEventButton+0x244>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
		break;
 8000d2e:	bf00      	nop
	}
	switch(button4.buttonEven)
 8000d30:	4b56      	ldr	r3, [pc, #344]	; (8000e8c <processEventButton+0x248>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	2b05      	cmp	r3, #5
 8000d38:	d828      	bhi.n	8000d8c <processEventButton+0x148>
 8000d3a:	a201      	add	r2, pc, #4	; (adr r2, 8000d40 <processEventButton+0xfc>)
 8000d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d40:	08000d61 	.word	0x08000d61
 8000d44:	08000d6d 	.word	0x08000d6d
 8000d48:	08000d75 	.word	0x08000d75
 8000d4c:	08000d7d 	.word	0x08000d7d
 8000d50:	08000d85 	.word	0x08000d85
 8000d54:	08000d59 	.word	0x08000d59
	{
	case EVENT_OF_BUTTON_HOLD_500MS:
		button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000d58:	4b4c      	ldr	r3, [pc, #304]	; (8000e8c <processEventButton+0x248>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
		break;
 8000d5e:	e019      	b.n	8000d94 <processEventButton+0x150>
	case EVENT_OF_BUTTON_PRESS_1_TIMES:
		valueKeyTemp = LEFT;
 8000d60:	230f      	movs	r3, #15
 8000d62:	71fb      	strb	r3, [r7, #7]
		button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000d64:	4b49      	ldr	r3, [pc, #292]	; (8000e8c <processEventButton+0x248>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
		break;
 8000d6a:	e013      	b.n	8000d94 <processEventButton+0x150>
	case EVENT_OF_BUTTON_PRESS_2_TIMES:
		button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000d6c:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <processEventButton+0x248>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
		break;
 8000d72:	e00f      	b.n	8000d94 <processEventButton+0x150>
	case EVENT_OF_BUTTON_PRESS_3_TIMES:
		button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000d74:	4b45      	ldr	r3, [pc, #276]	; (8000e8c <processEventButton+0x248>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
		break;
 8000d7a:	e00b      	b.n	8000d94 <processEventButton+0x150>
	case EVENT_OF_BUTTON_PRESS_4_TIMES:
		button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000d7c:	4b43      	ldr	r3, [pc, #268]	; (8000e8c <processEventButton+0x248>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
		break;
 8000d82:	e007      	b.n	8000d94 <processEventButton+0x150>
	case EVENT_OF_BUTTON_PRESS_5_TIMES:
		button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000d84:	4b41      	ldr	r3, [pc, #260]	; (8000e8c <processEventButton+0x248>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
		break;
 8000d8a:	e003      	b.n	8000d94 <processEventButton+0x150>
	default:
		button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000d8c:	4b3f      	ldr	r3, [pc, #252]	; (8000e8c <processEventButton+0x248>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
		break;
 8000d92:	bf00      	nop
	}


	switch(button3.buttonEven)
 8000d94:	4b3e      	ldr	r3, [pc, #248]	; (8000e90 <processEventButton+0x24c>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	2b05      	cmp	r3, #5
 8000d9c:	d832      	bhi.n	8000e04 <processEventButton+0x1c0>
 8000d9e:	a201      	add	r2, pc, #4	; (adr r2, 8000da4 <processEventButton+0x160>)
 8000da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da4:	08000dc9 	.word	0x08000dc9
 8000da8:	08000dd5 	.word	0x08000dd5
 8000dac:	08000de1 	.word	0x08000de1
 8000db0:	08000ded 	.word	0x08000ded
 8000db4:	08000df9 	.word	0x08000df9
 8000db8:	08000dbd 	.word	0x08000dbd
	{
	case EVENT_OF_BUTTON_HOLD_500MS:
		valueKeyTemp = UP_HOLD;
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	71fb      	strb	r3, [r7, #7]
		button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000dc0:	4b33      	ldr	r3, [pc, #204]	; (8000e90 <processEventButton+0x24c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
		break;
 8000dc6:	e021      	b.n	8000e0c <processEventButton+0x1c8>
	case EVENT_OF_BUTTON_PRESS_1_TIMES:
		valueKeyTemp = UP;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	71fb      	strb	r3, [r7, #7]
		button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000dcc:	4b30      	ldr	r3, [pc, #192]	; (8000e90 <processEventButton+0x24c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
		break;
 8000dd2:	e01b      	b.n	8000e0c <processEventButton+0x1c8>
	case EVENT_OF_BUTTON_PRESS_2_TIMES:
		valueKeyTemp = UP_DOUBLE;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	71fb      	strb	r3, [r7, #7]
		button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000dd8:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <processEventButton+0x24c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
		break;
 8000dde:	e015      	b.n	8000e0c <processEventButton+0x1c8>
	case EVENT_OF_BUTTON_PRESS_3_TIMES:
		valueKeyTemp = UP_TRIPLE;
 8000de0:	2305      	movs	r3, #5
 8000de2:	71fb      	strb	r3, [r7, #7]
		button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000de4:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <processEventButton+0x24c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
		break;
 8000dea:	e00f      	b.n	8000e0c <processEventButton+0x1c8>
	case EVENT_OF_BUTTON_PRESS_4_TIMES:
		valueKeyTemp = UP_QUADRUPLE;
 8000dec:	2306      	movs	r3, #6
 8000dee:	71fb      	strb	r3, [r7, #7]
		button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000df0:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <processEventButton+0x24c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
		break;
 8000df6:	e009      	b.n	8000e0c <processEventButton+0x1c8>
	case EVENT_OF_BUTTON_PRESS_5_TIMES:
		valueKeyTemp = UP_QUINTUPLE;
 8000df8:	2307      	movs	r3, #7
 8000dfa:	71fb      	strb	r3, [r7, #7]
		button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000dfc:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <processEventButton+0x24c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
		break;
 8000e02:	e003      	b.n	8000e0c <processEventButton+0x1c8>
	default:
		button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000e04:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <processEventButton+0x24c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
		break;
 8000e0a:	bf00      	nop
	}


	switch(button5.buttonEven)
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <processEventButton+0x250>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	2b05      	cmp	r3, #5
 8000e14:	d82c      	bhi.n	8000e70 <processEventButton+0x22c>
 8000e16:	a201      	add	r2, pc, #4	; (adr r2, 8000e1c <processEventButton+0x1d8>)
 8000e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1c:	08000e41 	.word	0x08000e41
 8000e20:	08000e4d 	.word	0x08000e4d
 8000e24:	08000e59 	.word	0x08000e59
 8000e28:	08000e61 	.word	0x08000e61
 8000e2c:	08000e69 	.word	0x08000e69
 8000e30:	08000e35 	.word	0x08000e35
	{
	case EVENT_OF_BUTTON_HOLD_500MS:
		valueKeyTemp = RETURN;
 8000e34:	2311      	movs	r3, #17
 8000e36:	71fb      	strb	r3, [r7, #7]
		button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <processEventButton+0x250>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
		break;
 8000e3e:	e01b      	b.n	8000e78 <processEventButton+0x234>
	case EVENT_OF_BUTTON_PRESS_1_TIMES:
		valueKeyTemp = SELECT;
 8000e40:	2301      	movs	r3, #1
 8000e42:	71fb      	strb	r3, [r7, #7]
		button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <processEventButton+0x250>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
		break;
 8000e4a:	e015      	b.n	8000e78 <processEventButton+0x234>
	case EVENT_OF_BUTTON_PRESS_2_TIMES:
		valueKeyTemp = SELECT_DOUBLE;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	71fb      	strb	r3, [r7, #7]
		button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000e50:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <processEventButton+0x250>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
		break;
 8000e56:	e00f      	b.n	8000e78 <processEventButton+0x234>
	case EVENT_OF_BUTTON_PRESS_3_TIMES:
		button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <processEventButton+0x250>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
		break;
 8000e5e:	e00b      	b.n	8000e78 <processEventButton+0x234>
	case EVENT_OF_BUTTON_PRESS_4_TIMES:
		button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <processEventButton+0x250>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
		break;
 8000e66:	e007      	b.n	8000e78 <processEventButton+0x234>
	case EVENT_OF_BUTTON_PRESS_5_TIMES:
		button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <processEventButton+0x250>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
		break;
 8000e6e:	e003      	b.n	8000e78 <processEventButton+0x234>
	default:
		button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <processEventButton+0x250>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
		break;
 8000e76:	bf00      	nop
	}
	return valueKeyTemp;
 8000e78:	79fb      	ldrb	r3, [r7, #7]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200000b0 	.word	0x200000b0
 8000e88:	200000c0 	.word	0x200000c0
 8000e8c:	200000e0 	.word	0x200000e0
 8000e90:	200000d0 	.word	0x200000d0
 8000e94:	200000f0 	.word	0x200000f0

08000e98 <GetEventButton>:

static void GetEventButton(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0

	u32 dwDeltaTime = 0,dwTimeNow;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
	dwTimeNow = GetMilSecTick();
 8000ea2:	f004 fedd 	bl	8005c60 <GetMilSecTick>
 8000ea6:	6038      	str	r0, [r7, #0]
	if(button1.buttonEven ==EVENT_OF_BUTTON_NOCLICK)
 8000ea8:	4b4f      	ldr	r3, [pc, #316]	; (8000fe8 <GetEventButton+0x150>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f040 80d3 	bne.w	8001058 <GetEventButton+0x1c0>
	{
		//Khi nut nhan duoc nhan
			if(BTN1_GET == 0)
 8000eb2:	2102      	movs	r1, #2
 8000eb4:	484d      	ldr	r0, [pc, #308]	; (8000fec <GetEventButton+0x154>)
 8000eb6:	f7ff fb2e 	bl	8000516 <GPIO_ReadInputDataBit>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d111      	bne.n	8000ee4 <GetEventButton+0x4c>
			{
				if(button1.byFlagBtn1Press == 0)
 8000ec0:	4b49      	ldr	r3, [pc, #292]	; (8000fe8 <GetEventButton+0x150>)
 8000ec2:	789b      	ldrb	r3, [r3, #2]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d10d      	bne.n	8000ee4 <GetEventButton+0x4c>
				{
					button1.dwTimeInit = GetMilSecTick();
 8000ec8:	f004 feca 	bl	8005c60 <GetMilSecTick>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4a46      	ldr	r2, [pc, #280]	; (8000fe8 <GetEventButton+0x150>)
 8000ed0:	6093      	str	r3, [r2, #8]
					button1.byPressCnt++;
 8000ed2:	4b45      	ldr	r3, [pc, #276]	; (8000fe8 <GetEventButton+0x150>)
 8000ed4:	785b      	ldrb	r3, [r3, #1]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b43      	ldr	r3, [pc, #268]	; (8000fe8 <GetEventButton+0x150>)
 8000edc:	705a      	strb	r2, [r3, #1]
					button1.byFlagBtn1Press = 1;
 8000ede:	4b42      	ldr	r3, [pc, #264]	; (8000fe8 <GetEventButton+0x150>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	709a      	strb	r2, [r3, #2]
				}

			}
			//Khi nut nhan ko duoc nhan
			if(BTN1_GET!=0)
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	4841      	ldr	r0, [pc, #260]	; (8000fec <GetEventButton+0x154>)
 8000ee8:	f7ff fb15 	bl	8000516 <GPIO_ReadInputDataBit>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d00f      	beq.n	8000f12 <GetEventButton+0x7a>
			{
				if((button1.byFlagBtn1Released == 0)&&(button1.byFlagBtn1Press == 1))
 8000ef2:	4b3d      	ldr	r3, [pc, #244]	; (8000fe8 <GetEventButton+0x150>)
 8000ef4:	78db      	ldrb	r3, [r3, #3]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10b      	bne.n	8000f12 <GetEventButton+0x7a>
 8000efa:	4b3b      	ldr	r3, [pc, #236]	; (8000fe8 <GetEventButton+0x150>)
 8000efc:	789b      	ldrb	r3, [r3, #2]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d107      	bne.n	8000f12 <GetEventButton+0x7a>
				{
					button1.dwTimeCurrent = GetMilSecTick();
 8000f02:	f004 fead 	bl	8005c60 <GetMilSecTick>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4a37      	ldr	r2, [pc, #220]	; (8000fe8 <GetEventButton+0x150>)
 8000f0a:	60d3      	str	r3, [r2, #12]
					button1.byFlagBtn1Released = 1;
 8000f0c:	4b36      	ldr	r3, [pc, #216]	; (8000fe8 <GetEventButton+0x150>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	70da      	strb	r2, [r3, #3]
				}

			}

			//Xu ly khi nhan giu
			if((button1.byFlagBtn1Press == 1 )&&(button1.byFlagBtn1Released == 0))
 8000f12:	4b35      	ldr	r3, [pc, #212]	; (8000fe8 <GetEventButton+0x150>)
 8000f14:	789b      	ldrb	r3, [r3, #2]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d117      	bne.n	8000f4a <GetEventButton+0xb2>
 8000f1a:	4b33      	ldr	r3, [pc, #204]	; (8000fe8 <GetEventButton+0x150>)
 8000f1c:	78db      	ldrb	r3, [r3, #3]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d113      	bne.n	8000f4a <GetEventButton+0xb2>
			{
				dwDeltaTime = dwCalculatorTime(button1.dwTimeInit,dwTimeNow);
 8000f22:	4b31      	ldr	r3, [pc, #196]	; (8000fe8 <GetEventButton+0x150>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	6839      	ldr	r1, [r7, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fe73 	bl	8000c14 <dwCalculatorTime>
 8000f2e:	6078      	str	r0, [r7, #4]
				if(dwDeltaTime>BUTTON_LONG_PRESS_TIME)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f36:	d908      	bls.n	8000f4a <GetEventButton+0xb2>
				{
					button1.buttonEven = EVENT_OF_BUTTON_HOLD_500MS;
 8000f38:	4b2b      	ldr	r3, [pc, #172]	; (8000fe8 <GetEventButton+0x150>)
 8000f3a:	2206      	movs	r2, #6
 8000f3c:	701a      	strb	r2, [r3, #0]
					button1.byFlagBtn1Hold = 1;
 8000f3e:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <GetEventButton+0x150>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	711a      	strb	r2, [r3, #4]
					button1.byPressCnt = 0;
 8000f44:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <GetEventButton+0x150>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	705a      	strb	r2, [r3, #1]
				}
			}
			//Xu ly khi nhan/nha

			if((button1.byFlagBtn1Press == 1)&&(button1.byFlagBtn1Released == 1))
 8000f4a:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <GetEventButton+0x150>)
 8000f4c:	789b      	ldrb	r3, [r3, #2]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d163      	bne.n	800101a <GetEventButton+0x182>
 8000f52:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <GetEventButton+0x150>)
 8000f54:	78db      	ldrb	r3, [r3, #3]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d15f      	bne.n	800101a <GetEventButton+0x182>
			{
				if(button1.byFlagBtn1Hold == 1)
 8000f5a:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <GetEventButton+0x150>)
 8000f5c:	791b      	ldrb	r3, [r3, #4]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d10c      	bne.n	8000f7c <GetEventButton+0xe4>
				{
					button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <GetEventButton+0x150>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
					button1.byFlagBtn1Press = 0;
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <GetEventButton+0x150>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	709a      	strb	r2, [r3, #2]
					button1.byFlagBtn1Released = 0;
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <GetEventButton+0x150>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	70da      	strb	r2, [r3, #3]
					button1.byFlagBtn1Hold = 0;
 8000f74:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <GetEventButton+0x150>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	711a      	strb	r2, [r3, #4]
 8000f7a:	e04e      	b.n	800101a <GetEventButton+0x182>
				}else
				{
					dwDeltaTime = dwCalculatorTime(button1.dwTimeInit, button1.dwTimeCurrent);
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <GetEventButton+0x150>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <GetEventButton+0x150>)
 8000f82:	68d2      	ldr	r2, [r2, #12]
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fe44 	bl	8000c14 <dwCalculatorTime>
 8000f8c:	6078      	str	r0, [r7, #4]
					if((dwDeltaTime > BUTTON_NORMAL_PRESS_TIME)&&(dwDeltaTime < BUTTON_LONG_PRESS_TIME))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b3c      	cmp	r3, #60	; 0x3c
 8000f92:	d92d      	bls.n	8000ff0 <GetEventButton+0x158>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f9a:	d229      	bcs.n	8000ff0 <GetEventButton+0x158>
					{
							dwDeltaTime = dwCalculatorTime(button1.dwTimeCurrent, dwTimeNow);
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <GetEventButton+0x150>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	6839      	ldr	r1, [r7, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fe36 	bl	8000c14 <dwCalculatorTime>
 8000fa8:	6078      	str	r0, [r7, #4]
						if(dwDeltaTime < BW2PRESS_TIME)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000fb0:	d206      	bcs.n	8000fc0 <GetEventButton+0x128>
						{
							button1.byFlagBtn1Released = 0;
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <GetEventButton+0x150>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	70da      	strb	r2, [r3, #3]
							button1.byFlagBtn1Press = 0;
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <GetEventButton+0x150>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	709a      	strb	r2, [r3, #2]
						if(dwDeltaTime < BW2PRESS_TIME)
 8000fbe:	e02c      	b.n	800101a <GetEventButton+0x182>
						}else
						{
							button1.buttonEven = checkEventButton(button1.byPressCnt);
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <GetEventButton+0x150>)
 8000fc2:	785b      	ldrb	r3, [r3, #1]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fbbb 	bl	8001740 <checkEventButton>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <GetEventButton+0x150>)
 8000fd0:	701a      	strb	r2, [r3, #0]
							button1.byPressCnt = 0;
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <GetEventButton+0x150>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	705a      	strb	r2, [r3, #1]
							button1.byFlagBtn1Press = 0;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <GetEventButton+0x150>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	709a      	strb	r2, [r3, #2]
							button1.byFlagBtn1Released = 0;
 8000fde:	4b02      	ldr	r3, [pc, #8]	; (8000fe8 <GetEventButton+0x150>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	70da      	strb	r2, [r3, #3]
						if(dwDeltaTime < BW2PRESS_TIME)
 8000fe4:	e019      	b.n	800101a <GetEventButton+0x182>
 8000fe6:	bf00      	nop
 8000fe8:	200000b0 	.word	0x200000b0
 8000fec:	40020400 	.word	0x40020400
						}
					}
					else if(dwDeltaTime < BUTTON_NORMAL_PRESS_TIME)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b3b      	cmp	r3, #59	; 0x3b
 8000ff4:	d811      	bhi.n	800101a <GetEventButton+0x182>
					{
						button1.buttonEven = checkEventButton(button1.byPressCnt);
 8000ff6:	4b69      	ldr	r3, [pc, #420]	; (800119c <GetEventButton+0x304>)
 8000ff8:	785b      	ldrb	r3, [r3, #1]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fba0 	bl	8001740 <checkEventButton>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	4b65      	ldr	r3, [pc, #404]	; (800119c <GetEventButton+0x304>)
 8001006:	701a      	strb	r2, [r3, #0]
						button1.byPressCnt = 0;
 8001008:	4b64      	ldr	r3, [pc, #400]	; (800119c <GetEventButton+0x304>)
 800100a:	2200      	movs	r2, #0
 800100c:	705a      	strb	r2, [r3, #1]
						button1.byFlagBtn1Press = 0;
 800100e:	4b63      	ldr	r3, [pc, #396]	; (800119c <GetEventButton+0x304>)
 8001010:	2200      	movs	r2, #0
 8001012:	709a      	strb	r2, [r3, #2]
						button1.byFlagBtn1Released = 0;
 8001014:	4b61      	ldr	r3, [pc, #388]	; (800119c <GetEventButton+0x304>)
 8001016:	2200      	movs	r2, #0
 8001018:	70da      	strb	r2, [r3, #3]
					}
				}
			}

			if((button1.byFlagBtn1Hold == 0)&&(button1.byFlagBtn1Press == 0))
 800101a:	4b60      	ldr	r3, [pc, #384]	; (800119c <GetEventButton+0x304>)
 800101c:	791b      	ldrb	r3, [r3, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d11a      	bne.n	8001058 <GetEventButton+0x1c0>
 8001022:	4b5e      	ldr	r3, [pc, #376]	; (800119c <GetEventButton+0x304>)
 8001024:	789b      	ldrb	r3, [r3, #2]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d116      	bne.n	8001058 <GetEventButton+0x1c0>
			{
					dwDeltaTime = dwCalculatorTime(button1.dwTimeCurrent, dwTimeNow);
 800102a:	4b5c      	ldr	r3, [pc, #368]	; (800119c <GetEventButton+0x304>)
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	6839      	ldr	r1, [r7, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fdef 	bl	8000c14 <dwCalculatorTime>
 8001036:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime > BW2PRESS_TIME)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800103e:	d90b      	bls.n	8001058 <GetEventButton+0x1c0>
					{
						button1.buttonEven = checkEventButton(button1.byPressCnt);
 8001040:	4b56      	ldr	r3, [pc, #344]	; (800119c <GetEventButton+0x304>)
 8001042:	785b      	ldrb	r3, [r3, #1]
 8001044:	4618      	mov	r0, r3
 8001046:	f000 fb7b 	bl	8001740 <checkEventButton>
 800104a:	4603      	mov	r3, r0
 800104c:	461a      	mov	r2, r3
 800104e:	4b53      	ldr	r3, [pc, #332]	; (800119c <GetEventButton+0x304>)
 8001050:	701a      	strb	r2, [r3, #0]
						button1.byPressCnt = 0;
 8001052:	4b52      	ldr	r3, [pc, #328]	; (800119c <GetEventButton+0x304>)
 8001054:	2200      	movs	r2, #0
 8001056:	705a      	strb	r2, [r3, #1]
					}

			}

	}
		dwTimeNow = GetMilSecTick();
 8001058:	f004 fe02 	bl	8005c60 <GetMilSecTick>
 800105c:	6038      	str	r0, [r7, #0]
		if(button2.buttonEven ==EVENT_OF_BUTTON_NOCLICK)
 800105e:	4b50      	ldr	r3, [pc, #320]	; (80011a0 <GetEventButton+0x308>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f040 80d4 	bne.w	8001210 <GetEventButton+0x378>
		{
			//Khi nut nhan duoc nhan
				if(BTN2_GET == 0)
 8001068:	2104      	movs	r1, #4
 800106a:	484e      	ldr	r0, [pc, #312]	; (80011a4 <GetEventButton+0x30c>)
 800106c:	f7ff fa53 	bl	8000516 <GPIO_ReadInputDataBit>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d111      	bne.n	800109a <GetEventButton+0x202>
				{
					if(button2.byFlagBtn1Press == 0)
 8001076:	4b4a      	ldr	r3, [pc, #296]	; (80011a0 <GetEventButton+0x308>)
 8001078:	789b      	ldrb	r3, [r3, #2]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10d      	bne.n	800109a <GetEventButton+0x202>
					{
						button2.dwTimeInit = GetMilSecTick();
 800107e:	f004 fdef 	bl	8005c60 <GetMilSecTick>
 8001082:	4603      	mov	r3, r0
 8001084:	4a46      	ldr	r2, [pc, #280]	; (80011a0 <GetEventButton+0x308>)
 8001086:	6093      	str	r3, [r2, #8]
						button2.byPressCnt++;
 8001088:	4b45      	ldr	r3, [pc, #276]	; (80011a0 <GetEventButton+0x308>)
 800108a:	785b      	ldrb	r3, [r3, #1]
 800108c:	3301      	adds	r3, #1
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b43      	ldr	r3, [pc, #268]	; (80011a0 <GetEventButton+0x308>)
 8001092:	705a      	strb	r2, [r3, #1]
						button2.byFlagBtn1Press = 1;
 8001094:	4b42      	ldr	r3, [pc, #264]	; (80011a0 <GetEventButton+0x308>)
 8001096:	2201      	movs	r2, #1
 8001098:	709a      	strb	r2, [r3, #2]
					}

				}
				//Khi nut nhan ko duoc nhan
				if(BTN2_GET!=0)
 800109a:	2104      	movs	r1, #4
 800109c:	4841      	ldr	r0, [pc, #260]	; (80011a4 <GetEventButton+0x30c>)
 800109e:	f7ff fa3a 	bl	8000516 <GPIO_ReadInputDataBit>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d00f      	beq.n	80010c8 <GetEventButton+0x230>
				{
					if((button2.byFlagBtn1Released == 0)&&(button2.byFlagBtn1Press == 1))
 80010a8:	4b3d      	ldr	r3, [pc, #244]	; (80011a0 <GetEventButton+0x308>)
 80010aa:	78db      	ldrb	r3, [r3, #3]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d10b      	bne.n	80010c8 <GetEventButton+0x230>
 80010b0:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <GetEventButton+0x308>)
 80010b2:	789b      	ldrb	r3, [r3, #2]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d107      	bne.n	80010c8 <GetEventButton+0x230>
					{
						button2.dwTimeCurrent = GetMilSecTick();
 80010b8:	f004 fdd2 	bl	8005c60 <GetMilSecTick>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a38      	ldr	r2, [pc, #224]	; (80011a0 <GetEventButton+0x308>)
 80010c0:	60d3      	str	r3, [r2, #12]
						button2.byFlagBtn1Released = 1;
 80010c2:	4b37      	ldr	r3, [pc, #220]	; (80011a0 <GetEventButton+0x308>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	70da      	strb	r2, [r3, #3]
					}

				}

				//Xu ly khi nhan giu
				if((button2.byFlagBtn1Press == 1 )&&(button2.byFlagBtn1Released == 0))
 80010c8:	4b35      	ldr	r3, [pc, #212]	; (80011a0 <GetEventButton+0x308>)
 80010ca:	789b      	ldrb	r3, [r3, #2]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d117      	bne.n	8001100 <GetEventButton+0x268>
 80010d0:	4b33      	ldr	r3, [pc, #204]	; (80011a0 <GetEventButton+0x308>)
 80010d2:	78db      	ldrb	r3, [r3, #3]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d113      	bne.n	8001100 <GetEventButton+0x268>
				{
					dwDeltaTime = dwCalculatorTime(button2.dwTimeInit,dwTimeNow);
 80010d8:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <GetEventButton+0x308>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	6839      	ldr	r1, [r7, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fd98 	bl	8000c14 <dwCalculatorTime>
 80010e4:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime>BUTTON_LONG_PRESS_TIME)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010ec:	d908      	bls.n	8001100 <GetEventButton+0x268>
					{
						button2.buttonEven = EVENT_OF_BUTTON_HOLD_500MS;
 80010ee:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <GetEventButton+0x308>)
 80010f0:	2206      	movs	r2, #6
 80010f2:	701a      	strb	r2, [r3, #0]
						button2.byFlagBtn1Hold = 1;
 80010f4:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <GetEventButton+0x308>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	711a      	strb	r2, [r3, #4]
						button2.byPressCnt = 0;
 80010fa:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <GetEventButton+0x308>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	705a      	strb	r2, [r3, #1]
					}
				}
				//Xu ly khi nhan/nha

				if((button2.byFlagBtn1Press == 1)&&(button2.byFlagBtn1Released == 1))
 8001100:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <GetEventButton+0x308>)
 8001102:	789b      	ldrb	r3, [r3, #2]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d164      	bne.n	80011d2 <GetEventButton+0x33a>
 8001108:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <GetEventButton+0x308>)
 800110a:	78db      	ldrb	r3, [r3, #3]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d160      	bne.n	80011d2 <GetEventButton+0x33a>
				{
					if(button2.byFlagBtn1Hold == 1)
 8001110:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <GetEventButton+0x308>)
 8001112:	791b      	ldrb	r3, [r3, #4]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d10c      	bne.n	8001132 <GetEventButton+0x29a>
					{
						button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8001118:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <GetEventButton+0x308>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
						button2.byFlagBtn1Press = 0;
 800111e:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <GetEventButton+0x308>)
 8001120:	2200      	movs	r2, #0
 8001122:	709a      	strb	r2, [r3, #2]
						button2.byFlagBtn1Released = 0;
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <GetEventButton+0x308>)
 8001126:	2200      	movs	r2, #0
 8001128:	70da      	strb	r2, [r3, #3]
						button2.byFlagBtn1Hold = 0;
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <GetEventButton+0x308>)
 800112c:	2200      	movs	r2, #0
 800112e:	711a      	strb	r2, [r3, #4]
 8001130:	e04f      	b.n	80011d2 <GetEventButton+0x33a>
					}else
					{
						dwDeltaTime = dwCalculatorTime(button2.dwTimeInit, button2.dwTimeCurrent);
 8001132:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <GetEventButton+0x308>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	4a1a      	ldr	r2, [pc, #104]	; (80011a0 <GetEventButton+0x308>)
 8001138:	68d2      	ldr	r2, [r2, #12]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fd69 	bl	8000c14 <dwCalculatorTime>
 8001142:	6078      	str	r0, [r7, #4]
						if((dwDeltaTime > BUTTON_NORMAL_PRESS_TIME)&&(dwDeltaTime < BUTTON_LONG_PRESS_TIME))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b3c      	cmp	r3, #60	; 0x3c
 8001148:	d92e      	bls.n	80011a8 <GetEventButton+0x310>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001150:	d22a      	bcs.n	80011a8 <GetEventButton+0x310>
						{
								dwDeltaTime = dwCalculatorTime(button2.dwTimeCurrent, dwTimeNow);
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <GetEventButton+0x308>)
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	6839      	ldr	r1, [r7, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fd5b 	bl	8000c14 <dwCalculatorTime>
 800115e:	6078      	str	r0, [r7, #4]
							if(dwDeltaTime < BW2PRESS_TIME)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001166:	d206      	bcs.n	8001176 <GetEventButton+0x2de>
							{
								button2.byFlagBtn1Released = 0;
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <GetEventButton+0x308>)
 800116a:	2200      	movs	r2, #0
 800116c:	70da      	strb	r2, [r3, #3]
								button2.byFlagBtn1Press = 0;
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <GetEventButton+0x308>)
 8001170:	2200      	movs	r2, #0
 8001172:	709a      	strb	r2, [r3, #2]
							if(dwDeltaTime < BW2PRESS_TIME)
 8001174:	e02d      	b.n	80011d2 <GetEventButton+0x33a>
							}else
							{
								button2.buttonEven = checkEventButton(button2.byPressCnt);
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <GetEventButton+0x308>)
 8001178:	785b      	ldrb	r3, [r3, #1]
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fae0 	bl	8001740 <checkEventButton>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <GetEventButton+0x308>)
 8001186:	701a      	strb	r2, [r3, #0]
								button2.byPressCnt = 0;
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <GetEventButton+0x308>)
 800118a:	2200      	movs	r2, #0
 800118c:	705a      	strb	r2, [r3, #1]
								button2.byFlagBtn1Press = 0;
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <GetEventButton+0x308>)
 8001190:	2200      	movs	r2, #0
 8001192:	709a      	strb	r2, [r3, #2]
								button2.byFlagBtn1Released = 0;
 8001194:	4b02      	ldr	r3, [pc, #8]	; (80011a0 <GetEventButton+0x308>)
 8001196:	2200      	movs	r2, #0
 8001198:	70da      	strb	r2, [r3, #3]
							if(dwDeltaTime < BW2PRESS_TIME)
 800119a:	e01a      	b.n	80011d2 <GetEventButton+0x33a>
 800119c:	200000b0 	.word	0x200000b0
 80011a0:	200000c0 	.word	0x200000c0
 80011a4:	40020400 	.word	0x40020400
							}
						}
						else if(dwDeltaTime < BUTTON_NORMAL_PRESS_TIME)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b3b      	cmp	r3, #59	; 0x3b
 80011ac:	d811      	bhi.n	80011d2 <GetEventButton+0x33a>
						{
							button2.buttonEven = checkEventButton(button2.byPressCnt);
 80011ae:	4b69      	ldr	r3, [pc, #420]	; (8001354 <GetEventButton+0x4bc>)
 80011b0:	785b      	ldrb	r3, [r3, #1]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 fac4 	bl	8001740 <checkEventButton>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b65      	ldr	r3, [pc, #404]	; (8001354 <GetEventButton+0x4bc>)
 80011be:	701a      	strb	r2, [r3, #0]
							button2.byPressCnt = 0;
 80011c0:	4b64      	ldr	r3, [pc, #400]	; (8001354 <GetEventButton+0x4bc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	705a      	strb	r2, [r3, #1]
							button2.byFlagBtn1Press = 0;
 80011c6:	4b63      	ldr	r3, [pc, #396]	; (8001354 <GetEventButton+0x4bc>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	709a      	strb	r2, [r3, #2]
							button2.byFlagBtn1Released = 0;
 80011cc:	4b61      	ldr	r3, [pc, #388]	; (8001354 <GetEventButton+0x4bc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	70da      	strb	r2, [r3, #3]
						}
					}
				}

				if((button2.byFlagBtn1Hold == 0)&&(button2.byFlagBtn1Press == 0))
 80011d2:	4b60      	ldr	r3, [pc, #384]	; (8001354 <GetEventButton+0x4bc>)
 80011d4:	791b      	ldrb	r3, [r3, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d11a      	bne.n	8001210 <GetEventButton+0x378>
 80011da:	4b5e      	ldr	r3, [pc, #376]	; (8001354 <GetEventButton+0x4bc>)
 80011dc:	789b      	ldrb	r3, [r3, #2]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d116      	bne.n	8001210 <GetEventButton+0x378>
				{
					dwDeltaTime = dwCalculatorTime(button2.dwTimeCurrent, dwTimeNow);
 80011e2:	4b5c      	ldr	r3, [pc, #368]	; (8001354 <GetEventButton+0x4bc>)
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	6839      	ldr	r1, [r7, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fd13 	bl	8000c14 <dwCalculatorTime>
 80011ee:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime > BW2PRESS_TIME)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011f6:	d90b      	bls.n	8001210 <GetEventButton+0x378>
					{
						button2.buttonEven = checkEventButton(button2.byPressCnt);
 80011f8:	4b56      	ldr	r3, [pc, #344]	; (8001354 <GetEventButton+0x4bc>)
 80011fa:	785b      	ldrb	r3, [r3, #1]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 fa9f 	bl	8001740 <checkEventButton>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	4b53      	ldr	r3, [pc, #332]	; (8001354 <GetEventButton+0x4bc>)
 8001208:	701a      	strb	r2, [r3, #0]
						button2.byPressCnt = 0;
 800120a:	4b52      	ldr	r3, [pc, #328]	; (8001354 <GetEventButton+0x4bc>)
 800120c:	2200      	movs	r2, #0
 800120e:	705a      	strb	r2, [r3, #1]
					}
				}

		}
		dwTimeNow = GetMilSecTick();
 8001210:	f004 fd26 	bl	8005c60 <GetMilSecTick>
 8001214:	6038      	str	r0, [r7, #0]
		if(button3.buttonEven ==EVENT_OF_BUTTON_NOCLICK)
 8001216:	4b50      	ldr	r3, [pc, #320]	; (8001358 <GetEventButton+0x4c0>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f040 80d4 	bne.w	80013c8 <GetEventButton+0x530>
		{
			//Khi nut nhan duoc nhan
				if(BTN3_GET == 0)
 8001220:	2108      	movs	r1, #8
 8001222:	484e      	ldr	r0, [pc, #312]	; (800135c <GetEventButton+0x4c4>)
 8001224:	f7ff f977 	bl	8000516 <GPIO_ReadInputDataBit>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d111      	bne.n	8001252 <GetEventButton+0x3ba>
				{
					if(button3.byFlagBtn1Press == 0)
 800122e:	4b4a      	ldr	r3, [pc, #296]	; (8001358 <GetEventButton+0x4c0>)
 8001230:	789b      	ldrb	r3, [r3, #2]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10d      	bne.n	8001252 <GetEventButton+0x3ba>
					{
						button3.dwTimeInit = GetMilSecTick();
 8001236:	f004 fd13 	bl	8005c60 <GetMilSecTick>
 800123a:	4603      	mov	r3, r0
 800123c:	4a46      	ldr	r2, [pc, #280]	; (8001358 <GetEventButton+0x4c0>)
 800123e:	6093      	str	r3, [r2, #8]
						button3.byPressCnt++;
 8001240:	4b45      	ldr	r3, [pc, #276]	; (8001358 <GetEventButton+0x4c0>)
 8001242:	785b      	ldrb	r3, [r3, #1]
 8001244:	3301      	adds	r3, #1
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b43      	ldr	r3, [pc, #268]	; (8001358 <GetEventButton+0x4c0>)
 800124a:	705a      	strb	r2, [r3, #1]
						button3.byFlagBtn1Press = 1;
 800124c:	4b42      	ldr	r3, [pc, #264]	; (8001358 <GetEventButton+0x4c0>)
 800124e:	2201      	movs	r2, #1
 8001250:	709a      	strb	r2, [r3, #2]
					}

				}
				//Khi nut nhan ko duoc nhan
				if(BTN3_GET!=0)
 8001252:	2108      	movs	r1, #8
 8001254:	4841      	ldr	r0, [pc, #260]	; (800135c <GetEventButton+0x4c4>)
 8001256:	f7ff f95e 	bl	8000516 <GPIO_ReadInputDataBit>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00f      	beq.n	8001280 <GetEventButton+0x3e8>
				{
					if((button3.byFlagBtn1Released == 0)&&(button3.byFlagBtn1Press == 1))
 8001260:	4b3d      	ldr	r3, [pc, #244]	; (8001358 <GetEventButton+0x4c0>)
 8001262:	78db      	ldrb	r3, [r3, #3]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d10b      	bne.n	8001280 <GetEventButton+0x3e8>
 8001268:	4b3b      	ldr	r3, [pc, #236]	; (8001358 <GetEventButton+0x4c0>)
 800126a:	789b      	ldrb	r3, [r3, #2]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d107      	bne.n	8001280 <GetEventButton+0x3e8>
					{
						button3.dwTimeCurrent = GetMilSecTick();
 8001270:	f004 fcf6 	bl	8005c60 <GetMilSecTick>
 8001274:	4603      	mov	r3, r0
 8001276:	4a38      	ldr	r2, [pc, #224]	; (8001358 <GetEventButton+0x4c0>)
 8001278:	60d3      	str	r3, [r2, #12]
						button3.byFlagBtn1Released = 1;
 800127a:	4b37      	ldr	r3, [pc, #220]	; (8001358 <GetEventButton+0x4c0>)
 800127c:	2201      	movs	r2, #1
 800127e:	70da      	strb	r2, [r3, #3]
					}

				}

				//Xu ly khi nhan giu
				if((button3.byFlagBtn1Press == 1 )&&(button3.byFlagBtn1Released == 0))
 8001280:	4b35      	ldr	r3, [pc, #212]	; (8001358 <GetEventButton+0x4c0>)
 8001282:	789b      	ldrb	r3, [r3, #2]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d117      	bne.n	80012b8 <GetEventButton+0x420>
 8001288:	4b33      	ldr	r3, [pc, #204]	; (8001358 <GetEventButton+0x4c0>)
 800128a:	78db      	ldrb	r3, [r3, #3]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d113      	bne.n	80012b8 <GetEventButton+0x420>
				{
					dwDeltaTime = dwCalculatorTime(button3.dwTimeInit,dwTimeNow);
 8001290:	4b31      	ldr	r3, [pc, #196]	; (8001358 <GetEventButton+0x4c0>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	6839      	ldr	r1, [r7, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fcbc 	bl	8000c14 <dwCalculatorTime>
 800129c:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime>BUTTON_LONG_PRESS_TIME)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012a4:	d908      	bls.n	80012b8 <GetEventButton+0x420>
					{
						button3.buttonEven = EVENT_OF_BUTTON_HOLD_500MS;
 80012a6:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <GetEventButton+0x4c0>)
 80012a8:	2206      	movs	r2, #6
 80012aa:	701a      	strb	r2, [r3, #0]
						button3.byFlagBtn1Hold = 1;
 80012ac:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <GetEventButton+0x4c0>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	711a      	strb	r2, [r3, #4]
						button3.byPressCnt = 0;
 80012b2:	4b29      	ldr	r3, [pc, #164]	; (8001358 <GetEventButton+0x4c0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	705a      	strb	r2, [r3, #1]
					}
				}
				//Xu ly khi nhan/nha

				if((button3.byFlagBtn1Press == 1)&&(button3.byFlagBtn1Released == 1))
 80012b8:	4b27      	ldr	r3, [pc, #156]	; (8001358 <GetEventButton+0x4c0>)
 80012ba:	789b      	ldrb	r3, [r3, #2]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d164      	bne.n	800138a <GetEventButton+0x4f2>
 80012c0:	4b25      	ldr	r3, [pc, #148]	; (8001358 <GetEventButton+0x4c0>)
 80012c2:	78db      	ldrb	r3, [r3, #3]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d160      	bne.n	800138a <GetEventButton+0x4f2>
				{
					if(button3.byFlagBtn1Hold == 1)
 80012c8:	4b23      	ldr	r3, [pc, #140]	; (8001358 <GetEventButton+0x4c0>)
 80012ca:	791b      	ldrb	r3, [r3, #4]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d10c      	bne.n	80012ea <GetEventButton+0x452>
					{
						button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 80012d0:	4b21      	ldr	r3, [pc, #132]	; (8001358 <GetEventButton+0x4c0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
						button3.byFlagBtn1Press = 0;
 80012d6:	4b20      	ldr	r3, [pc, #128]	; (8001358 <GetEventButton+0x4c0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	709a      	strb	r2, [r3, #2]
						button3.byFlagBtn1Released = 0;
 80012dc:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <GetEventButton+0x4c0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	70da      	strb	r2, [r3, #3]
						button3.byFlagBtn1Hold = 0;
 80012e2:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <GetEventButton+0x4c0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	711a      	strb	r2, [r3, #4]
 80012e8:	e04f      	b.n	800138a <GetEventButton+0x4f2>
					}else
					{
						dwDeltaTime = dwCalculatorTime(button3.dwTimeInit, button3.dwTimeCurrent);
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <GetEventButton+0x4c0>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	4a1a      	ldr	r2, [pc, #104]	; (8001358 <GetEventButton+0x4c0>)
 80012f0:	68d2      	ldr	r2, [r2, #12]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fc8d 	bl	8000c14 <dwCalculatorTime>
 80012fa:	6078      	str	r0, [r7, #4]
						if((dwDeltaTime > BUTTON_NORMAL_PRESS_TIME)&&(dwDeltaTime < BUTTON_LONG_PRESS_TIME))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b3c      	cmp	r3, #60	; 0x3c
 8001300:	d92e      	bls.n	8001360 <GetEventButton+0x4c8>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001308:	d22a      	bcs.n	8001360 <GetEventButton+0x4c8>
						{
								dwDeltaTime = dwCalculatorTime(button3.dwTimeCurrent, dwTimeNow);
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <GetEventButton+0x4c0>)
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	6839      	ldr	r1, [r7, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fc7f 	bl	8000c14 <dwCalculatorTime>
 8001316:	6078      	str	r0, [r7, #4]
							if(dwDeltaTime < BW2PRESS_TIME)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800131e:	d206      	bcs.n	800132e <GetEventButton+0x496>
							{
								button3.byFlagBtn1Released = 0;
 8001320:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <GetEventButton+0x4c0>)
 8001322:	2200      	movs	r2, #0
 8001324:	70da      	strb	r2, [r3, #3]
								button3.byFlagBtn1Press = 0;
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <GetEventButton+0x4c0>)
 8001328:	2200      	movs	r2, #0
 800132a:	709a      	strb	r2, [r3, #2]
							if(dwDeltaTime < BW2PRESS_TIME)
 800132c:	e02d      	b.n	800138a <GetEventButton+0x4f2>
							}else
							{
								button3.buttonEven = checkEventButton(button3.byPressCnt);
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <GetEventButton+0x4c0>)
 8001330:	785b      	ldrb	r3, [r3, #1]
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fa04 	bl	8001740 <checkEventButton>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <GetEventButton+0x4c0>)
 800133e:	701a      	strb	r2, [r3, #0]
								button3.byPressCnt = 0;
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <GetEventButton+0x4c0>)
 8001342:	2200      	movs	r2, #0
 8001344:	705a      	strb	r2, [r3, #1]
								button3.byFlagBtn1Press = 0;
 8001346:	4b04      	ldr	r3, [pc, #16]	; (8001358 <GetEventButton+0x4c0>)
 8001348:	2200      	movs	r2, #0
 800134a:	709a      	strb	r2, [r3, #2]
								button3.byFlagBtn1Released = 0;
 800134c:	4b02      	ldr	r3, [pc, #8]	; (8001358 <GetEventButton+0x4c0>)
 800134e:	2200      	movs	r2, #0
 8001350:	70da      	strb	r2, [r3, #3]
							if(dwDeltaTime < BW2PRESS_TIME)
 8001352:	e01a      	b.n	800138a <GetEventButton+0x4f2>
 8001354:	200000c0 	.word	0x200000c0
 8001358:	200000d0 	.word	0x200000d0
 800135c:	40020800 	.word	0x40020800
							}
						}
						else if(dwDeltaTime < BUTTON_NORMAL_PRESS_TIME)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b3b      	cmp	r3, #59	; 0x3b
 8001364:	d811      	bhi.n	800138a <GetEventButton+0x4f2>
						{
							button3.buttonEven = checkEventButton(button3.byPressCnt);
 8001366:	4b69      	ldr	r3, [pc, #420]	; (800150c <GetEventButton+0x674>)
 8001368:	785b      	ldrb	r3, [r3, #1]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f9e8 	bl	8001740 <checkEventButton>
 8001370:	4603      	mov	r3, r0
 8001372:	461a      	mov	r2, r3
 8001374:	4b65      	ldr	r3, [pc, #404]	; (800150c <GetEventButton+0x674>)
 8001376:	701a      	strb	r2, [r3, #0]
							button3.byPressCnt = 0;
 8001378:	4b64      	ldr	r3, [pc, #400]	; (800150c <GetEventButton+0x674>)
 800137a:	2200      	movs	r2, #0
 800137c:	705a      	strb	r2, [r3, #1]
							button3.byFlagBtn1Press = 0;
 800137e:	4b63      	ldr	r3, [pc, #396]	; (800150c <GetEventButton+0x674>)
 8001380:	2200      	movs	r2, #0
 8001382:	709a      	strb	r2, [r3, #2]
							button3.byFlagBtn1Released = 0;
 8001384:	4b61      	ldr	r3, [pc, #388]	; (800150c <GetEventButton+0x674>)
 8001386:	2200      	movs	r2, #0
 8001388:	70da      	strb	r2, [r3, #3]
						}
					}
				}

				if((button3.byFlagBtn1Hold == 0)&&(button3.byFlagBtn1Press == 0))
 800138a:	4b60      	ldr	r3, [pc, #384]	; (800150c <GetEventButton+0x674>)
 800138c:	791b      	ldrb	r3, [r3, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d11a      	bne.n	80013c8 <GetEventButton+0x530>
 8001392:	4b5e      	ldr	r3, [pc, #376]	; (800150c <GetEventButton+0x674>)
 8001394:	789b      	ldrb	r3, [r3, #2]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d116      	bne.n	80013c8 <GetEventButton+0x530>
				{
					dwDeltaTime = dwCalculatorTime(button3.dwTimeCurrent, dwTimeNow);
 800139a:	4b5c      	ldr	r3, [pc, #368]	; (800150c <GetEventButton+0x674>)
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	6839      	ldr	r1, [r7, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fc37 	bl	8000c14 <dwCalculatorTime>
 80013a6:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime > BW2PRESS_TIME)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80013ae:	d90b      	bls.n	80013c8 <GetEventButton+0x530>
					{
						button3.buttonEven = checkEventButton(button3.byPressCnt);
 80013b0:	4b56      	ldr	r3, [pc, #344]	; (800150c <GetEventButton+0x674>)
 80013b2:	785b      	ldrb	r3, [r3, #1]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 f9c3 	bl	8001740 <checkEventButton>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	4b53      	ldr	r3, [pc, #332]	; (800150c <GetEventButton+0x674>)
 80013c0:	701a      	strb	r2, [r3, #0]
						button3.byPressCnt = 0;
 80013c2:	4b52      	ldr	r3, [pc, #328]	; (800150c <GetEventButton+0x674>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	705a      	strb	r2, [r3, #1]
					}
				}

		}
		dwTimeNow = GetMilSecTick();
 80013c8:	f004 fc4a 	bl	8005c60 <GetMilSecTick>
 80013cc:	6038      	str	r0, [r7, #0]
		if(button4.buttonEven ==EVENT_OF_BUTTON_NOCLICK)
 80013ce:	4b50      	ldr	r3, [pc, #320]	; (8001510 <GetEventButton+0x678>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f040 80d4 	bne.w	8001580 <GetEventButton+0x6e8>
		{
			//Khi nut nhan duoc nhan
				if(BTN4_GET == 0)
 80013d8:	2101      	movs	r1, #1
 80013da:	484e      	ldr	r0, [pc, #312]	; (8001514 <GetEventButton+0x67c>)
 80013dc:	f7ff f89b 	bl	8000516 <GPIO_ReadInputDataBit>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d111      	bne.n	800140a <GetEventButton+0x572>
				{
					if(button4.byFlagBtn1Press == 0)
 80013e6:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <GetEventButton+0x678>)
 80013e8:	789b      	ldrb	r3, [r3, #2]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10d      	bne.n	800140a <GetEventButton+0x572>
					{
						button4.dwTimeInit = GetMilSecTick();
 80013ee:	f004 fc37 	bl	8005c60 <GetMilSecTick>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4a46      	ldr	r2, [pc, #280]	; (8001510 <GetEventButton+0x678>)
 80013f6:	6093      	str	r3, [r2, #8]
						button4.byPressCnt++;
 80013f8:	4b45      	ldr	r3, [pc, #276]	; (8001510 <GetEventButton+0x678>)
 80013fa:	785b      	ldrb	r3, [r3, #1]
 80013fc:	3301      	adds	r3, #1
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b43      	ldr	r3, [pc, #268]	; (8001510 <GetEventButton+0x678>)
 8001402:	705a      	strb	r2, [r3, #1]
						button4.byFlagBtn1Press = 1;
 8001404:	4b42      	ldr	r3, [pc, #264]	; (8001510 <GetEventButton+0x678>)
 8001406:	2201      	movs	r2, #1
 8001408:	709a      	strb	r2, [r3, #2]
					}

				}
				//Khi nut nhan ko duoc nhan
				if(BTN4_GET!=0)
 800140a:	2101      	movs	r1, #1
 800140c:	4841      	ldr	r0, [pc, #260]	; (8001514 <GetEventButton+0x67c>)
 800140e:	f7ff f882 	bl	8000516 <GPIO_ReadInputDataBit>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00f      	beq.n	8001438 <GetEventButton+0x5a0>
				{
					if((button4.byFlagBtn1Released == 0)&&(button4.byFlagBtn1Press == 1))
 8001418:	4b3d      	ldr	r3, [pc, #244]	; (8001510 <GetEventButton+0x678>)
 800141a:	78db      	ldrb	r3, [r3, #3]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10b      	bne.n	8001438 <GetEventButton+0x5a0>
 8001420:	4b3b      	ldr	r3, [pc, #236]	; (8001510 <GetEventButton+0x678>)
 8001422:	789b      	ldrb	r3, [r3, #2]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d107      	bne.n	8001438 <GetEventButton+0x5a0>
					{
						button4.dwTimeCurrent = GetMilSecTick();
 8001428:	f004 fc1a 	bl	8005c60 <GetMilSecTick>
 800142c:	4603      	mov	r3, r0
 800142e:	4a38      	ldr	r2, [pc, #224]	; (8001510 <GetEventButton+0x678>)
 8001430:	60d3      	str	r3, [r2, #12]
						button4.byFlagBtn1Released = 1;
 8001432:	4b37      	ldr	r3, [pc, #220]	; (8001510 <GetEventButton+0x678>)
 8001434:	2201      	movs	r2, #1
 8001436:	70da      	strb	r2, [r3, #3]
					}

				}

				//Xu ly khi nhan giu
				if((button4.byFlagBtn1Press == 1 )&&(button4.byFlagBtn1Released == 0))
 8001438:	4b35      	ldr	r3, [pc, #212]	; (8001510 <GetEventButton+0x678>)
 800143a:	789b      	ldrb	r3, [r3, #2]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d117      	bne.n	8001470 <GetEventButton+0x5d8>
 8001440:	4b33      	ldr	r3, [pc, #204]	; (8001510 <GetEventButton+0x678>)
 8001442:	78db      	ldrb	r3, [r3, #3]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d113      	bne.n	8001470 <GetEventButton+0x5d8>
				{
					dwDeltaTime = dwCalculatorTime(button3.dwTimeInit,dwTimeNow);
 8001448:	4b30      	ldr	r3, [pc, #192]	; (800150c <GetEventButton+0x674>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	6839      	ldr	r1, [r7, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fbe0 	bl	8000c14 <dwCalculatorTime>
 8001454:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime>BUTTON_LONG_PRESS_TIME)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800145c:	d908      	bls.n	8001470 <GetEventButton+0x5d8>
					{
						button4.buttonEven = EVENT_OF_BUTTON_HOLD_500MS;
 800145e:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <GetEventButton+0x678>)
 8001460:	2206      	movs	r2, #6
 8001462:	701a      	strb	r2, [r3, #0]
						button4.byFlagBtn1Hold = 1;
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <GetEventButton+0x678>)
 8001466:	2201      	movs	r2, #1
 8001468:	711a      	strb	r2, [r3, #4]
						button4.byPressCnt = 0;
 800146a:	4b29      	ldr	r3, [pc, #164]	; (8001510 <GetEventButton+0x678>)
 800146c:	2200      	movs	r2, #0
 800146e:	705a      	strb	r2, [r3, #1]
					}
				}
				//Xu ly khi nhan/nha

				if((button4.byFlagBtn1Press == 1)&&(button4.byFlagBtn1Released == 1))
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <GetEventButton+0x678>)
 8001472:	789b      	ldrb	r3, [r3, #2]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d164      	bne.n	8001542 <GetEventButton+0x6aa>
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <GetEventButton+0x678>)
 800147a:	78db      	ldrb	r3, [r3, #3]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d160      	bne.n	8001542 <GetEventButton+0x6aa>
				{
					if(button4.byFlagBtn1Hold == 1)
 8001480:	4b23      	ldr	r3, [pc, #140]	; (8001510 <GetEventButton+0x678>)
 8001482:	791b      	ldrb	r3, [r3, #4]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d10c      	bne.n	80014a2 <GetEventButton+0x60a>
					{
						button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8001488:	4b21      	ldr	r3, [pc, #132]	; (8001510 <GetEventButton+0x678>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
						button4.byFlagBtn1Press = 0;
 800148e:	4b20      	ldr	r3, [pc, #128]	; (8001510 <GetEventButton+0x678>)
 8001490:	2200      	movs	r2, #0
 8001492:	709a      	strb	r2, [r3, #2]
						button4.byFlagBtn1Released = 0;
 8001494:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <GetEventButton+0x678>)
 8001496:	2200      	movs	r2, #0
 8001498:	70da      	strb	r2, [r3, #3]
						button4.byFlagBtn1Hold = 0;
 800149a:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <GetEventButton+0x678>)
 800149c:	2200      	movs	r2, #0
 800149e:	711a      	strb	r2, [r3, #4]
 80014a0:	e04f      	b.n	8001542 <GetEventButton+0x6aa>
					}else
					{
						dwDeltaTime = dwCalculatorTime(button4.dwTimeInit, button4.dwTimeCurrent);
 80014a2:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <GetEventButton+0x678>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	4a1a      	ldr	r2, [pc, #104]	; (8001510 <GetEventButton+0x678>)
 80014a8:	68d2      	ldr	r2, [r2, #12]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fbb1 	bl	8000c14 <dwCalculatorTime>
 80014b2:	6078      	str	r0, [r7, #4]
						if((dwDeltaTime > BUTTON_NORMAL_PRESS_TIME)&&(dwDeltaTime < BUTTON_LONG_PRESS_TIME))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b3c      	cmp	r3, #60	; 0x3c
 80014b8:	d92e      	bls.n	8001518 <GetEventButton+0x680>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014c0:	d22a      	bcs.n	8001518 <GetEventButton+0x680>
						{
								dwDeltaTime = dwCalculatorTime(button4.dwTimeCurrent, dwTimeNow);
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <GetEventButton+0x678>)
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	6839      	ldr	r1, [r7, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fba3 	bl	8000c14 <dwCalculatorTime>
 80014ce:	6078      	str	r0, [r7, #4]
							if(dwDeltaTime < BW2PRESS_TIME)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80014d6:	d206      	bcs.n	80014e6 <GetEventButton+0x64e>
							{
								button4.byFlagBtn1Released = 0;
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <GetEventButton+0x678>)
 80014da:	2200      	movs	r2, #0
 80014dc:	70da      	strb	r2, [r3, #3]
								button4.byFlagBtn1Press = 0;
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <GetEventButton+0x678>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	709a      	strb	r2, [r3, #2]
							if(dwDeltaTime < BW2PRESS_TIME)
 80014e4:	e02d      	b.n	8001542 <GetEventButton+0x6aa>
							}else
							{
								button4.buttonEven = checkEventButton(button4.byPressCnt);
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <GetEventButton+0x678>)
 80014e8:	785b      	ldrb	r3, [r3, #1]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f928 	bl	8001740 <checkEventButton>
 80014f0:	4603      	mov	r3, r0
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <GetEventButton+0x678>)
 80014f6:	701a      	strb	r2, [r3, #0]
								button4.byPressCnt = 0;
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <GetEventButton+0x678>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	705a      	strb	r2, [r3, #1]
								button4.byFlagBtn1Press = 0;
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <GetEventButton+0x678>)
 8001500:	2200      	movs	r2, #0
 8001502:	709a      	strb	r2, [r3, #2]
								button4.byFlagBtn1Released = 0;
 8001504:	4b02      	ldr	r3, [pc, #8]	; (8001510 <GetEventButton+0x678>)
 8001506:	2200      	movs	r2, #0
 8001508:	70da      	strb	r2, [r3, #3]
							if(dwDeltaTime < BW2PRESS_TIME)
 800150a:	e01a      	b.n	8001542 <GetEventButton+0x6aa>
 800150c:	200000d0 	.word	0x200000d0
 8001510:	200000e0 	.word	0x200000e0
 8001514:	40020800 	.word	0x40020800
							}
						}
						else if(dwDeltaTime < BUTTON_NORMAL_PRESS_TIME)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b3b      	cmp	r3, #59	; 0x3b
 800151c:	d811      	bhi.n	8001542 <GetEventButton+0x6aa>
						{
							button4.buttonEven = checkEventButton(button4.byPressCnt);
 800151e:	4b85      	ldr	r3, [pc, #532]	; (8001734 <GetEventButton+0x89c>)
 8001520:	785b      	ldrb	r3, [r3, #1]
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f90c 	bl	8001740 <checkEventButton>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	4b81      	ldr	r3, [pc, #516]	; (8001734 <GetEventButton+0x89c>)
 800152e:	701a      	strb	r2, [r3, #0]
							button4.byPressCnt = 0;
 8001530:	4b80      	ldr	r3, [pc, #512]	; (8001734 <GetEventButton+0x89c>)
 8001532:	2200      	movs	r2, #0
 8001534:	705a      	strb	r2, [r3, #1]
							button4.byFlagBtn1Press = 0;
 8001536:	4b7f      	ldr	r3, [pc, #508]	; (8001734 <GetEventButton+0x89c>)
 8001538:	2200      	movs	r2, #0
 800153a:	709a      	strb	r2, [r3, #2]
							button4.byFlagBtn1Released = 0;
 800153c:	4b7d      	ldr	r3, [pc, #500]	; (8001734 <GetEventButton+0x89c>)
 800153e:	2200      	movs	r2, #0
 8001540:	70da      	strb	r2, [r3, #3]
						}
					}
				}

				if((button4.byFlagBtn1Hold == 0)&&(button4.byFlagBtn1Press == 0))
 8001542:	4b7c      	ldr	r3, [pc, #496]	; (8001734 <GetEventButton+0x89c>)
 8001544:	791b      	ldrb	r3, [r3, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d11a      	bne.n	8001580 <GetEventButton+0x6e8>
 800154a:	4b7a      	ldr	r3, [pc, #488]	; (8001734 <GetEventButton+0x89c>)
 800154c:	789b      	ldrb	r3, [r3, #2]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d116      	bne.n	8001580 <GetEventButton+0x6e8>
				{
					dwDeltaTime = dwCalculatorTime(button4.dwTimeCurrent, dwTimeNow);
 8001552:	4b78      	ldr	r3, [pc, #480]	; (8001734 <GetEventButton+0x89c>)
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	6839      	ldr	r1, [r7, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fb5b 	bl	8000c14 <dwCalculatorTime>
 800155e:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime > BW2PRESS_TIME)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001566:	d90b      	bls.n	8001580 <GetEventButton+0x6e8>
					{
						button4.buttonEven = checkEventButton(button4.byPressCnt);
 8001568:	4b72      	ldr	r3, [pc, #456]	; (8001734 <GetEventButton+0x89c>)
 800156a:	785b      	ldrb	r3, [r3, #1]
 800156c:	4618      	mov	r0, r3
 800156e:	f000 f8e7 	bl	8001740 <checkEventButton>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	4b6f      	ldr	r3, [pc, #444]	; (8001734 <GetEventButton+0x89c>)
 8001578:	701a      	strb	r2, [r3, #0]
						button4.byPressCnt = 0;
 800157a:	4b6e      	ldr	r3, [pc, #440]	; (8001734 <GetEventButton+0x89c>)
 800157c:	2200      	movs	r2, #0
 800157e:	705a      	strb	r2, [r3, #1]
					}
				}

		}
		dwTimeNow = GetMilSecTick();
 8001580:	f004 fb6e 	bl	8005c60 <GetMilSecTick>
 8001584:	6038      	str	r0, [r7, #0]
		if(button5.buttonEven ==EVENT_OF_BUTTON_NOCLICK)
 8001586:	4b6c      	ldr	r3, [pc, #432]	; (8001738 <GetEventButton+0x8a0>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	f040 80ce 	bne.w	800172c <GetEventButton+0x894>
		{
			//Khi nut nhan duoc nhan
				if(BTN5_GET == 0)
 8001590:	2120      	movs	r1, #32
 8001592:	486a      	ldr	r0, [pc, #424]	; (800173c <GetEventButton+0x8a4>)
 8001594:	f7fe ffbf 	bl	8000516 <GPIO_ReadInputDataBit>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d111      	bne.n	80015c2 <GetEventButton+0x72a>
				{
					if(button5.byFlagBtn1Press == 0)
 800159e:	4b66      	ldr	r3, [pc, #408]	; (8001738 <GetEventButton+0x8a0>)
 80015a0:	789b      	ldrb	r3, [r3, #2]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10d      	bne.n	80015c2 <GetEventButton+0x72a>
					{
						button5.dwTimeInit = GetMilSecTick();
 80015a6:	f004 fb5b 	bl	8005c60 <GetMilSecTick>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4a62      	ldr	r2, [pc, #392]	; (8001738 <GetEventButton+0x8a0>)
 80015ae:	6093      	str	r3, [r2, #8]
						button5.byPressCnt++;
 80015b0:	4b61      	ldr	r3, [pc, #388]	; (8001738 <GetEventButton+0x8a0>)
 80015b2:	785b      	ldrb	r3, [r3, #1]
 80015b4:	3301      	adds	r3, #1
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	4b5f      	ldr	r3, [pc, #380]	; (8001738 <GetEventButton+0x8a0>)
 80015ba:	705a      	strb	r2, [r3, #1]
						button5.byFlagBtn1Press = 1;
 80015bc:	4b5e      	ldr	r3, [pc, #376]	; (8001738 <GetEventButton+0x8a0>)
 80015be:	2201      	movs	r2, #1
 80015c0:	709a      	strb	r2, [r3, #2]
					}

				}
				//Khi nut nhan ko duoc nhan
				if(BTN5_GET!=0)
 80015c2:	2120      	movs	r1, #32
 80015c4:	485d      	ldr	r0, [pc, #372]	; (800173c <GetEventButton+0x8a4>)
 80015c6:	f7fe ffa6 	bl	8000516 <GPIO_ReadInputDataBit>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00f      	beq.n	80015f0 <GetEventButton+0x758>
				{
					if((button5.byFlagBtn1Released == 0)&&(button5.byFlagBtn1Press == 1))
 80015d0:	4b59      	ldr	r3, [pc, #356]	; (8001738 <GetEventButton+0x8a0>)
 80015d2:	78db      	ldrb	r3, [r3, #3]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10b      	bne.n	80015f0 <GetEventButton+0x758>
 80015d8:	4b57      	ldr	r3, [pc, #348]	; (8001738 <GetEventButton+0x8a0>)
 80015da:	789b      	ldrb	r3, [r3, #2]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d107      	bne.n	80015f0 <GetEventButton+0x758>
					{
						button5.dwTimeCurrent = GetMilSecTick();
 80015e0:	f004 fb3e 	bl	8005c60 <GetMilSecTick>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4a54      	ldr	r2, [pc, #336]	; (8001738 <GetEventButton+0x8a0>)
 80015e8:	60d3      	str	r3, [r2, #12]
						button5.byFlagBtn1Released = 1;
 80015ea:	4b53      	ldr	r3, [pc, #332]	; (8001738 <GetEventButton+0x8a0>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	70da      	strb	r2, [r3, #3]
					}

				}

				//Xu ly khi nhan giu
				if((button5.byFlagBtn1Press == 1 )&&(button5.byFlagBtn1Released == 0))
 80015f0:	4b51      	ldr	r3, [pc, #324]	; (8001738 <GetEventButton+0x8a0>)
 80015f2:	789b      	ldrb	r3, [r3, #2]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d117      	bne.n	8001628 <GetEventButton+0x790>
 80015f8:	4b4f      	ldr	r3, [pc, #316]	; (8001738 <GetEventButton+0x8a0>)
 80015fa:	78db      	ldrb	r3, [r3, #3]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d113      	bne.n	8001628 <GetEventButton+0x790>
				{
					dwDeltaTime = dwCalculatorTime(button5.dwTimeInit,dwTimeNow);
 8001600:	4b4d      	ldr	r3, [pc, #308]	; (8001738 <GetEventButton+0x8a0>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	6839      	ldr	r1, [r7, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fb04 	bl	8000c14 <dwCalculatorTime>
 800160c:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime>BUTTON_LONG_PRESS_TIME)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001614:	d908      	bls.n	8001628 <GetEventButton+0x790>
					{
						button5.buttonEven = EVENT_OF_BUTTON_HOLD_500MS;
 8001616:	4b48      	ldr	r3, [pc, #288]	; (8001738 <GetEventButton+0x8a0>)
 8001618:	2206      	movs	r2, #6
 800161a:	701a      	strb	r2, [r3, #0]
						button5.byFlagBtn1Hold = 1;
 800161c:	4b46      	ldr	r3, [pc, #280]	; (8001738 <GetEventButton+0x8a0>)
 800161e:	2201      	movs	r2, #1
 8001620:	711a      	strb	r2, [r3, #4]
						button5.byPressCnt = 0;
 8001622:	4b45      	ldr	r3, [pc, #276]	; (8001738 <GetEventButton+0x8a0>)
 8001624:	2200      	movs	r2, #0
 8001626:	705a      	strb	r2, [r3, #1]
					}
				}
				//Xu ly khi nhan/nha

				if((button5.byFlagBtn1Press == 1)&&(button5.byFlagBtn1Released == 1))
 8001628:	4b43      	ldr	r3, [pc, #268]	; (8001738 <GetEventButton+0x8a0>)
 800162a:	789b      	ldrb	r3, [r3, #2]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d15e      	bne.n	80016ee <GetEventButton+0x856>
 8001630:	4b41      	ldr	r3, [pc, #260]	; (8001738 <GetEventButton+0x8a0>)
 8001632:	78db      	ldrb	r3, [r3, #3]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d15a      	bne.n	80016ee <GetEventButton+0x856>
				{
					if(button5.byFlagBtn1Hold == 1)
 8001638:	4b3f      	ldr	r3, [pc, #252]	; (8001738 <GetEventButton+0x8a0>)
 800163a:	791b      	ldrb	r3, [r3, #4]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d10c      	bne.n	800165a <GetEventButton+0x7c2>
					{
						button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8001640:	4b3d      	ldr	r3, [pc, #244]	; (8001738 <GetEventButton+0x8a0>)
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
						button5.byFlagBtn1Press = 0;
 8001646:	4b3c      	ldr	r3, [pc, #240]	; (8001738 <GetEventButton+0x8a0>)
 8001648:	2200      	movs	r2, #0
 800164a:	709a      	strb	r2, [r3, #2]
						button5.byFlagBtn1Released = 0;
 800164c:	4b3a      	ldr	r3, [pc, #232]	; (8001738 <GetEventButton+0x8a0>)
 800164e:	2200      	movs	r2, #0
 8001650:	70da      	strb	r2, [r3, #3]
						button5.byFlagBtn1Hold = 0;
 8001652:	4b39      	ldr	r3, [pc, #228]	; (8001738 <GetEventButton+0x8a0>)
 8001654:	2200      	movs	r2, #0
 8001656:	711a      	strb	r2, [r3, #4]
 8001658:	e049      	b.n	80016ee <GetEventButton+0x856>
					}else
					{
						dwDeltaTime = dwCalculatorTime(button5.dwTimeInit, button5.dwTimeCurrent);
 800165a:	4b37      	ldr	r3, [pc, #220]	; (8001738 <GetEventButton+0x8a0>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	4a36      	ldr	r2, [pc, #216]	; (8001738 <GetEventButton+0x8a0>)
 8001660:	68d2      	ldr	r2, [r2, #12]
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fad5 	bl	8000c14 <dwCalculatorTime>
 800166a:	6078      	str	r0, [r7, #4]
						if((dwDeltaTime > BUTTON_NORMAL_PRESS_TIME)&&(dwDeltaTime < BUTTON_LONG_PRESS_TIME))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b3c      	cmp	r3, #60	; 0x3c
 8001670:	d928      	bls.n	80016c4 <GetEventButton+0x82c>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001678:	d224      	bcs.n	80016c4 <GetEventButton+0x82c>
						{
								dwDeltaTime = dwCalculatorTime(button5.dwTimeCurrent, dwTimeNow);
 800167a:	4b2f      	ldr	r3, [pc, #188]	; (8001738 <GetEventButton+0x8a0>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	6839      	ldr	r1, [r7, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fac7 	bl	8000c14 <dwCalculatorTime>
 8001686:	6078      	str	r0, [r7, #4]
							if(dwDeltaTime < BW2PRESS_TIME)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800168e:	d206      	bcs.n	800169e <GetEventButton+0x806>
							{
								button5.byFlagBtn1Released = 0;
 8001690:	4b29      	ldr	r3, [pc, #164]	; (8001738 <GetEventButton+0x8a0>)
 8001692:	2200      	movs	r2, #0
 8001694:	70da      	strb	r2, [r3, #3]
								button5.byFlagBtn1Press = 0;
 8001696:	4b28      	ldr	r3, [pc, #160]	; (8001738 <GetEventButton+0x8a0>)
 8001698:	2200      	movs	r2, #0
 800169a:	709a      	strb	r2, [r3, #2]
							if(dwDeltaTime < BW2PRESS_TIME)
 800169c:	e027      	b.n	80016ee <GetEventButton+0x856>
							}else
							{
								button5.buttonEven = checkEventButton(button5.byPressCnt);
 800169e:	4b26      	ldr	r3, [pc, #152]	; (8001738 <GetEventButton+0x8a0>)
 80016a0:	785b      	ldrb	r3, [r3, #1]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 f84c 	bl	8001740 <checkEventButton>
 80016a8:	4603      	mov	r3, r0
 80016aa:	461a      	mov	r2, r3
 80016ac:	4b22      	ldr	r3, [pc, #136]	; (8001738 <GetEventButton+0x8a0>)
 80016ae:	701a      	strb	r2, [r3, #0]
								button5.byPressCnt = 0;
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <GetEventButton+0x8a0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	705a      	strb	r2, [r3, #1]
								button5.byFlagBtn1Press = 0;
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <GetEventButton+0x8a0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	709a      	strb	r2, [r3, #2]
								button5.byFlagBtn1Released = 0;
 80016bc:	4b1e      	ldr	r3, [pc, #120]	; (8001738 <GetEventButton+0x8a0>)
 80016be:	2200      	movs	r2, #0
 80016c0:	70da      	strb	r2, [r3, #3]
							if(dwDeltaTime < BW2PRESS_TIME)
 80016c2:	e014      	b.n	80016ee <GetEventButton+0x856>
							}
						}
						else if(dwDeltaTime < BUTTON_NORMAL_PRESS_TIME)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b3b      	cmp	r3, #59	; 0x3b
 80016c8:	d811      	bhi.n	80016ee <GetEventButton+0x856>
						{
							button5.buttonEven = checkEventButton(button5.byPressCnt);
 80016ca:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <GetEventButton+0x8a0>)
 80016cc:	785b      	ldrb	r3, [r3, #1]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f836 	bl	8001740 <checkEventButton>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <GetEventButton+0x8a0>)
 80016da:	701a      	strb	r2, [r3, #0]
							button5.byPressCnt = 0;
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <GetEventButton+0x8a0>)
 80016de:	2200      	movs	r2, #0
 80016e0:	705a      	strb	r2, [r3, #1]
							button5.byFlagBtn1Press = 0;
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <GetEventButton+0x8a0>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	709a      	strb	r2, [r3, #2]
							button5.byFlagBtn1Released = 0;
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <GetEventButton+0x8a0>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	70da      	strb	r2, [r3, #3]
						}
					}
				}

				if((button5.byFlagBtn1Hold == 0)&&(button5.byFlagBtn1Press == 0))
 80016ee:	4b12      	ldr	r3, [pc, #72]	; (8001738 <GetEventButton+0x8a0>)
 80016f0:	791b      	ldrb	r3, [r3, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d11a      	bne.n	800172c <GetEventButton+0x894>
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <GetEventButton+0x8a0>)
 80016f8:	789b      	ldrb	r3, [r3, #2]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d116      	bne.n	800172c <GetEventButton+0x894>
				{
					dwDeltaTime = dwCalculatorTime(button5.dwTimeCurrent, dwTimeNow);
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <GetEventButton+0x8a0>)
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	6839      	ldr	r1, [r7, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fa85 	bl	8000c14 <dwCalculatorTime>
 800170a:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime > BW2PRESS_TIME)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001712:	d90b      	bls.n	800172c <GetEventButton+0x894>
					{
						button5.buttonEven = checkEventButton(button5.byPressCnt);
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <GetEventButton+0x8a0>)
 8001716:	785b      	ldrb	r3, [r3, #1]
 8001718:	4618      	mov	r0, r3
 800171a:	f000 f811 	bl	8001740 <checkEventButton>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <GetEventButton+0x8a0>)
 8001724:	701a      	strb	r2, [r3, #0]
						button5.byPressCnt = 0;
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <GetEventButton+0x8a0>)
 8001728:	2200      	movs	r2, #0
 800172a:	705a      	strb	r2, [r3, #1]
					}
				}

		}

}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200000e0 	.word	0x200000e0
 8001738:	200000f0 	.word	0x200000f0
 800173c:	40020000 	.word	0x40020000

08001740 <checkEventButton>:

static EventButton_e checkEventButton(u8 pressCnt)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
	EventButton_e event;
	switch(pressCnt)
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	3b01      	subs	r3, #1
 800174e:	2b04      	cmp	r3, #4
 8001750:	d81b      	bhi.n	800178a <checkEventButton+0x4a>
 8001752:	a201      	add	r2, pc, #4	; (adr r2, 8001758 <checkEventButton+0x18>)
 8001754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001758:	0800176d 	.word	0x0800176d
 800175c:	08001773 	.word	0x08001773
 8001760:	08001779 	.word	0x08001779
 8001764:	0800177f 	.word	0x0800177f
 8001768:	08001785 	.word	0x08001785
	{
	case 1:
		event = EVENT_OF_BUTTON_PRESS_1_TIMES;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
		break;
 8001770:	e00e      	b.n	8001790 <checkEventButton+0x50>
	case 2:
		event = EVENT_OF_BUTTON_PRESS_2_TIMES;
 8001772:	2302      	movs	r3, #2
 8001774:	73fb      	strb	r3, [r7, #15]
		break;
 8001776:	e00b      	b.n	8001790 <checkEventButton+0x50>
	case 3:
		event = EVENT_OF_BUTTON_PRESS_3_TIMES;
 8001778:	2303      	movs	r3, #3
 800177a:	73fb      	strb	r3, [r7, #15]
		break;
 800177c:	e008      	b.n	8001790 <checkEventButton+0x50>
	case 4:
		event = EVENT_OF_BUTTON_PRESS_4_TIMES;
 800177e:	2304      	movs	r3, #4
 8001780:	73fb      	strb	r3, [r7, #15]
		break;
 8001782:	e005      	b.n	8001790 <checkEventButton+0x50>
	case 5:
		event = EVENT_OF_BUTTON_PRESS_5_TIMES;
 8001784:	2305      	movs	r3, #5
 8001786:	73fb      	strb	r3, [r7, #15]
		break;
 8001788:	e002      	b.n	8001790 <checkEventButton+0x50>
	default:
		event = EVENT_OF_BUTTON_NOCLICK;
 800178a:	2300      	movs	r3, #0
 800178c:	73fb      	strb	r3, [r7, #15]
		break;
 800178e:	bf00      	nop
	}
	return event;
 8001790:	7bfb      	ldrb	r3, [r7, #15]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop

080017a0 <FLASH_Init>:
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/
/******************************************************************************/


void FLASH_Init(void) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	/* Next commands may be used in SysClock initialization function
	   In this case using of FLASH_Init is not obligatorily */
	/* Enable Prefetch Buffer */
	FLASH_PrefetchBufferCmd( ENABLE);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f7ff f8b9 	bl	800091c <FLASH_PrefetchBufferCmd>
	/* Flash 2 wait state */
	FLASH_SetLatency( FLASH_Latency_2);
 80017aa:	2002      	movs	r0, #2
 80017ac:	f7ff f8a6 	bl	80008fc <FLASH_SetLatency>

	if( UserData_FindAddress() == SUCCESS){
 80017b0:	f000 f83a 	bl	8001828 <UserData_FindAddress>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d004      	beq.n	80017c4 <FLASH_Init+0x24>
		//printf("Found User Data Address 0x%lu!\n", UserDataAddress);
	} else {
		//printf("Erase sector!\n");
		UserData_Erase();
 80017ba:	f000 f8ff 	bl	80019bc <UserData_Erase>
		UserDataAddress = USER_FLASH_FIRST_PAGE_ADDRESS;
 80017be:	4b02      	ldr	r3, [pc, #8]	; (80017c8 <FLASH_Init+0x28>)
 80017c0:	4a02      	ldr	r2, [pc, #8]	; (80017cc <FLASH_Init+0x2c>)
 80017c2:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0;i<6;i++){
	Data_Rx->Data = &UserData;
	Data_Rx->Used = FLASH_USERDATA_VALID;
	FLASH_RamToFlash();
//}*/
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000024 	.word	0x20000024
 80017cc:	08010000 	.word	0x08010000

080017d0 <FLASH_IsUserDataChange>:

uint8_t FLASH_IsUserDataChange(void){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	return (!(memcmp((void *)UserDataAddress, (void *)&UserData, USERDATA_BYTES_SIZE) == 0));
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <FLASH_IsUserDataChange+0x24>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2210      	movs	r2, #16
 80017da:	4907      	ldr	r1, [pc, #28]	; (80017f8 <FLASH_IsUserDataChange+0x28>)
 80017dc:	4618      	mov	r0, r3
 80017de:	f004 ff95 	bl	800670c <memcmp>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bf14      	ite	ne
 80017e8:	2301      	movne	r3, #1
 80017ea:	2300      	moveq	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000024 	.word	0x20000024
 80017f8:	20000100 	.word	0x20000100

080017fc <FLASH_RamToFlash>:

void FLASH_RamToFlash(void){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	if( FLASH_IsUserDataChange() ){
 8001800:	f7ff ffe6 	bl	80017d0 <FLASH_IsUserDataChange>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <FLASH_RamToFlash+0x12>
		//printf("Run\n");
		UserData_Write();
 800180a:	f000 f857 	bl	80018bc <UserData_Write>
	}
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <FLASH_GetUserData>:

UserData_t *FLASH_GetUserData(){
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
	return &UserData;
 8001818:	4b02      	ldr	r3, [pc, #8]	; (8001824 <FLASH_GetUserData+0x10>)
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	20000100 	.word	0x20000100

08001828 <UserData_FindAddress>:
/************************************/
static uint8_t UserData_FindAddress(void){
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < MAX_NUMBER_OF_USERDATA_IN_SECTOR; i++){
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	e015      	b.n	8001860 <UserData_FindAddress+0x38>
		UserData_Read();	//Read user data to
 8001834:	f000 f89c 	bl	8001970 <UserData_Read>
		if( UserData.Used == FLASH_USERDATA_VALID || UserData.Used == FLASH_USERDATA_IDLE){
 8001838:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <UserData_FindAddress+0x4c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f1b3 3f5a 	cmp.w	r3, #1515870810	; 0x5a5a5a5a
 8001840:	d004      	beq.n	800184c <UserData_FindAddress+0x24>
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <UserData_FindAddress+0x4c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184a:	d101      	bne.n	8001850 <UserData_FindAddress+0x28>
			return SUCCESS;
 800184c:	2301      	movs	r3, #1
 800184e:	e00c      	b.n	800186a <UserData_FindAddress+0x42>
		}
		UserDataAddress += USERDATA_BYTES_SIZE;
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <UserData_FindAddress+0x50>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	3310      	adds	r3, #16
 8001856:	4a08      	ldr	r2, [pc, #32]	; (8001878 <UserData_FindAddress+0x50>)
 8001858:	6013      	str	r3, [r2, #0]
	for(uint32_t i = 0; i < MAX_NUMBER_OF_USERDATA_IN_SECTOR; i++){
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3301      	adds	r3, #1
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001866:	d3e5      	bcc.n	8001834 <UserData_FindAddress+0xc>
	}
	return ERROR;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000100 	.word	0x20000100
 8001878:	20000024 	.word	0x20000024

0800187c <UserData_Clear>:

static uint8_t UserData_Clear(void){
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
	if( FLASH_ProgramWord((uint32_t)UserDataAddress, FLASH_USERDATA_INVALID) == FLASH_COMPLETE){
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <UserData_Clear+0x3c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f04f 3150 	mov.w	r1, #1347440720	; 0x50505050
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff f8ed 	bl	8000a68 <FLASH_ProgramWord>
 800188e:	4603      	mov	r3, r0
 8001890:	2b09      	cmp	r3, #9
 8001892:	d109      	bne.n	80018a8 <UserData_Clear+0x2c>
		if( *(__IO uint32_t*)UserDataAddress != FLASH_USERDATA_INVALID){
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <UserData_Clear+0x3c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f1b3 3f50 	cmp.w	r3, #1347440720	; 0x50505050
 800189e:	d007      	beq.n	80018b0 <UserData_Clear+0x34>
			FLASH_Lock();
 80018a0:	f7ff f872 	bl	8000988 <FLASH_Lock>
			//printf("UserData_Clear error\n");
			return ERROR;
 80018a4:	2300      	movs	r3, #0
 80018a6:	e004      	b.n	80018b2 <UserData_Clear+0x36>
		}
	} else {
	  /* Error occurred while writing data in Flash memory.
		 User can add here some code to deal with this error */
		FLASH_Lock();
 80018a8:	f7ff f86e 	bl	8000988 <FLASH_Lock>
		//printf("UserData_Clear error 2\n");
		return ERROR;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e000      	b.n	80018b2 <UserData_Clear+0x36>
	}
	return SUCCESS;
 80018b0:	2301      	movs	r3, #1
//	UserDataAddress += USERDATA_BYTES_SIZE;
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000024 	.word	0x20000024

080018bc <UserData_Write>:

static uint8_t UserData_Write(void){
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
	/* Enable the flash control register access */
	FLASH_Unlock();
 80018c2:	f7ff f849 	bl	8000958 <FLASH_Unlock>
	/* Erase the user Flash area ************************************************/
	/* area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR */

	/* Clear pending flags (if any) */
	FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 80018c6:	20f3      	movs	r0, #243	; 0xf3
 80018c8:	f7ff f902 	bl	8000ad0 <FLASH_ClearFlag>
				  FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR|FLASH_FLAG_PGSERR);

	/*Clear IsUsed in userdata*/
	if( UserData_Clear() != SUCCESS ){
 80018cc:	f7ff ffd6 	bl	800187c <UserData_Clear>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d001      	beq.n	80018da <UserData_Write+0x1e>
		//printf("Error clear\n");
		return ERROR;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e03e      	b.n	8001958 <UserData_Write+0x9c>
	}
	UserDataAddress += USERDATA_BYTES_SIZE;
 80018da:	4b21      	ldr	r3, [pc, #132]	; (8001960 <UserData_Write+0xa4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	3310      	adds	r3, #16
 80018e0:	4a1f      	ldr	r2, [pc, #124]	; (8001960 <UserData_Write+0xa4>)
 80018e2:	6013      	str	r3, [r2, #0]

	if( UserDataAddress > USER_FLASH_FIRST_PAGE_ADDRESS + USERDATA_WORDS_SIZE * MAX_NUMBER_OF_USERDATA_IN_SECTOR){
 80018e4:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <UserData_Write+0xa4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a1e      	ldr	r2, [pc, #120]	; (8001964 <UserData_Write+0xa8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d904      	bls.n	80018f8 <UserData_Write+0x3c>
		//printf("Sector is full to erase sector!\n");
		UserData_Erase();
 80018ee:	f000 f865 	bl	80019bc <UserData_Erase>
		UserDataAddress = USER_FLASH_FIRST_PAGE_ADDRESS;
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <UserData_Write+0xa4>)
 80018f4:	4a1c      	ldr	r2, [pc, #112]	; (8001968 <UserData_Write+0xac>)
 80018f6:	601a      	str	r2, [r3, #0]
	}
	// Write settings
	UserData.Used = FLASH_USERDATA_VALID;	//initialize valid block
 80018f8:	4b1c      	ldr	r3, [pc, #112]	; (800196c <UserData_Write+0xb0>)
 80018fa:	f04f 325a 	mov.w	r2, #1515870810	; 0x5a5a5a5a
 80018fe:	601a      	str	r2, [r3, #0]
	uint32_t *source_addr = (void *)&UserData;
 8001900:	4b1a      	ldr	r3, [pc, #104]	; (800196c <UserData_Write+0xb0>)
 8001902:	60fb      	str	r3, [r7, #12]
	uint32_t dest_addr = UserDataAddress;
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <UserData_Write+0xa4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60bb      	str	r3, [r7, #8]
	for (uint16_t i = 0; i < USERDATA_WORDS_SIZE; i++) {
 800190a:	2300      	movs	r3, #0
 800190c:	80fb      	strh	r3, [r7, #6]
 800190e:	e01f      	b.n	8001950 <UserData_Write+0x94>
		if( FLASH_ProgramWord(dest_addr, *source_addr) == FLASH_COMPLETE){
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4619      	mov	r1, r3
 8001916:	68b8      	ldr	r0, [r7, #8]
 8001918:	f7ff f8a6 	bl	8000a68 <FLASH_ProgramWord>
 800191c:	4603      	mov	r3, r0
 800191e:	2b09      	cmp	r3, #9
 8001920:	d109      	bne.n	8001936 <UserData_Write+0x7a>
			//printf("FLASH_COMPLETE\n");
			if( *((uint32_t*)dest_addr) != *source_addr){
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d007      	beq.n	800193e <UserData_Write+0x82>
				//printf("ERROR\n");
				FLASH_Lock();
 800192e:	f7ff f82b 	bl	8000988 <FLASH_Lock>
				return ERROR;
 8001932:	2300      	movs	r3, #0
 8001934:	e010      	b.n	8001958 <UserData_Write+0x9c>
		}
		else {
		  /* Error occurred while writing data in Flash memory.
			 User can add here some code to deal with this error */
			//printf("ERROR2\n");
			FLASH_Lock();
 8001936:	f7ff f827 	bl	8000988 <FLASH_Lock>
			return ERROR;
 800193a:	2300      	movs	r3, #0
 800193c:	e00c      	b.n	8001958 <UserData_Write+0x9c>
		}
		source_addr++;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3304      	adds	r3, #4
 8001942:	60fb      	str	r3, [r7, #12]
		dest_addr += WORD_SIZE;
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	3304      	adds	r3, #4
 8001948:	60bb      	str	r3, [r7, #8]
	for (uint16_t i = 0; i < USERDATA_WORDS_SIZE; i++) {
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	3301      	adds	r3, #1
 800194e:	80fb      	strh	r3, [r7, #6]
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	2b03      	cmp	r3, #3
 8001954:	d9dc      	bls.n	8001910 <UserData_Write+0x54>
	}
	//printf("write success\n");
	return SUCCESS;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000024 	.word	0x20000024
 8001964:	08030000 	.word	0x08030000
 8001968:	08010000 	.word	0x08010000
 800196c:	20000100 	.word	0x20000100

08001970 <UserData_Read>:

static void UserData_Read( void ){
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
	//Read settings
	uint32_t *source_addr = (uint32_t *)UserDataAddress;
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <UserData_Read+0x44>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	60fb      	str	r3, [r7, #12]
	uint32_t *dest_addr = (void *)&UserData;
 800197c:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <UserData_Read+0x48>)
 800197e:	60bb      	str	r3, [r7, #8]
	for (uint16_t i=0; i < USERDATA_WORDS_SIZE; i++) {
 8001980:	2300      	movs	r3, #0
 8001982:	80fb      	strh	r3, [r7, #6]
 8001984:	e00c      	b.n	80019a0 <UserData_Read+0x30>
		*dest_addr = *(__IO uint32_t*)source_addr;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	601a      	str	r2, [r3, #0]
		source_addr++;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	3304      	adds	r3, #4
 8001992:	60fb      	str	r3, [r7, #12]
		dest_addr++;
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	3304      	adds	r3, #4
 8001998:	60bb      	str	r3, [r7, #8]
	for (uint16_t i=0; i < USERDATA_WORDS_SIZE; i++) {
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	3301      	adds	r3, #1
 800199e:	80fb      	strh	r3, [r7, #6]
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d9ef      	bls.n	8001986 <UserData_Read+0x16>
	}
}
 80019a6:	bf00      	nop
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	20000024 	.word	0x20000024
 80019b8:	20000100 	.word	0x20000100

080019bc <UserData_Erase>:

static void UserData_Erase(){
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	/* Enable the flash control register access */
	FLASH_Unlock();
 80019c0:	f7fe ffca 	bl	8000958 <FLASH_Unlock>

	FLASH_EraseSector(FLASH_Sector_5, VoltageRange_4);
 80019c4:	2103      	movs	r1, #3
 80019c6:	2028      	movs	r0, #40	; 0x28
 80019c8:	f7fe ffee 	bl	80009a8 <FLASH_EraseSector>

	FLASH_Lock();
 80019cc:	f7fe ffdc 	bl	8000988 <FLASH_Lock>
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <GUI_DrawPoint>:
                y:the y coordinate of the point
								color:the color value of the point
 * @retvalue   :None
********************************************************************/
void GUI_DrawPoint(u16 x,u16 y,u16 color)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	80fb      	strh	r3, [r7, #6]
 80019de:	460b      	mov	r3, r1
 80019e0:	80bb      	strh	r3, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	807b      	strh	r3, [r7, #2]
	LCD_SetCursor(x,y);
 80019e6:	88ba      	ldrh	r2, [r7, #4]
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f001 ff89 	bl	8003904 <LCD_SetCursor>
	Lcd_WriteData_16Bit(color); 
 80019f2:	887b      	ldrh	r3, [r7, #2]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f001 fcef 	bl	80033d8 <Lcd_WriteData_16Bit>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <LCD_Fill>:
								ey:the ending y coordinate of the specified area
								color:the filled color value
 * @retvalue   :None
********************************************************************/
void LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 color)
{  	
 8001a04:	b590      	push	{r4, r7, lr}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	4608      	mov	r0, r1
 8001a0e:	4611      	mov	r1, r2
 8001a10:	461a      	mov	r2, r3
 8001a12:	4623      	mov	r3, r4
 8001a14:	80fb      	strh	r3, [r7, #6]
 8001a16:	4603      	mov	r3, r0
 8001a18:	80bb      	strh	r3, [r7, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	807b      	strh	r3, [r7, #2]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	803b      	strh	r3, [r7, #0]
	u16 i,j;			
	u16 width=ex-sx+1;
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	88fb      	ldrh	r3, [r7, #6]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	817b      	strh	r3, [r7, #10]
	u16 height=ey-sy+1;
 8001a2e:	883a      	ldrh	r2, [r7, #0]
 8001a30:	88bb      	ldrh	r3, [r7, #4]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	3301      	adds	r3, #1
 8001a38:	813b      	strh	r3, [r7, #8]
	LCD_SetWindows(sx,sy,ex,ey);
 8001a3a:	883b      	ldrh	r3, [r7, #0]
 8001a3c:	887a      	ldrh	r2, [r7, #2]
 8001a3e:	88b9      	ldrh	r1, [r7, #4]
 8001a40:	88f8      	ldrh	r0, [r7, #6]
 8001a42:	f001 ff0b 	bl	800385c <LCD_SetWindows>
	for(i=0;i<height;i++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	81fb      	strh	r3, [r7, #14]
 8001a4a:	e010      	b.n	8001a6e <LCD_Fill+0x6a>
	{
		for(j=0;j<width;j++)
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	81bb      	strh	r3, [r7, #12]
 8001a50:	e006      	b.n	8001a60 <LCD_Fill+0x5c>
		Lcd_WriteData_16Bit(color);
 8001a52:	8c3b      	ldrh	r3, [r7, #32]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f001 fcbf 	bl	80033d8 <Lcd_WriteData_16Bit>
		for(j=0;j<width;j++)
 8001a5a:	89bb      	ldrh	r3, [r7, #12]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	81bb      	strh	r3, [r7, #12]
 8001a60:	89ba      	ldrh	r2, [r7, #12]
 8001a62:	897b      	ldrh	r3, [r7, #10]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d3f4      	bcc.n	8001a52 <LCD_Fill+0x4e>
	for(i=0;i<height;i++)
 8001a68:	89fb      	ldrh	r3, [r7, #14]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	81fb      	strh	r3, [r7, #14]
 8001a6e:	89fa      	ldrh	r2, [r7, #14]
 8001a70:	893b      	ldrh	r3, [r7, #8]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d3ea      	bcc.n	8001a4c <LCD_Fill+0x48>
	}
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <LCD_Fill+0x94>)
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <LCD_Fill+0x94>)
 8001a80:	885b      	ldrh	r3, [r3, #2]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	2100      	movs	r1, #0
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f001 fee7 	bl	800385c <LCD_SetWindows>
}
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd90      	pop	{r4, r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000110 	.word	0x20000110

08001a9c <LCD_DrawLine>:
								x2:the ending x coordinate of the line
								y2:the ending y coordinate of the line
 * @retvalue   :None
********************************************************************/
void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
{
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b08d      	sub	sp, #52	; 0x34
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	4608      	mov	r0, r1
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4623      	mov	r3, r4
 8001aac:	80fb      	strh	r3, [r7, #6]
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80bb      	strh	r3, [r7, #4]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	807b      	strh	r3, [r7, #2]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	803b      	strh	r3, [r7, #0]
	u16 t; 
	int xerr=0,yerr=0,delta_x,delta_y,distance; 
 8001aba:	2300      	movs	r3, #0
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol; 

	delta_x=x2-x1;
 8001ac2:	887a      	ldrh	r2, [r7, #2]
 8001ac4:	88fb      	ldrh	r3, [r7, #6]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1; 
 8001aca:	883a      	ldrh	r2, [r7, #0]
 8001acc:	88bb      	ldrh	r3, [r7, #4]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	61fb      	str	r3, [r7, #28]
	uRow=x1; 
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	60fb      	str	r3, [r7, #12]
	uCol=y1; 
 8001ad6:	88bb      	ldrh	r3, [r7, #4]
 8001ad8:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	dd02      	ble.n	8001ae6 <LCD_DrawLine+0x4a>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	e00b      	b.n	8001afe <LCD_DrawLine+0x62>
	else if(delta_x==0)incx=0;
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <LCD_DrawLine+0x56>
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	e005      	b.n	8001afe <LCD_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;} 
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	425b      	negs	r3, r3
 8001afc:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1; 
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	dd02      	ble.n	8001b0a <LCD_DrawLine+0x6e>
 8001b04:	2301      	movs	r3, #1
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	e00b      	b.n	8001b22 <LCD_DrawLine+0x86>
	else if(delta_y==0)incy=0;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d102      	bne.n	8001b16 <LCD_DrawLine+0x7a>
 8001b10:	2300      	movs	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	e005      	b.n	8001b22 <LCD_DrawLine+0x86>
	else{incy=-1;delta_y=-delta_y;} 
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	425b      	negs	r3, r3
 8001b20:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x;
 8001b22:	6a3a      	ldr	r2, [r7, #32]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	dd02      	ble.n	8001b30 <LCD_DrawLine+0x94>
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	e001      	b.n	8001b34 <LCD_DrawLine+0x98>
	else distance=delta_y; 
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )
 8001b34:	2300      	movs	r3, #0
 8001b36:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001b38:	e02a      	b.n	8001b90 <LCD_DrawLine+0xf4>
	{  
		LCD_DrawPoint(uRow,uCol);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	b292      	uxth	r2, r2
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f001 fc7d 	bl	8003444 <LCD_DrawPoint>
		xerr+=delta_x ; 
 8001b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	4413      	add	r3, r2
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y ; 
 8001b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	4413      	add	r3, r2
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance) 
 8001b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	dd07      	ble.n	8001b72 <LCD_DrawLine+0xd6>
		{ 
			xerr-=distance; 
 8001b62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx; 
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	4413      	add	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
		} 
		if(yerr>distance) 
 8001b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	dd07      	ble.n	8001b8a <LCD_DrawLine+0xee>
		{ 
			yerr-=distance; 
 8001b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy; 
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	4413      	add	r3, r2
 8001b88:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )
 8001b8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001b90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	3301      	adds	r3, #1
 8001b96:	429a      	cmp	r2, r3
 8001b98:	ddcf      	ble.n	8001b3a <LCD_DrawLine+0x9e>
		} 
	}  
} 
 8001b9a:	bf00      	nop
 8001b9c:	bf00      	nop
 8001b9e:	3734      	adds	r7, #52	; 0x34
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd90      	pop	{r4, r7, pc}

08001ba4 <LCD_DrawRectangle>:
								x2:the ending x coordinate of the rectangle
								y2:the ending y coordinate of the rectangle
 * @retvalue   :None
******************************************************************************/
void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2)
{
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4604      	mov	r4, r0
 8001bac:	4608      	mov	r0, r1
 8001bae:	4611      	mov	r1, r2
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4623      	mov	r3, r4
 8001bb4:	80fb      	strh	r3, [r7, #6]
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	80bb      	strh	r3, [r7, #4]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	807b      	strh	r3, [r7, #2]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x1,y1,x2,y1);
 8001bc2:	88bb      	ldrh	r3, [r7, #4]
 8001bc4:	887a      	ldrh	r2, [r7, #2]
 8001bc6:	88b9      	ldrh	r1, [r7, #4]
 8001bc8:	88f8      	ldrh	r0, [r7, #6]
 8001bca:	f7ff ff67 	bl	8001a9c <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x1,y2);
 8001bce:	883b      	ldrh	r3, [r7, #0]
 8001bd0:	88fa      	ldrh	r2, [r7, #6]
 8001bd2:	88b9      	ldrh	r1, [r7, #4]
 8001bd4:	88f8      	ldrh	r0, [r7, #6]
 8001bd6:	f7ff ff61 	bl	8001a9c <LCD_DrawLine>
	LCD_DrawLine(x1,y2,x2,y2);
 8001bda:	883b      	ldrh	r3, [r7, #0]
 8001bdc:	887a      	ldrh	r2, [r7, #2]
 8001bde:	8839      	ldrh	r1, [r7, #0]
 8001be0:	88f8      	ldrh	r0, [r7, #6]
 8001be2:	f7ff ff5b 	bl	8001a9c <LCD_DrawLine>
	LCD_DrawLine(x2,y1,x2,y2);
 8001be6:	883b      	ldrh	r3, [r7, #0]
 8001be8:	887a      	ldrh	r2, [r7, #2]
 8001bea:	88b9      	ldrh	r1, [r7, #4]
 8001bec:	8878      	ldrh	r0, [r7, #2]
 8001bee:	f7ff ff55 	bl	8001a9c <LCD_DrawLine>
	LCD_SetColorPoint(BLACK);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f001 fc16 	bl	8003424 <LCD_SetColorPoint>
}  
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd90      	pop	{r4, r7, pc}

08001c00 <_draw_circle_8>:
								y:the y coordinate relative to the Circular center 
								c:the color value of the circle
 * @retvalue   :None
******************************************************************************/  
void _draw_circle_8(int xc, int yc, int x, int y, u16 c)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	603b      	str	r3, [r7, #0]
	GUI_DrawPoint(xc + x, yc + y, c);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	4413      	add	r3, r2
 8001c18:	b298      	uxth	r0, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	4413      	add	r3, r2
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	8b3a      	ldrh	r2, [r7, #24]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f7ff fed3 	bl	80019d4 <GUI_DrawPoint>

	GUI_DrawPoint(xc - x, yc + y, c);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	b298      	uxth	r0, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	4413      	add	r3, r2
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	8b3a      	ldrh	r2, [r7, #24]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f7ff fec3 	bl	80019d4 <GUI_DrawPoint>

	GUI_DrawPoint(xc + x, yc - y, c);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	4413      	add	r3, r2
 8001c58:	b298      	uxth	r0, r3
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	8b3a      	ldrh	r2, [r7, #24]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7ff feb3 	bl	80019d4 <GUI_DrawPoint>

	GUI_DrawPoint(xc - x, yc - y, c);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	b298      	uxth	r0, r3
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	8b3a      	ldrh	r2, [r7, #24]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7ff fea3 	bl	80019d4 <GUI_DrawPoint>

	GUI_DrawPoint(xc + y, yc + x, c);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	b298      	uxth	r0, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	8b3a      	ldrh	r2, [r7, #24]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f7ff fe93 	bl	80019d4 <GUI_DrawPoint>

	GUI_DrawPoint(xc - y, yc + x, c);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	b298      	uxth	r0, r3
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	8b3a      	ldrh	r2, [r7, #24]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f7ff fe83 	bl	80019d4 <GUI_DrawPoint>

	GUI_DrawPoint(xc + y, yc - x, c);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	b298      	uxth	r0, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	8b3a      	ldrh	r2, [r7, #24]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f7ff fe73 	bl	80019d4 <GUI_DrawPoint>

	GUI_DrawPoint(xc - y, yc - x, c);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	b298      	uxth	r0, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	8b3a      	ldrh	r2, [r7, #24]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f7ff fe63 	bl	80019d4 <GUI_DrawPoint>
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <gui_circle>:
								r:Circular radius
								fill:1-filling,0-no filling
 * @retvalue   :None
******************************************************************************/  
void gui_circle(int xc, int yc,u16 c,int r, int fill)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b08a      	sub	sp, #40	; 0x28
 8001d1a:	af02      	add	r7, sp, #8
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	4613      	mov	r3, r2
 8001d24:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	f1c3 0303 	rsb	r3, r3, #3
 8001d36:	613b      	str	r3, [r7, #16]


	if (fill) 
 8001d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d04f      	beq.n	8001dde <gui_circle+0xc8>
	{
		// �����䣨��ʵ��Բ��
		while (x <= y) {
 8001d3e:	e029      	b.n	8001d94 <gui_circle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	e00a      	b.n	8001d5c <gui_circle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	68b9      	ldr	r1, [r7, #8]
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f7ff ff55 	bl	8001c00 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	ddf0      	ble.n	8001d46 <gui_circle+0x30>

			if (d < 0) {
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	da06      	bge.n	8001d78 <gui_circle+0x62>
				d = d + 4 * x + 6;
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	009a      	lsls	r2, r3, #2
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4413      	add	r3, r2
 8001d72:	3306      	adds	r3, #6
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	e00a      	b.n	8001d8e <gui_circle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8001d78:	69fa      	ldr	r2, [r7, #28]
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	009a      	lsls	r2, r3, #2
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4413      	add	r3, r2
 8001d84:	330a      	adds	r3, #10
 8001d86:	613b      	str	r3, [r7, #16]
				y--;
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3301      	adds	r3, #1
 8001d92:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	ddd1      	ble.n	8001d40 <gui_circle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001d9c:	e023      	b.n	8001de6 <gui_circle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	68b9      	ldr	r1, [r7, #8]
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f7ff ff29 	bl	8001c00 <_draw_circle_8>
			if (d < 0) {
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	da06      	bge.n	8001dc2 <gui_circle+0xac>
				d = d + 4 * x + 6;
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	009a      	lsls	r2, r3, #2
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4413      	add	r3, r2
 8001dbc:	3306      	adds	r3, #6
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	e00a      	b.n	8001dd8 <gui_circle+0xc2>
				d = d + 4 * (x - y) + 10;
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	009a      	lsls	r2, r3, #2
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4413      	add	r3, r2
 8001dce:	330a      	adds	r3, #10
 8001dd0:	613b      	str	r3, [r7, #16]
				y--;
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	61bb      	str	r3, [r7, #24]
			x++;
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	dddb      	ble.n	8001d9e <gui_circle+0x88>
}
 8001de6:	bf00      	nop
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <_swap>:
	LCD_DrawLine(x1,y1,x2,y2);
	LCD_DrawLine(x2,y2,x0,y0);
}

static void _swap(u16 *a, u16 *b)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
	u16 tmp;
  tmp = *a;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	81fb      	strh	r3, [r7, #14]
	*a = *b;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	881a      	ldrh	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	801a      	strh	r2, [r3, #0]
	*b = tmp;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	89fa      	ldrh	r2, [r7, #14]
 8001e0a:	801a      	strh	r2, [r3, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <Fill_Triangel>:
								x2:the ending x coordinate of the triangular edge 
								y2:the ending y coordinate of the triangular edge 
 * @retvalue   :None
******************************************************************************/ 
void Fill_Triangel(u16 x0,u16 y0,u16 x1,u16 y1,u16 x2,u16 y2)
{
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b08f      	sub	sp, #60	; 0x3c
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	4604      	mov	r4, r0
 8001e20:	4608      	mov	r0, r1
 8001e22:	4611      	mov	r1, r2
 8001e24:	461a      	mov	r2, r3
 8001e26:	4623      	mov	r3, r4
 8001e28:	80fb      	strh	r3, [r7, #6]
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80bb      	strh	r3, [r7, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	807b      	strh	r3, [r7, #2]
 8001e32:	4613      	mov	r3, r2
 8001e34:	803b      	strh	r3, [r7, #0]
	u16 a, b, y, last;
	int dx01, dy01, dx02, dy02, dx12, dy12;
	long sa = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
	long sb = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
 	if (y0 > y1) 
 8001e3e:	88ba      	ldrh	r2, [r7, #4]
 8001e40:	883b      	ldrh	r3, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d90b      	bls.n	8001e5e <Fill_Triangel+0x46>
	{
    _swap(&y0,&y1); 
 8001e46:	463a      	mov	r2, r7
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ffce 	bl	8001dee <_swap>
		_swap(&x0,&x1);
 8001e52:	1cba      	adds	r2, r7, #2
 8001e54:	1dbb      	adds	r3, r7, #6
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ffc8 	bl	8001dee <_swap>
 	}
 	if (y1 > y2) 
 8001e5e:	883a      	ldrh	r2, [r7, #0]
 8001e60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d90c      	bls.n	8001e82 <Fill_Triangel+0x6a>
	{
    _swap(&y2,&y1); 
 8001e68:	463a      	mov	r2, r7
 8001e6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e6e:	4611      	mov	r1, r2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ffbc 	bl	8001dee <_swap>
		_swap(&x2,&x1);
 8001e76:	1cbb      	adds	r3, r7, #2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001e7e:	f7ff ffb6 	bl	8001dee <_swap>
 	}
  if (y0 > y1) 
 8001e82:	88ba      	ldrh	r2, [r7, #4]
 8001e84:	883b      	ldrh	r3, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d90b      	bls.n	8001ea2 <Fill_Triangel+0x8a>
	{
    _swap(&y0,&y1); 
 8001e8a:	463a      	mov	r2, r7
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ffac 	bl	8001dee <_swap>
		_swap(&x0,&x1);
 8001e96:	1cba      	adds	r2, r7, #2
 8001e98:	1dbb      	adds	r3, r7, #6
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ffa6 	bl	8001dee <_swap>
  }
	if(y0 == y2) 
 8001ea2:	88ba      	ldrh	r2, [r7, #4]
 8001ea4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d12c      	bne.n	8001f06 <Fill_Triangel+0xee>
	{ 
		a = b = x0;
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	813b      	strh	r3, [r7, #8]
 8001eb0:	893b      	ldrh	r3, [r7, #8]
 8001eb2:	817b      	strh	r3, [r7, #10]
		if(x1 < a)
 8001eb4:	887a      	ldrh	r2, [r7, #2]
 8001eb6:	897b      	ldrh	r3, [r7, #10]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d202      	bcs.n	8001ec2 <Fill_Triangel+0xaa>
    {
			a = x1;
 8001ebc:	887b      	ldrh	r3, [r7, #2]
 8001ebe:	817b      	strh	r3, [r7, #10]
 8001ec0:	e005      	b.n	8001ece <Fill_Triangel+0xb6>
    }
    else if(x1 > b)
 8001ec2:	887a      	ldrh	r2, [r7, #2]
 8001ec4:	893b      	ldrh	r3, [r7, #8]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d901      	bls.n	8001ece <Fill_Triangel+0xb6>
    {
			b = x1;
 8001eca:	887b      	ldrh	r3, [r7, #2]
 8001ecc:	813b      	strh	r3, [r7, #8]
    }
    if(x2 < a)
 8001ece:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001ed2:	897b      	ldrh	r3, [r7, #10]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d203      	bcs.n	8001ee0 <Fill_Triangel+0xc8>
    {
			a = x2;
 8001ed8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001edc:	817b      	strh	r3, [r7, #10]
 8001ede:	e007      	b.n	8001ef0 <Fill_Triangel+0xd8>
    }
		else if(x2 > b)
 8001ee0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001ee4:	893b      	ldrh	r3, [r7, #8]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d902      	bls.n	8001ef0 <Fill_Triangel+0xd8>
    {
			b = x2;
 8001eea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001eee:	813b      	strh	r3, [r7, #8]
    }
		LCD_Fill(a,y0,b,y0,POINT_COLOR);
 8001ef0:	8978      	ldrh	r0, [r7, #10]
 8001ef2:	88b9      	ldrh	r1, [r7, #4]
 8001ef4:	893a      	ldrh	r2, [r7, #8]
 8001ef6:	88bc      	ldrh	r4, [r7, #4]
 8001ef8:	4b5b      	ldr	r3, [pc, #364]	; (8002068 <Fill_Triangel+0x250>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	4623      	mov	r3, r4
 8001f00:	f7ff fd80 	bl	8001a04 <LCD_Fill>
 8001f04:	e0ad      	b.n	8002062 <Fill_Triangel+0x24a>
    return;
	}
	dx01 = x1 - x0;
 8001f06:	887b      	ldrh	r3, [r7, #2]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	623b      	str	r3, [r7, #32]
	dy01 = y1 - y0;
 8001f10:	883b      	ldrh	r3, [r7, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	88bb      	ldrh	r3, [r7, #4]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	61fb      	str	r3, [r7, #28]
	dx02 = x2 - x0;
 8001f1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f1e:	461a      	mov	r2, r3
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	61bb      	str	r3, [r7, #24]
	dy02 = y2 - y0;
 8001f26:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	88bb      	ldrh	r3, [r7, #4]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	617b      	str	r3, [r7, #20]
	dx12 = x2 - x1;
 8001f32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f36:	461a      	mov	r2, r3
 8001f38:	887b      	ldrh	r3, [r7, #2]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	613b      	str	r3, [r7, #16]
	dy12 = y2 - y1;
 8001f3e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001f42:	461a      	mov	r2, r3
 8001f44:	883b      	ldrh	r3, [r7, #0]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	60fb      	str	r3, [r7, #12]
	
	if(y1 == y2)
 8001f4a:	883a      	ldrh	r2, [r7, #0]
 8001f4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d102      	bne.n	8001f5a <Fill_Triangel+0x142>
	{
		last = y1; 
 8001f54:	883b      	ldrh	r3, [r7, #0]
 8001f56:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001f58:	e002      	b.n	8001f60 <Fill_Triangel+0x148>
	}
  else
	{
		last = y1-1; 
 8001f5a:	883b      	ldrh	r3, [r7, #0]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	}
	for(y=y0; y<=last; y++) 
 8001f60:	88bb      	ldrh	r3, [r7, #4]
 8001f62:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001f64:	e032      	b.n	8001fcc <Fill_Triangel+0x1b4>
	{
		a = x0 + sa / dy01;
 8001f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	88fb      	ldrh	r3, [r7, #6]
 8001f72:	4413      	add	r3, r2
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	817b      	strh	r3, [r7, #10]
		b = x0 + sb / dy02;
 8001f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	4413      	add	r3, r2
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	813b      	strh	r3, [r7, #8]
		sa += dx01;
 8001f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	4413      	add	r3, r2
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
    sb += dx02;
 8001f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	4413      	add	r3, r2
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
    if(a > b)
 8001f9a:	897a      	ldrh	r2, [r7, #10]
 8001f9c:	893b      	ldrh	r3, [r7, #8]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d907      	bls.n	8001fb2 <Fill_Triangel+0x19a>
    {
			_swap(&a,&b);
 8001fa2:	f107 0208 	add.w	r2, r7, #8
 8001fa6:	f107 030a 	add.w	r3, r7, #10
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff1e 	bl	8001dee <_swap>
		}
		LCD_Fill(a,y,b,y,POINT_COLOR);
 8001fb2:	8978      	ldrh	r0, [r7, #10]
 8001fb4:	893a      	ldrh	r2, [r7, #8]
 8001fb6:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <Fill_Triangel+0x250>)
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8001fbc:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	4623      	mov	r3, r4
 8001fc2:	f7ff fd1f 	bl	8001a04 <LCD_Fill>
	for(y=y0; y<=last; y++) 
 8001fc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fc8:	3301      	adds	r3, #1
 8001fca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001fcc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001fce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d9c8      	bls.n	8001f66 <Fill_Triangel+0x14e>
	}
	sa = dx12 * (y - y1);
 8001fd4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fd6:	883a      	ldrh	r2, [r7, #0]
 8001fd8:	1a9a      	subs	r2, r3, r2
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	62bb      	str	r3, [r7, #40]	; 0x28
	sb = dx02 * (y - y0);
 8001fe2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fe4:	88ba      	ldrh	r2, [r7, #4]
 8001fe6:	1a9a      	subs	r2, r3, r2
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
	for(; y<=y2; y++) 
 8001ff0:	e032      	b.n	8002058 <Fill_Triangel+0x240>
	{
		a = x1 + sa / dy12;
 8001ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	887b      	ldrh	r3, [r7, #2]
 8001ffe:	4413      	add	r3, r2
 8002000:	b29b      	uxth	r3, r3
 8002002:	817b      	strh	r3, [r7, #10]
		b = x0 + sb / dy02;
 8002004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	fb92 f3f3 	sdiv	r3, r2, r3
 800200c:	b29a      	uxth	r2, r3
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	4413      	add	r3, r2
 8002012:	b29b      	uxth	r3, r3
 8002014:	813b      	strh	r3, [r7, #8]
		sa += dx12;
 8002016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
		sb += dx02;
 800201e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	4413      	add	r3, r2
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
		if(a > b)
 8002026:	897a      	ldrh	r2, [r7, #10]
 8002028:	893b      	ldrh	r3, [r7, #8]
 800202a:	429a      	cmp	r2, r3
 800202c:	d907      	bls.n	800203e <Fill_Triangel+0x226>
		{
			_swap(&a,&b);
 800202e:	f107 0208 	add.w	r2, r7, #8
 8002032:	f107 030a 	add.w	r3, r7, #10
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fed8 	bl	8001dee <_swap>
		}
		LCD_Fill(a,y,b,y,POINT_COLOR);
 800203e:	8978      	ldrh	r0, [r7, #10]
 8002040:	893a      	ldrh	r2, [r7, #8]
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <Fill_Triangel+0x250>)
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8002048:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	4623      	mov	r3, r4
 800204e:	f7ff fcd9 	bl	8001a04 <LCD_Fill>
	for(; y<=y2; y++) 
 8002052:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002054:	3301      	adds	r3, #1
 8002056:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002058:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800205c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800205e:	429a      	cmp	r2, r3
 8002060:	d9c7      	bls.n	8001ff2 <Fill_Triangel+0x1da>
	}
}
 8002062:	3734      	adds	r7, #52	; 0x34
 8002064:	46bd      	mov	sp, r7
 8002066:	bd90      	pop	{r4, r7, pc}
 8002068:	2000011e 	.word	0x2000011e

0800206c <LCD_ShowTitle>:
				size:the size of display character
				mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void LCD_ShowTitle(u16 sizeBox,u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af04      	add	r7, sp, #16
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	4603      	mov	r3, r0
 8002076:	81fb      	strh	r3, [r7, #14]
 8002078:	460b      	mov	r3, r1
 800207a:	81bb      	strh	r3, [r7, #12]
 800207c:	4613      	mov	r3, r2
 800207e:	817b      	strh	r3, [r7, #10]
	LCD_ClearCursor(0, 0, 320, sizeBox, WHITE);
 8002080:	89fb      	ldrh	r3, [r7, #14]
 8002082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002086:	9200      	str	r2, [sp, #0]
 8002088:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800208c:	2100      	movs	r1, #0
 800208e:	2000      	movs	r0, #0
 8002090:	f001 fa32 	bl	80034f8 <LCD_ClearCursor>
	LCD_Fill(0, 0, 320, sizeBox, bc);
 8002094:	89fa      	ldrh	r2, [r7, #14]
 8002096:	897b      	ldrh	r3, [r7, #10]
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	4613      	mov	r3, r2
 800209c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80020a0:	2100      	movs	r1, #0
 80020a2:	2000      	movs	r0, #0
 80020a4:	f7ff fcae 	bl	8001a04 <LCD_Fill>
	Gui_StrCenter(0,sizeBox-size,fc,bc,str,16,1);
 80020a8:	7e3b      	ldrb	r3, [r7, #24]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	89fa      	ldrh	r2, [r7, #14]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	b299      	uxth	r1, r3
 80020b2:	8978      	ldrh	r0, [r7, #10]
 80020b4:	89ba      	ldrh	r2, [r7, #12]
 80020b6:	2301      	movs	r3, #1
 80020b8:	9302      	str	r3, [sp, #8]
 80020ba:	2310      	movs	r3, #16
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	4603      	mov	r3, r0
 80020c4:	2000      	movs	r0, #0
 80020c6:	f001 f8f1 	bl	80032ac <Gui_StrCenter>
}
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <LCD_ShowOption>:
				size:the size of display character
				mode:0-no overlying,1-overlying
 * @retvalue   :(u16) Cursor of the next option
******************************************************************************/
u16 LCD_ShowOption(u16 sizeBox,u16 y,u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{
 80020d2:	b590      	push	{r4, r7, lr}
 80020d4:	b089      	sub	sp, #36	; 0x24
 80020d6:	af04      	add	r7, sp, #16
 80020d8:	4604      	mov	r4, r0
 80020da:	4608      	mov	r0, r1
 80020dc:	4611      	mov	r1, r2
 80020de:	461a      	mov	r2, r3
 80020e0:	4623      	mov	r3, r4
 80020e2:	80fb      	strh	r3, [r7, #6]
 80020e4:	4603      	mov	r3, r0
 80020e6:	80bb      	strh	r3, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	807b      	strh	r3, [r7, #2]
 80020ec:	4613      	mov	r3, r2
 80020ee:	803b      	strh	r3, [r7, #0]
	u16 wCursor;
	LCD_ClearCursor(10, y, 310, sizeBox+y, bc);
 80020f0:	88fa      	ldrh	r2, [r7, #6]
 80020f2:	88bb      	ldrh	r3, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	88b9      	ldrh	r1, [r7, #4]
 80020fa:	883b      	ldrh	r3, [r7, #0]
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	4613      	mov	r3, r2
 8002100:	f44f 729b 	mov.w	r2, #310	; 0x136
 8002104:	200a      	movs	r0, #10
 8002106:	f001 f9f7 	bl	80034f8 <LCD_ClearCursor>
	LCD_Fill(10, y, 310, y+sizeBox, bc);
 800210a:	88ba      	ldrh	r2, [r7, #4]
 800210c:	88fb      	ldrh	r3, [r7, #6]
 800210e:	4413      	add	r3, r2
 8002110:	b29a      	uxth	r2, r3
 8002112:	88b9      	ldrh	r1, [r7, #4]
 8002114:	883b      	ldrh	r3, [r7, #0]
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	4613      	mov	r3, r2
 800211a:	f44f 729b 	mov.w	r2, #310	; 0x136
 800211e:	200a      	movs	r0, #10
 8002120:	f7ff fc70 	bl	8001a04 <LCD_Fill>
	Gui_StrCenter(0, y, fc, bc, str, size, mode);
 8002124:	8838      	ldrh	r0, [r7, #0]
 8002126:	887a      	ldrh	r2, [r7, #2]
 8002128:	88b9      	ldrh	r1, [r7, #4]
 800212a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800212e:	9302      	str	r3, [sp, #8]
 8002130:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	4603      	mov	r3, r0
 800213c:	2000      	movs	r0, #0
 800213e:	f001 f8b5 	bl	80032ac <Gui_StrCenter>
	wCursor = sizeBox+y+10;
 8002142:	88fa      	ldrh	r2, [r7, #6]
 8002144:	88bb      	ldrh	r3, [r7, #4]
 8002146:	4413      	add	r3, r2
 8002148:	b29b      	uxth	r3, r3
 800214a:	330a      	adds	r3, #10
 800214c:	81fb      	strh	r3, [r7, #14]
	return wCursor;
 800214e:	89fb      	ldrh	r3, [r7, #14]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	bd90      	pop	{r4, r7, pc}

08002158 <LCD_ShowChar>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void LCD_ShowChar(u16 x,u16 y,u16 fc, u16 bc, u8 num,u8 size,u8 mode)
{  
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	4604      	mov	r4, r0
 8002160:	4608      	mov	r0, r1
 8002162:	4611      	mov	r1, r2
 8002164:	461a      	mov	r2, r3
 8002166:	4623      	mov	r3, r4
 8002168:	80fb      	strh	r3, [r7, #6]
 800216a:	4603      	mov	r3, r0
 800216c:	80bb      	strh	r3, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	807b      	strh	r3, [r7, #2]
 8002172:	4613      	mov	r3, r2
 8002174:	803b      	strh	r3, [r7, #0]
    u8 temp;
    u8 pos,t;
	u16 colortemp=POINT_COLOR;      
 8002176:	4b62      	ldr	r3, [pc, #392]	; (8002300 <LCD_ShowChar+0x1a8>)
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	817b      	strh	r3, [r7, #10]
		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 800217c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002180:	3b20      	subs	r3, #32
 8002182:	f887 3020 	strb.w	r3, [r7, #32]
	LCD_SetWindows(x,y,x+size/2-1,y+size-1);//���õ���������ʾ����
 8002186:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800218a:	085b      	lsrs	r3, r3, #1
 800218c:	b2db      	uxtb	r3, r3
 800218e:	b29a      	uxth	r2, r3
 8002190:	88fb      	ldrh	r3, [r7, #6]
 8002192:	4413      	add	r3, r2
 8002194:	b29b      	uxth	r3, r3
 8002196:	3b01      	subs	r3, #1
 8002198:	b29c      	uxth	r4, r3
 800219a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800219e:	b29a      	uxth	r2, r3
 80021a0:	88bb      	ldrh	r3, [r7, #4]
 80021a2:	4413      	add	r3, r2
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	88b9      	ldrh	r1, [r7, #4]
 80021ac:	88f8      	ldrh	r0, [r7, #6]
 80021ae:	4622      	mov	r2, r4
 80021b0:	f001 fb54 	bl	800385c <LCD_SetWindows>
	if(!mode) //�ǵ��ӷ�ʽ
 80021b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d143      	bne.n	8002244 <LCD_ShowChar+0xec>
	{		
		for(pos=0;pos<size;pos++)
 80021bc:	2300      	movs	r3, #0
 80021be:	73bb      	strb	r3, [r7, #14]
 80021c0:	e03a      	b.n	8002238 <LCD_ShowChar+0xe0>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 80021c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021c6:	2b0c      	cmp	r3, #12
 80021c8:	d10c      	bne.n	80021e4 <LCD_ShowChar+0x8c>
 80021ca:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021ce:	7bb9      	ldrb	r1, [r7, #14]
 80021d0:	484c      	ldr	r0, [pc, #304]	; (8002304 <LCD_ShowChar+0x1ac>)
 80021d2:	4613      	mov	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4403      	add	r3, r0
 80021dc:	440b      	add	r3, r1
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	73fb      	strb	r3, [r7, #15]
 80021e2:	e008      	b.n	80021f6 <LCD_ShowChar+0x9e>
			else temp=asc2_1608[num][pos];		 //����1608����
 80021e4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021e8:	7bbb      	ldrb	r3, [r7, #14]
 80021ea:	4947      	ldr	r1, [pc, #284]	; (8002308 <LCD_ShowChar+0x1b0>)
 80021ec:	0112      	lsls	r2, r2, #4
 80021ee:	440a      	add	r2, r1
 80021f0:	4413      	add	r3, r2
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	737b      	strb	r3, [r7, #13]
 80021fa:	e013      	b.n	8002224 <LCD_ShowChar+0xcc>
		    {                 
		        if(temp&0x01)Lcd_WriteData_16Bit(fc); 
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d004      	beq.n	8002210 <LCD_ShowChar+0xb8>
 8002206:	887b      	ldrh	r3, [r7, #2]
 8002208:	4618      	mov	r0, r3
 800220a:	f001 f8e5 	bl	80033d8 <Lcd_WriteData_16Bit>
 800220e:	e003      	b.n	8002218 <LCD_ShowChar+0xc0>
				else Lcd_WriteData_16Bit(bc); 
 8002210:	883b      	ldrh	r3, [r7, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f001 f8e0 	bl	80033d8 <Lcd_WriteData_16Bit>
				temp>>=1; 
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	085b      	lsrs	r3, r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 800221e:	7b7b      	ldrb	r3, [r7, #13]
 8002220:	3301      	adds	r3, #1
 8002222:	737b      	strb	r3, [r7, #13]
 8002224:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002228:	085b      	lsrs	r3, r3, #1
 800222a:	b2db      	uxtb	r3, r3
 800222c:	7b7a      	ldrb	r2, [r7, #13]
 800222e:	429a      	cmp	r2, r3
 8002230:	d3e4      	bcc.n	80021fc <LCD_ShowChar+0xa4>
		for(pos=0;pos<size;pos++)
 8002232:	7bbb      	ldrb	r3, [r7, #14]
 8002234:	3301      	adds	r3, #1
 8002236:	73bb      	strb	r3, [r7, #14]
 8002238:	7bba      	ldrb	r2, [r7, #14]
 800223a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800223e:	429a      	cmp	r2, r3
 8002240:	d3bf      	bcc.n	80021c2 <LCD_ShowChar+0x6a>
 8002242:	e049      	b.n	80022d8 <LCD_ShowChar+0x180>
		    }
			
		}	
	}else//���ӷ�ʽ
	{
		for(pos=0;pos<size;pos++)
 8002244:	2300      	movs	r3, #0
 8002246:	73bb      	strb	r3, [r7, #14]
 8002248:	e041      	b.n	80022ce <LCD_ShowChar+0x176>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 800224a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d10c      	bne.n	800226c <LCD_ShowChar+0x114>
 8002252:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002256:	7bb9      	ldrb	r1, [r7, #14]
 8002258:	482a      	ldr	r0, [pc, #168]	; (8002304 <LCD_ShowChar+0x1ac>)
 800225a:	4613      	mov	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4403      	add	r3, r0
 8002264:	440b      	add	r3, r1
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	73fb      	strb	r3, [r7, #15]
 800226a:	e008      	b.n	800227e <LCD_ShowChar+0x126>
			else temp=asc2_1608[num][pos];		 //����1608����
 800226c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002270:	7bbb      	ldrb	r3, [r7, #14]
 8002272:	4925      	ldr	r1, [pc, #148]	; (8002308 <LCD_ShowChar+0x1b0>)
 8002274:	0112      	lsls	r2, r2, #4
 8002276:	440a      	add	r2, r1
 8002278:	4413      	add	r3, r2
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 800227e:	2300      	movs	r3, #0
 8002280:	737b      	strb	r3, [r7, #13]
 8002282:	e01a      	b.n	80022ba <LCD_ShowChar+0x162>
		    {   
				POINT_COLOR=fc;              
 8002284:	4a1e      	ldr	r2, [pc, #120]	; (8002300 <LCD_ShowChar+0x1a8>)
 8002286:	887b      	ldrh	r3, [r7, #2]
 8002288:	8013      	strh	r3, [r2, #0]
		        if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//��һ����    
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00c      	beq.n	80022ae <LCD_ShowChar+0x156>
 8002294:	7b7b      	ldrb	r3, [r7, #13]
 8002296:	b29a      	uxth	r2, r3
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	4413      	add	r3, r2
 800229c:	b298      	uxth	r0, r3
 800229e:	7bbb      	ldrb	r3, [r7, #14]
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	88bb      	ldrh	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	4619      	mov	r1, r3
 80022aa:	f001 f8cb 	bl	8003444 <LCD_DrawPoint>
		        temp>>=1; 
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	085b      	lsrs	r3, r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 80022b4:	7b7b      	ldrb	r3, [r7, #13]
 80022b6:	3301      	adds	r3, #1
 80022b8:	737b      	strb	r3, [r7, #13]
 80022ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80022be:	085b      	lsrs	r3, r3, #1
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	7b7a      	ldrb	r2, [r7, #13]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d3dd      	bcc.n	8002284 <LCD_ShowChar+0x12c>
		for(pos=0;pos<size;pos++)
 80022c8:	7bbb      	ldrb	r3, [r7, #14]
 80022ca:	3301      	adds	r3, #1
 80022cc:	73bb      	strb	r3, [r7, #14]
 80022ce:	7bba      	ldrb	r2, [r7, #14]
 80022d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d3b8      	bcc.n	800224a <LCD_ShowChar+0xf2>
		    }
		}
	}
	POINT_COLOR=colortemp;	
 80022d8:	4a09      	ldr	r2, [pc, #36]	; (8002300 <LCD_ShowChar+0x1a8>)
 80022da:	897b      	ldrh	r3, [r7, #10]
 80022dc:	8013      	strh	r3, [r2, #0]
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��    	   	 	  
 80022de:	4b0b      	ldr	r3, [pc, #44]	; (800230c <LCD_ShowChar+0x1b4>)
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <LCD_ShowChar+0x1b4>)
 80022e8:	885b      	ldrh	r3, [r3, #2]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	2100      	movs	r1, #0
 80022f0:	2000      	movs	r0, #0
 80022f2:	f001 fab3 	bl	800385c <LCD_SetWindows>
}
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd90      	pop	{r4, r7, pc}
 80022fe:	bf00      	nop
 8002300:	2000011e 	.word	0x2000011e
 8002304:	0800684c 	.word	0x0800684c
 8002308:	08006cc0 	.word	0x08006cc0
 800230c:	20000110 	.word	0x20000110

08002310 <LCD_ShowString>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/   	  
void LCD_ShowString(u16 x,u16 y,u8 size,u8 *p,u8 mode)
{         
 8002310:	b5b0      	push	{r4, r5, r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af04      	add	r7, sp, #16
 8002316:	607b      	str	r3, [r7, #4]
 8002318:	4603      	mov	r3, r0
 800231a:	81fb      	strh	r3, [r7, #14]
 800231c:	460b      	mov	r3, r1
 800231e:	81bb      	strh	r3, [r7, #12]
 8002320:	4613      	mov	r3, r2
 8002322:	72fb      	strb	r3, [r7, #11]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8002324:	e025      	b.n	8002372 <LCD_ShowString+0x62>
    {   
		if(x>(lcddev.width-1)||y>(lcddev.height-1)) 
 8002326:	4b19      	ldr	r3, [pc, #100]	; (800238c <LCD_ShowString+0x7c>)
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	89fa      	ldrh	r2, [r7, #14]
 800232c:	429a      	cmp	r2, r3
 800232e:	d229      	bcs.n	8002384 <LCD_ShowString+0x74>
 8002330:	4b16      	ldr	r3, [pc, #88]	; (800238c <LCD_ShowString+0x7c>)
 8002332:	885b      	ldrh	r3, [r3, #2]
 8002334:	89ba      	ldrh	r2, [r7, #12]
 8002336:	429a      	cmp	r2, r3
 8002338:	d224      	bcs.n	8002384 <LCD_ShowString+0x74>
		return;     
        LCD_ShowChar(x,y,POINT_COLOR,BACK_COLOR,*p,size,mode);
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <LCD_ShowString+0x80>)
 800233c:	881c      	ldrh	r4, [r3, #0]
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <LCD_ShowString+0x84>)
 8002340:	881d      	ldrh	r5, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	89b9      	ldrh	r1, [r7, #12]
 8002348:	89f8      	ldrh	r0, [r7, #14]
 800234a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800234e:	9202      	str	r2, [sp, #8]
 8002350:	7afa      	ldrb	r2, [r7, #11]
 8002352:	9201      	str	r2, [sp, #4]
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	462b      	mov	r3, r5
 8002358:	4622      	mov	r2, r4
 800235a:	f7ff fefd 	bl	8002158 <LCD_ShowChar>
        x+=size/2;
 800235e:	7afb      	ldrb	r3, [r7, #11]
 8002360:	085b      	lsrs	r3, r3, #1
 8002362:	b2db      	uxtb	r3, r3
 8002364:	b29a      	uxth	r2, r3
 8002366:	89fb      	ldrh	r3, [r7, #14]
 8002368:	4413      	add	r3, r2
 800236a:	81fb      	strh	r3, [r7, #14]
        p++;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3301      	adds	r3, #1
 8002370:	607b      	str	r3, [r7, #4]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b7e      	cmp	r3, #126	; 0x7e
 8002378:	d805      	bhi.n	8002386 <LCD_ShowString+0x76>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b1f      	cmp	r3, #31
 8002380:	d8d1      	bhi.n	8002326 <LCD_ShowString+0x16>
 8002382:	e000      	b.n	8002386 <LCD_ShowString+0x76>
		return;     
 8002384:	bf00      	nop
    }  
} 
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bdb0      	pop	{r4, r5, r7, pc}
 800238c:	20000110 	.word	0x20000110
 8002390:	2000011e 	.word	0x2000011e
 8002394:	20000028 	.word	0x20000028

08002398 <LCD_ShowNumAndStr>:
 * @parameters :m:the multiplier
                n:the power
 * @retvalue   :the nth power of m
******************************************************************************/ 
void LCD_ShowNumAndStr(u16 x,u16 y,u8 size,char *pStr1,u8 lengthStr,u32 num,u8 lengthNum,u8 mode)
{
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b08f      	sub	sp, #60	; 0x3c
 800239c:	af02      	add	r7, sp, #8
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	4603      	mov	r3, r0
 80023a2:	81fb      	strh	r3, [r7, #14]
 80023a4:	460b      	mov	r3, r1
 80023a6:	81bb      	strh	r3, [r7, #12]
 80023a8:	4613      	mov	r3, r2
 80023aa:	72fb      	strb	r3, [r7, #11]
	char StrNum[8],StrNumFinal[8];
	memset(StrNum,0,sizeof(StrNum));
 80023ac:	f107 031c 	add.w	r3, r7, #28
 80023b0:	2208      	movs	r2, #8
 80023b2:	2100      	movs	r1, #0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f004 f9b9 	bl	800672c <memset>
	memset(StrNumFinal,0,sizeof(StrNumFinal));
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	2208      	movs	r2, #8
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f004 f9b2 	bl	800672c <memset>
	u32 numTemp,temp;
	u8 i = 0,length;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	LCD_ShowString(x,y,size,(u8*)pStr1,mode);
 80023ce:	7afa      	ldrb	r2, [r7, #11]
 80023d0:	89b9      	ldrh	r1, [r7, #12]
 80023d2:	89f8      	ldrh	r0, [r7, #14]
 80023d4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f7ff ff98 	bl	8002310 <LCD_ShowString>
	numTemp = num;
 80023e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	LCD_DrawLine(x, y+ size, 320-x , y+ size);
 80023e4:	7afb      	ldrb	r3, [r7, #11]
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	89bb      	ldrh	r3, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	b299      	uxth	r1, r3
 80023ee:	89fb      	ldrh	r3, [r7, #14]
 80023f0:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80023f4:	b29c      	uxth	r4, r3
 80023f6:	7afb      	ldrb	r3, [r7, #11]
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	89bb      	ldrh	r3, [r7, #12]
 80023fc:	4413      	add	r3, r2
 80023fe:	b29b      	uxth	r3, r3
 8002400:	89f8      	ldrh	r0, [r7, #14]
 8002402:	4622      	mov	r2, r4
 8002404:	f7ff fb4a 	bl	8001a9c <LCD_DrawLine>
	LCD_DrawLine(x + lengthStr-2, y - 4, x+ lengthStr-2, y + size );
 8002408:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800240c:	b29a      	uxth	r2, r3
 800240e:	89fb      	ldrh	r3, [r7, #14]
 8002410:	4413      	add	r3, r2
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b02      	subs	r3, #2
 8002416:	b298      	uxth	r0, r3
 8002418:	89bb      	ldrh	r3, [r7, #12]
 800241a:	3b04      	subs	r3, #4
 800241c:	b299      	uxth	r1, r3
 800241e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002422:	b29a      	uxth	r2, r3
 8002424:	89fb      	ldrh	r3, [r7, #14]
 8002426:	4413      	add	r3, r2
 8002428:	b29b      	uxth	r3, r3
 800242a:	3b02      	subs	r3, #2
 800242c:	b29c      	uxth	r4, r3
 800242e:	7afb      	ldrb	r3, [r7, #11]
 8002430:	b29a      	uxth	r2, r3
 8002432:	89bb      	ldrh	r3, [r7, #12]
 8002434:	4413      	add	r3, r2
 8002436:	b29b      	uxth	r3, r3
 8002438:	4622      	mov	r2, r4
 800243a:	f7ff fb2f 	bl	8001a9c <LCD_DrawLine>
	if(numTemp == 0)
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	2b00      	cmp	r3, #0
 8002442:	d12c      	bne.n	800249e <LCD_ShowNumAndStr+0x106>
	{
		StrNumFinal[0] += 48;
 8002444:	7d3b      	ldrb	r3, [r7, #20]
 8002446:	3330      	adds	r3, #48	; 0x30
 8002448:	b2db      	uxtb	r3, r3
 800244a:	753b      	strb	r3, [r7, #20]
 800244c:	e04f      	b.n	80024ee <LCD_ShowNumAndStr+0x156>
	}else{
		while(numTemp !=0)
		{
			temp = numTemp %10;
 800244e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002450:	4b31      	ldr	r3, [pc, #196]	; (8002518 <LCD_ShowNumAndStr+0x180>)
 8002452:	fba3 1302 	umull	r1, r3, r3, r2
 8002456:	08d9      	lsrs	r1, r3, #3
 8002458:	460b      	mov	r3, r1
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
			if(temp<10)
 8002464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002466:	2b09      	cmp	r3, #9
 8002468:	d803      	bhi.n	8002472 <LCD_ShowNumAndStr+0xda>
			{
				temp +=48;
 800246a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246c:	3330      	adds	r3, #48	; 0x30
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002470:	e002      	b.n	8002478 <LCD_ShowNumAndStr+0xe0>
			}else
			{
				temp +=55;
 8002472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002474:	3337      	adds	r3, #55	; 0x37
 8002476:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			StrNum[i] = temp;
 8002478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800247c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	3330      	adds	r3, #48	; 0x30
 8002482:	443b      	add	r3, r7
 8002484:	f803 2c14 	strb.w	r2, [r3, #-20]
			i++;
 8002488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800248c:	3301      	adds	r3, #1
 800248e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			numTemp /=10;
 8002492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002494:	4a20      	ldr	r2, [pc, #128]	; (8002518 <LCD_ShowNumAndStr+0x180>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	08db      	lsrs	r3, r3, #3
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
		while(numTemp !=0)
 800249e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1d4      	bne.n	800244e <LCD_ShowNumAndStr+0xb6>
		}
		length = i-1;
 80024a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024a8:	3b01      	subs	r3, #1
 80024aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		for(u8 k = 0; k <= length; k++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80024b4:	e015      	b.n	80024e2 <LCD_ShowNumAndStr+0x14a>
		{
			i--;
 80024b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024ba:	3b01      	subs	r3, #1
 80024bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			StrNumFinal[k] = StrNum[i];
 80024c0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80024c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80024c8:	3230      	adds	r2, #48	; 0x30
 80024ca:	443a      	add	r2, r7
 80024cc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80024d0:	3330      	adds	r3, #48	; 0x30
 80024d2:	443b      	add	r3, r7
 80024d4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(u8 k = 0; k <= length; k++)
 80024d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80024dc:	3301      	adds	r3, #1
 80024de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80024e2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80024e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d9e3      	bls.n	80024b6 <LCD_ShowNumAndStr+0x11e>
		}
	}

	LCD_ShowString(x+lengthStr,y,size,(u8*)StrNumFinal,mode);
 80024ee:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	89fb      	ldrh	r3, [r7, #14]
 80024f6:	4413      	add	r3, r2
 80024f8:	b298      	uxth	r0, r3
 80024fa:	f107 0414 	add.w	r4, r7, #20
 80024fe:	7afa      	ldrb	r2, [r7, #11]
 8002500:	89b9      	ldrh	r1, [r7, #12]
 8002502:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	4623      	mov	r3, r4
 800250a:	f7ff ff01 	bl	8002310 <LCD_ShowString>


}
 800250e:	bf00      	nop
 8002510:	3734      	adds	r7, #52	; 0x34
 8002512:	46bd      	mov	sp, r7
 8002514:	bd90      	pop	{r4, r7, pc}
 8002516:	bf00      	nop
 8002518:	cccccccd 	.word	0xcccccccd

0800251c <LCD_ShowStrAndStr>:
 * @parameters :m:the multiplier
                n:the power
 * @retvalue   :the nth power of m
******************************************************************************/
void LCD_ShowStrAndStr(u16 x,u16 y,u8 size,char *pStr1,u8 length1,char *pStr2,u8 length2,u8 mode)
{
 800251c:	b590      	push	{r4, r7, lr}
 800251e:	b087      	sub	sp, #28
 8002520:	af02      	add	r7, sp, #8
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	4603      	mov	r3, r0
 8002526:	81fb      	strh	r3, [r7, #14]
 8002528:	460b      	mov	r3, r1
 800252a:	81bb      	strh	r3, [r7, #12]
 800252c:	4613      	mov	r3, r2
 800252e:	72fb      	strb	r3, [r7, #11]
	LCD_ShowString(x,y,size,(u8*)pStr1,mode);
 8002530:	7afa      	ldrb	r2, [r7, #11]
 8002532:	89b9      	ldrh	r1, [r7, #12]
 8002534:	89f8      	ldrh	r0, [r7, #14]
 8002536:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f7ff fee7 	bl	8002310 <LCD_ShowString>
	LCD_ShowString(x+length1,y,size,(u8*)pStr2,mode);
 8002542:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002546:	b29a      	uxth	r2, r3
 8002548:	89fb      	ldrh	r3, [r7, #14]
 800254a:	4413      	add	r3, r2
 800254c:	b298      	uxth	r0, r3
 800254e:	7afa      	ldrb	r2, [r7, #11]
 8002550:	89b9      	ldrh	r1, [r7, #12]
 8002552:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	f7ff fed9 	bl	8002310 <LCD_ShowString>

	LCD_DrawLine(x, y+ size, 320-x , y+ size);
 800255e:	7afb      	ldrb	r3, [r7, #11]
 8002560:	b29a      	uxth	r2, r3
 8002562:	89bb      	ldrh	r3, [r7, #12]
 8002564:	4413      	add	r3, r2
 8002566:	b299      	uxth	r1, r3
 8002568:	89fb      	ldrh	r3, [r7, #14]
 800256a:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800256e:	b29c      	uxth	r4, r3
 8002570:	7afb      	ldrb	r3, [r7, #11]
 8002572:	b29a      	uxth	r2, r3
 8002574:	89bb      	ldrh	r3, [r7, #12]
 8002576:	4413      	add	r3, r2
 8002578:	b29b      	uxth	r3, r3
 800257a:	89f8      	ldrh	r0, [r7, #14]
 800257c:	4622      	mov	r2, r4
 800257e:	f7ff fa8d 	bl	8001a9c <LCD_DrawLine>
	LCD_DrawLine(x + length1-2, y - 4, x+ length1-2, y + size );
 8002582:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002586:	b29a      	uxth	r2, r3
 8002588:	89fb      	ldrh	r3, [r7, #14]
 800258a:	4413      	add	r3, r2
 800258c:	b29b      	uxth	r3, r3
 800258e:	3b02      	subs	r3, #2
 8002590:	b298      	uxth	r0, r3
 8002592:	89bb      	ldrh	r3, [r7, #12]
 8002594:	3b04      	subs	r3, #4
 8002596:	b299      	uxth	r1, r3
 8002598:	f897 3020 	ldrb.w	r3, [r7, #32]
 800259c:	b29a      	uxth	r2, r3
 800259e:	89fb      	ldrh	r3, [r7, #14]
 80025a0:	4413      	add	r3, r2
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3b02      	subs	r3, #2
 80025a6:	b29c      	uxth	r4, r3
 80025a8:	7afb      	ldrb	r3, [r7, #11]
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	89bb      	ldrh	r3, [r7, #12]
 80025ae:	4413      	add	r3, r2
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	4622      	mov	r2, r4
 80025b4:	f7ff fa72 	bl	8001a9c <LCD_DrawLine>
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd90      	pop	{r4, r7, pc}

080025c0 <LCD_ShowButton>:
 * @parameters :m:the multiplier
                n:the power
 * @retvalue   :the nth power of m
******************************************************************************/
void LCD_ShowButton(u16 x,u16 y,u16 width,u16 height,u8 *pStr,u8 state)
{
 80025c0:	b5b0      	push	{r4, r5, r7, lr}
 80025c2:	b08a      	sub	sp, #40	; 0x28
 80025c4:	af06      	add	r7, sp, #24
 80025c6:	4604      	mov	r4, r0
 80025c8:	4608      	mov	r0, r1
 80025ca:	4611      	mov	r1, r2
 80025cc:	461a      	mov	r2, r3
 80025ce:	4623      	mov	r3, r4
 80025d0:	80fb      	strh	r3, [r7, #6]
 80025d2:	4603      	mov	r3, r0
 80025d4:	80bb      	strh	r3, [r7, #4]
 80025d6:	460b      	mov	r3, r1
 80025d8:	807b      	strh	r3, [r7, #2]
 80025da:	4613      	mov	r3, r2
 80025dc:	803b      	strh	r3, [r7, #0]
	u16 size = 16;
 80025de:	2310      	movs	r3, #16
 80025e0:	81fb      	strh	r3, [r7, #14]
	LCD_ClearCursor(x, y, x+width, y + height, WHITE);
 80025e2:	88fa      	ldrh	r2, [r7, #6]
 80025e4:	887b      	ldrh	r3, [r7, #2]
 80025e6:	4413      	add	r3, r2
 80025e8:	b29c      	uxth	r4, r3
 80025ea:	88ba      	ldrh	r2, [r7, #4]
 80025ec:	883b      	ldrh	r3, [r7, #0]
 80025ee:	4413      	add	r3, r2
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	88b9      	ldrh	r1, [r7, #4]
 80025f4:	88f8      	ldrh	r0, [r7, #6]
 80025f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025fa:	9200      	str	r2, [sp, #0]
 80025fc:	4622      	mov	r2, r4
 80025fe:	f000 ff7b 	bl	80034f8 <LCD_ClearCursor>
	if(state == 1)
 8002602:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002606:	2b01      	cmp	r3, #1
 8002608:	d123      	bne.n	8002652 <LCD_ShowButton+0x92>
	{
		LCD_Fill(x , y, x+width, y + height, GREEN);
 800260a:	88fa      	ldrh	r2, [r7, #6]
 800260c:	887b      	ldrh	r3, [r7, #2]
 800260e:	4413      	add	r3, r2
 8002610:	b29c      	uxth	r4, r3
 8002612:	88ba      	ldrh	r2, [r7, #4]
 8002614:	883b      	ldrh	r3, [r7, #0]
 8002616:	4413      	add	r3, r2
 8002618:	b29b      	uxth	r3, r3
 800261a:	88b9      	ldrh	r1, [r7, #4]
 800261c:	88f8      	ldrh	r0, [r7, #6]
 800261e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002622:	9200      	str	r2, [sp, #0]
 8002624:	4622      	mov	r2, r4
 8002626:	f7ff f9ed 	bl	8001a04 <LCD_Fill>
		Gui_StrCenterV2(x, y,width, height, BLACK, WHITE, (u8*)pStr, size, 1);
 800262a:	89fb      	ldrh	r3, [r7, #14]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	883c      	ldrh	r4, [r7, #0]
 8002630:	887a      	ldrh	r2, [r7, #2]
 8002632:	88b9      	ldrh	r1, [r7, #4]
 8002634:	88f8      	ldrh	r0, [r7, #6]
 8002636:	2501      	movs	r5, #1
 8002638:	9504      	str	r5, [sp, #16]
 800263a:	9303      	str	r3, [sp, #12]
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	9302      	str	r3, [sp, #8]
 8002640:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	2300      	movs	r3, #0
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	4623      	mov	r3, r4
 800264c:	f000 fdf6 	bl	800323c <Gui_StrCenterV2>
	}else
	{
		LCD_Fill(x, y, x+width, y + height, RED);
		Gui_StrCenterV2(x, y,width, height, BLACK, WHITE, (u8*)pStr, size, 1);
	}
}
 8002650:	e022      	b.n	8002698 <LCD_ShowButton+0xd8>
		LCD_Fill(x, y, x+width, y + height, RED);
 8002652:	88fa      	ldrh	r2, [r7, #6]
 8002654:	887b      	ldrh	r3, [r7, #2]
 8002656:	4413      	add	r3, r2
 8002658:	b29c      	uxth	r4, r3
 800265a:	88ba      	ldrh	r2, [r7, #4]
 800265c:	883b      	ldrh	r3, [r7, #0]
 800265e:	4413      	add	r3, r2
 8002660:	b29b      	uxth	r3, r3
 8002662:	88b9      	ldrh	r1, [r7, #4]
 8002664:	88f8      	ldrh	r0, [r7, #6]
 8002666:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800266a:	9200      	str	r2, [sp, #0]
 800266c:	4622      	mov	r2, r4
 800266e:	f7ff f9c9 	bl	8001a04 <LCD_Fill>
		Gui_StrCenterV2(x, y,width, height, BLACK, WHITE, (u8*)pStr, size, 1);
 8002672:	89fb      	ldrh	r3, [r7, #14]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	883c      	ldrh	r4, [r7, #0]
 8002678:	887a      	ldrh	r2, [r7, #2]
 800267a:	88b9      	ldrh	r1, [r7, #4]
 800267c:	88f8      	ldrh	r0, [r7, #6]
 800267e:	2501      	movs	r5, #1
 8002680:	9504      	str	r5, [sp, #16]
 8002682:	9303      	str	r3, [sp, #12]
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	2300      	movs	r3, #0
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	4623      	mov	r3, r4
 8002694:	f000 fdd2 	bl	800323c <Gui_StrCenterV2>
}
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bdb0      	pop	{r4, r5, r7, pc}

080026a0 <LCD_ShowDevice>:
 * @parameters :m:the multiplier
                n:the power
 * @retvalue   :the nth power of m
******************************************************************************/
u16 LCD_ShowDevice(u16 x,u16 y,u16 r,u8 *pStr,u8 state)
{
 80026a0:	b590      	push	{r4, r7, lr}
 80026a2:	b08b      	sub	sp, #44	; 0x2c
 80026a4:	af04      	add	r7, sp, #16
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	4603      	mov	r3, r0
 80026aa:	81fb      	strh	r3, [r7, #14]
 80026ac:	460b      	mov	r3, r1
 80026ae:	81bb      	strh	r3, [r7, #12]
 80026b0:	4613      	mov	r3, r2
 80026b2:	817b      	strh	r3, [r7, #10]
	//gui_circle(lcddev.width/2-80+(i*25),lcddev.height/2-50+(i*25),ColorTab[i],30,0);
	u16 size = 16;
 80026b4:	2310      	movs	r3, #16
 80026b6:	82fb      	strh	r3, [r7, #22]
	u16 len = strlen((const char*)pStr);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7fd fd8b 	bl	80001d4 <strlen>
 80026be:	4603      	mov	r3, r0
 80026c0:	82bb      	strh	r3, [r7, #20]
	u16 str_width = len*(size/2);
 80026c2:	8afb      	ldrh	r3, [r7, #22]
 80026c4:	085b      	lsrs	r3, r3, #1
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	8aba      	ldrh	r2, [r7, #20]
 80026ca:	fb12 f303 	smulbb	r3, r2, r3
 80026ce:	827b      	strh	r3, [r7, #18]
	LCD_ClearCursor(x+str_width, y, x+2*r+str_width, y + 2*r, WHITE);
 80026d0:	89fa      	ldrh	r2, [r7, #14]
 80026d2:	8a7b      	ldrh	r3, [r7, #18]
 80026d4:	4413      	add	r3, r2
 80026d6:	b298      	uxth	r0, r3
 80026d8:	897b      	ldrh	r3, [r7, #10]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	89fb      	ldrh	r3, [r7, #14]
 80026e0:	4413      	add	r3, r2
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	8a7b      	ldrh	r3, [r7, #18]
 80026e6:	4413      	add	r3, r2
 80026e8:	b29c      	uxth	r4, r3
 80026ea:	897b      	ldrh	r3, [r7, #10]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	89bb      	ldrh	r3, [r7, #12]
 80026f2:	4413      	add	r3, r2
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	89b9      	ldrh	r1, [r7, #12]
 80026f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026fc:	9200      	str	r2, [sp, #0]
 80026fe:	4622      	mov	r2, r4
 8002700:	f000 fefa 	bl	80034f8 <LCD_ClearCursor>
	if(state == 1)
 8002704:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002708:	2b01      	cmp	r3, #1
 800270a:	d12c      	bne.n	8002766 <LCD_ShowDevice+0xc6>
	{
		Show_Str(x, y, BLACK, WHITE, pStr, size, 1);
 800270c:	8afb      	ldrh	r3, [r7, #22]
 800270e:	b2db      	uxtb	r3, r3
 8002710:	89b9      	ldrh	r1, [r7, #12]
 8002712:	89f8      	ldrh	r0, [r7, #14]
 8002714:	2201      	movs	r2, #1
 8002716:	9202      	str	r2, [sp, #8]
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002722:	2200      	movs	r2, #0
 8002724:	f000 fcb8 	bl	8003098 <Show_Str>
		gui_circle(150+r, y+size/2, BLACK, r+2, 1);
 8002728:	897b      	ldrh	r3, [r7, #10]
 800272a:	f103 0096 	add.w	r0, r3, #150	; 0x96
 800272e:	89bb      	ldrh	r3, [r7, #12]
 8002730:	8afa      	ldrh	r2, [r7, #22]
 8002732:	0852      	lsrs	r2, r2, #1
 8002734:	b292      	uxth	r2, r2
 8002736:	1899      	adds	r1, r3, r2
 8002738:	897b      	ldrh	r3, [r7, #10]
 800273a:	3302      	adds	r3, #2
 800273c:	2201      	movs	r2, #1
 800273e:	9200      	str	r2, [sp, #0]
 8002740:	2200      	movs	r2, #0
 8002742:	f7ff fae8 	bl	8001d16 <gui_circle>
		gui_circle(150+r, y+size/2, GREEN, r, 1);
 8002746:	897b      	ldrh	r3, [r7, #10]
 8002748:	f103 0096 	add.w	r0, r3, #150	; 0x96
 800274c:	89bb      	ldrh	r3, [r7, #12]
 800274e:	8afa      	ldrh	r2, [r7, #22]
 8002750:	0852      	lsrs	r2, r2, #1
 8002752:	b292      	uxth	r2, r2
 8002754:	1899      	adds	r1, r3, r2
 8002756:	897b      	ldrh	r3, [r7, #10]
 8002758:	2201      	movs	r2, #1
 800275a:	9200      	str	r2, [sp, #0]
 800275c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002760:	f7ff fad9 	bl	8001d16 <gui_circle>
 8002764:	e02b      	b.n	80027be <LCD_ShowDevice+0x11e>
	}else
	{
		Show_Str(x, y, BLACK, WHITE, pStr, size, 1);
 8002766:	8afb      	ldrh	r3, [r7, #22]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	89b9      	ldrh	r1, [r7, #12]
 800276c:	89f8      	ldrh	r0, [r7, #14]
 800276e:	2201      	movs	r2, #1
 8002770:	9202      	str	r2, [sp, #8]
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800277c:	2200      	movs	r2, #0
 800277e:	f000 fc8b 	bl	8003098 <Show_Str>
		gui_circle(150+r, y+size/2, BLACK, r+2, 1);
 8002782:	897b      	ldrh	r3, [r7, #10]
 8002784:	f103 0096 	add.w	r0, r3, #150	; 0x96
 8002788:	89bb      	ldrh	r3, [r7, #12]
 800278a:	8afa      	ldrh	r2, [r7, #22]
 800278c:	0852      	lsrs	r2, r2, #1
 800278e:	b292      	uxth	r2, r2
 8002790:	1899      	adds	r1, r3, r2
 8002792:	897b      	ldrh	r3, [r7, #10]
 8002794:	3302      	adds	r3, #2
 8002796:	2201      	movs	r2, #1
 8002798:	9200      	str	r2, [sp, #0]
 800279a:	2200      	movs	r2, #0
 800279c:	f7ff fabb 	bl	8001d16 <gui_circle>
		gui_circle(150+r, y+size/2, RED, r, 1);
 80027a0:	897b      	ldrh	r3, [r7, #10]
 80027a2:	f103 0096 	add.w	r0, r3, #150	; 0x96
 80027a6:	89bb      	ldrh	r3, [r7, #12]
 80027a8:	8afa      	ldrh	r2, [r7, #22]
 80027aa:	0852      	lsrs	r2, r2, #1
 80027ac:	b292      	uxth	r2, r2
 80027ae:	1899      	adds	r1, r3, r2
 80027b0:	897b      	ldrh	r3, [r7, #10]
 80027b2:	2201      	movs	r2, #1
 80027b4:	9200      	str	r2, [sp, #0]
 80027b6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80027ba:	f7ff faac 	bl	8001d16 <gui_circle>
	}
	return 150+r;
 80027be:	897b      	ldrh	r3, [r7, #10]
 80027c0:	3396      	adds	r3, #150	; 0x96
 80027c2:	b29b      	uxth	r3, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	371c      	adds	r7, #28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd90      	pop	{r4, r7, pc}

080027cc <LCD_UpdateDeviceState>:
 * @parameters :m:the multiplier
                n:the power
 * @retvalue   :the nth power of m
******************************************************************************/
void LCD_UpdateDeviceState(u16 x,u16 y,u16 r,u8 state)
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	4604      	mov	r4, r0
 80027d4:	4608      	mov	r0, r1
 80027d6:	4611      	mov	r1, r2
 80027d8:	461a      	mov	r2, r3
 80027da:	4623      	mov	r3, r4
 80027dc:	80fb      	strh	r3, [r7, #6]
 80027de:	4603      	mov	r3, r0
 80027e0:	80bb      	strh	r3, [r7, #4]
 80027e2:	460b      	mov	r3, r1
 80027e4:	807b      	strh	r3, [r7, #2]
 80027e6:	4613      	mov	r3, r2
 80027e8:	707b      	strb	r3, [r7, #1]
	//gui_circle(lcddev.width/2-80+(i*25),lcddev.height/2-50+(i*25),ColorTab[i],30,0);
	u16 size = 16;
 80027ea:	2310      	movs	r3, #16
 80027ec:	81fb      	strh	r3, [r7, #14]
	if(state == 1)
 80027ee:	787b      	ldrb	r3, [r7, #1]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d10d      	bne.n	8002810 <LCD_UpdateDeviceState+0x44>
	{
		gui_circle(x, y+size/2, GREEN, r, 1);
 80027f4:	88f8      	ldrh	r0, [r7, #6]
 80027f6:	88bb      	ldrh	r3, [r7, #4]
 80027f8:	89fa      	ldrh	r2, [r7, #14]
 80027fa:	0852      	lsrs	r2, r2, #1
 80027fc:	b292      	uxth	r2, r2
 80027fe:	1899      	adds	r1, r3, r2
 8002800:	887b      	ldrh	r3, [r7, #2]
 8002802:	2201      	movs	r2, #1
 8002804:	9200      	str	r2, [sp, #0]
 8002806:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800280a:	f7ff fa84 	bl	8001d16 <gui_circle>
	}else
	{
		gui_circle(x, y+size/2, RED, r, 1);
	}
}
 800280e:	e00c      	b.n	800282a <LCD_UpdateDeviceState+0x5e>
		gui_circle(x, y+size/2, RED, r, 1);
 8002810:	88f8      	ldrh	r0, [r7, #6]
 8002812:	88bb      	ldrh	r3, [r7, #4]
 8002814:	89fa      	ldrh	r2, [r7, #14]
 8002816:	0852      	lsrs	r2, r2, #1
 8002818:	b292      	uxth	r2, r2
 800281a:	1899      	adds	r1, r3, r2
 800281c:	887b      	ldrh	r3, [r7, #2]
 800281e:	2201      	movs	r2, #1
 8002820:	9200      	str	r2, [sp, #0]
 8002822:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002826:	f7ff fa76 	bl	8001d16 <gui_circle>
}
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	bd90      	pop	{r4, r7, pc}

08002832 <LCD_ShowEditNum>:
 * @parameters :m:the multiplier
                n:the power
 * @retvalue   :the nth power of m
******************************************************************************/
void LCD_ShowEditNum(u16 x,u16 y,u8 *pStr,u8 lengthNum)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b08c      	sub	sp, #48	; 0x30
 8002836:	af04      	add	r7, sp, #16
 8002838:	60ba      	str	r2, [r7, #8]
 800283a:	461a      	mov	r2, r3
 800283c:	4603      	mov	r3, r0
 800283e:	81fb      	strh	r3, [r7, #14]
 8002840:	460b      	mov	r3, r1
 8002842:	81bb      	strh	r3, [r7, #12]
 8002844:	4613      	mov	r3, r2
 8002846:	71fb      	strb	r3, [r7, #7]
	u16 size = 16;
 8002848:	2310      	movs	r3, #16
 800284a:	83fb      	strh	r3, [r7, #30]
	u16 widthStr = 100;
 800284c:	2364      	movs	r3, #100	; 0x64
 800284e:	83bb      	strh	r3, [r7, #28]
	u16 widthBox = lengthNum*(size/2);
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	b29a      	uxth	r2, r3
 8002854:	8bfb      	ldrh	r3, [r7, #30]
 8002856:	085b      	lsrs	r3, r3, #1
 8002858:	b29b      	uxth	r3, r3
 800285a:	fb12 f303 	smulbb	r3, r2, r3
 800285e:	837b      	strh	r3, [r7, #26]
	u16 heightBox = 20;
 8002860:	2314      	movs	r3, #20
 8002862:	833b      	strh	r3, [r7, #24]
	u16 XsBox = x + widthStr - 5;
 8002864:	89fa      	ldrh	r2, [r7, #14]
 8002866:	8bbb      	ldrh	r3, [r7, #28]
 8002868:	4413      	add	r3, r2
 800286a:	b29b      	uxth	r3, r3
 800286c:	3b05      	subs	r3, #5
 800286e:	82fb      	strh	r3, [r7, #22]
	u16 YsBox = y - 5;
 8002870:	89bb      	ldrh	r3, [r7, #12]
 8002872:	3b05      	subs	r3, #5
 8002874:	82bb      	strh	r3, [r7, #20]
	u16 XeBox = XsBox + widthBox + 5;
 8002876:	8afa      	ldrh	r2, [r7, #22]
 8002878:	8b7b      	ldrh	r3, [r7, #26]
 800287a:	4413      	add	r3, r2
 800287c:	b29b      	uxth	r3, r3
 800287e:	3305      	adds	r3, #5
 8002880:	827b      	strh	r3, [r7, #18]
	u16 YeBox = YsBox + heightBox+ 5;
 8002882:	8aba      	ldrh	r2, [r7, #20]
 8002884:	8b3b      	ldrh	r3, [r7, #24]
 8002886:	4413      	add	r3, r2
 8002888:	b29b      	uxth	r3, r3
 800288a:	3305      	adds	r3, #5
 800288c:	823b      	strh	r3, [r7, #16]


	//Draw str
	Show_Str(x, y, BLACK, WHITE, pStr, size, 1);
 800288e:	8bfb      	ldrh	r3, [r7, #30]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	89b9      	ldrh	r1, [r7, #12]
 8002894:	89f8      	ldrh	r0, [r7, #14]
 8002896:	2201      	movs	r2, #1
 8002898:	9202      	str	r2, [sp, #8]
 800289a:	9301      	str	r3, [sp, #4]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028a4:	2200      	movs	r2, #0
 80028a6:	f000 fbf7 	bl	8003098 <Show_Str>
	//Draw edit box
	LCD_DrawRectangle(XsBox,YsBox,XeBox,YeBox);
 80028aa:	8a3b      	ldrh	r3, [r7, #16]
 80028ac:	8a7a      	ldrh	r2, [r7, #18]
 80028ae:	8ab9      	ldrh	r1, [r7, #20]
 80028b0:	8af8      	ldrh	r0, [r7, #22]
 80028b2:	f7ff f977 	bl	8001ba4 <LCD_DrawRectangle>

}
 80028b6:	bf00      	nop
 80028b8:	3720      	adds	r7, #32
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <LCD_UpdateEditNum>:
 * @parameters :m:the multiplier
                n:the power
 * @retvalue   :the nth power of m
******************************************************************************/
void LCD_UpdateEditNum(u16 xS,u16 yS,u16 xE,u16 yE,u32 num)
{
 80028c0:	b5b0      	push	{r4, r5, r7, lr}
 80028c2:	b090      	sub	sp, #64	; 0x40
 80028c4:	af06      	add	r7, sp, #24
 80028c6:	4604      	mov	r4, r0
 80028c8:	4608      	mov	r0, r1
 80028ca:	4611      	mov	r1, r2
 80028cc:	461a      	mov	r2, r3
 80028ce:	4623      	mov	r3, r4
 80028d0:	80fb      	strh	r3, [r7, #6]
 80028d2:	4603      	mov	r3, r0
 80028d4:	80bb      	strh	r3, [r7, #4]
 80028d6:	460b      	mov	r3, r1
 80028d8:	807b      	strh	r3, [r7, #2]
 80028da:	4613      	mov	r3, r2
 80028dc:	803b      	strh	r3, [r7, #0]
	u16 size = 16;
 80028de:	2310      	movs	r3, #16
 80028e0:	83bb      	strh	r3, [r7, #28]
	u8 mode = 1;
 80028e2:	2301      	movs	r3, #1
 80028e4:	76fb      	strb	r3, [r7, #27]
	//Convert hex to str
	char StrNum[8],StrNumFinal[8];
	u32 numTemp,temp;
	u8 i = 0,length;
 80028e6:	2300      	movs	r3, #0
 80028e8:	77fb      	strb	r3, [r7, #31]
	numTemp = num;
 80028ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
	memset(StrNum,0,sizeof(StrNum));
 80028ee:	f107 0310 	add.w	r3, r7, #16
 80028f2:	2208      	movs	r2, #8
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f003 ff18 	bl	800672c <memset>
	memset(StrNumFinal,0,sizeof(StrNumFinal));
 80028fc:	f107 0308 	add.w	r3, r7, #8
 8002900:	2208      	movs	r2, #8
 8002902:	2100      	movs	r1, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f003 ff11 	bl	800672c <memset>
	if(numTemp == 0)
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	2b00      	cmp	r3, #0
 800290e:	d129      	bne.n	8002964 <LCD_UpdateEditNum+0xa4>
	{
		StrNumFinal[0] += 48;
 8002910:	7a3b      	ldrb	r3, [r7, #8]
 8002912:	3330      	adds	r3, #48	; 0x30
 8002914:	b2db      	uxtb	r3, r3
 8002916:	723b      	strb	r3, [r7, #8]
 8002918:	e041      	b.n	800299e <LCD_UpdateEditNum+0xde>
	}else{
		while(numTemp !=0)
		{
			temp = numTemp %10;
 800291a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291c:	4b34      	ldr	r3, [pc, #208]	; (80029f0 <LCD_UpdateEditNum+0x130>)
 800291e:	fba3 1302 	umull	r1, r3, r3, r2
 8002922:	08d9      	lsrs	r1, r3, #3
 8002924:	460b      	mov	r3, r1
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	623b      	str	r3, [r7, #32]
			if(temp<10)
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	2b09      	cmp	r3, #9
 8002934:	d803      	bhi.n	800293e <LCD_UpdateEditNum+0x7e>
			{
				temp +=48;
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	3330      	adds	r3, #48	; 0x30
 800293a:	623b      	str	r3, [r7, #32]
 800293c:	e002      	b.n	8002944 <LCD_UpdateEditNum+0x84>
			}else
			{
				temp +=55;
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	3337      	adds	r3, #55	; 0x37
 8002942:	623b      	str	r3, [r7, #32]
			}
			StrNum[i] = temp;
 8002944:	7ffb      	ldrb	r3, [r7, #31]
 8002946:	6a3a      	ldr	r2, [r7, #32]
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	3328      	adds	r3, #40	; 0x28
 800294c:	443b      	add	r3, r7
 800294e:	f803 2c18 	strb.w	r2, [r3, #-24]
			i++;
 8002952:	7ffb      	ldrb	r3, [r7, #31]
 8002954:	3301      	adds	r3, #1
 8002956:	77fb      	strb	r3, [r7, #31]
			numTemp /=10;
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	4a25      	ldr	r2, [pc, #148]	; (80029f0 <LCD_UpdateEditNum+0x130>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	08db      	lsrs	r3, r3, #3
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
		while(numTemp !=0)
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1d7      	bne.n	800291a <LCD_UpdateEditNum+0x5a>
		}
		length = i-1;
 800296a:	7ffb      	ldrb	r3, [r7, #31]
 800296c:	3b01      	subs	r3, #1
 800296e:	76bb      	strb	r3, [r7, #26]

		for(u8 k = 0; k <= length; k++)
 8002970:	2300      	movs	r3, #0
 8002972:	77bb      	strb	r3, [r7, #30]
 8002974:	e00f      	b.n	8002996 <LCD_UpdateEditNum+0xd6>
		{
			i--;
 8002976:	7ffb      	ldrb	r3, [r7, #31]
 8002978:	3b01      	subs	r3, #1
 800297a:	77fb      	strb	r3, [r7, #31]
			StrNumFinal[k] = StrNum[i];
 800297c:	7ffa      	ldrb	r2, [r7, #31]
 800297e:	7fbb      	ldrb	r3, [r7, #30]
 8002980:	3228      	adds	r2, #40	; 0x28
 8002982:	443a      	add	r2, r7
 8002984:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002988:	3328      	adds	r3, #40	; 0x28
 800298a:	443b      	add	r3, r7
 800298c:	f803 2c20 	strb.w	r2, [r3, #-32]
		for(u8 k = 0; k <= length; k++)
 8002990:	7fbb      	ldrb	r3, [r7, #30]
 8002992:	3301      	adds	r3, #1
 8002994:	77bb      	strb	r3, [r7, #30]
 8002996:	7fba      	ldrb	r2, [r7, #30]
 8002998:	7ebb      	ldrb	r3, [r7, #26]
 800299a:	429a      	cmp	r2, r3
 800299c:	d9eb      	bls.n	8002976 <LCD_UpdateEditNum+0xb6>
	for(u8 k = 0; k <= length; k++)
	{
		i--;
		StrNumFinal[k] = StrNum[i];
	}*/
	LCD_ClearCursor(xS, yS, xE, yE, WHITE);
 800299e:	883b      	ldrh	r3, [r7, #0]
 80029a0:	887a      	ldrh	r2, [r7, #2]
 80029a2:	88b9      	ldrh	r1, [r7, #4]
 80029a4:	88f8      	ldrh	r0, [r7, #6]
 80029a6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80029aa:	9400      	str	r4, [sp, #0]
 80029ac:	f000 fda4 	bl	80034f8 <LCD_ClearCursor>
	Gui_StrCenterV2(xS, yS, xE-xS, yE-yS, BLACK, WHITE,(u8*) StrNumFinal, size, mode);
 80029b0:	887a      	ldrh	r2, [r7, #2]
 80029b2:	88fb      	ldrh	r3, [r7, #6]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	b29c      	uxth	r4, r3
 80029b8:	883a      	ldrh	r2, [r7, #0]
 80029ba:	88bb      	ldrh	r3, [r7, #4]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	b29d      	uxth	r5, r3
 80029c0:	8bbb      	ldrh	r3, [r7, #28]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	88b9      	ldrh	r1, [r7, #4]
 80029c6:	88f8      	ldrh	r0, [r7, #6]
 80029c8:	7efa      	ldrb	r2, [r7, #27]
 80029ca:	9204      	str	r2, [sp, #16]
 80029cc:	9303      	str	r3, [sp, #12]
 80029ce:	f107 0308 	add.w	r3, r7, #8
 80029d2:	9302      	str	r3, [sp, #8]
 80029d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029d8:	9301      	str	r3, [sp, #4]
 80029da:	2300      	movs	r3, #0
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	462b      	mov	r3, r5
 80029e0:	4622      	mov	r2, r4
 80029e2:	f000 fc2b 	bl	800323c <Gui_StrCenterV2>
}
 80029e6:	bf00      	nop
 80029e8:	3728      	adds	r7, #40	; 0x28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bdb0      	pop	{r4, r5, r7, pc}
 80029ee:	bf00      	nop
 80029f0:	cccccccd 	.word	0xcccccccd

080029f4 <LCD_ShowBtnUpDown>:
 * @parameters :m:the multiplier
                n:the power
 * @retvalue   :the nth power of m
******************************************************************************/
void LCD_ShowBtnUpDown(u16 x0,u16 y0,u16 width,u16 height)
{
 80029f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	4604      	mov	r4, r0
 80029fc:	4608      	mov	r0, r1
 80029fe:	4611      	mov	r1, r2
 8002a00:	461a      	mov	r2, r3
 8002a02:	4623      	mov	r3, r4
 8002a04:	80fb      	strh	r3, [r7, #6]
 8002a06:	4603      	mov	r3, r0
 8002a08:	80bb      	strh	r3, [r7, #4]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	807b      	strh	r3, [r7, #2]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	803b      	strh	r3, [r7, #0]
	//LCD_Fill(x0 , y0, x0+width, y0 + height, GRED);
	LCD_DrawRectangle(x0 , y0, x0+width, y0 + height);
 8002a12:	88fa      	ldrh	r2, [r7, #6]
 8002a14:	887b      	ldrh	r3, [r7, #2]
 8002a16:	4413      	add	r3, r2
 8002a18:	b29c      	uxth	r4, r3
 8002a1a:	88ba      	ldrh	r2, [r7, #4]
 8002a1c:	883b      	ldrh	r3, [r7, #0]
 8002a1e:	4413      	add	r3, r2
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	88b9      	ldrh	r1, [r7, #4]
 8002a24:	88f8      	ldrh	r0, [r7, #6]
 8002a26:	4622      	mov	r2, r4
 8002a28:	f7ff f8bc 	bl	8001ba4 <LCD_DrawRectangle>
	LCD_SetColorPoint(BLACK);
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f000 fcf9 	bl	8003424 <LCD_SetColorPoint>
	Fill_Triangel(x0+width/2, y0 + 3, x0 + width/2+width/4, y0+height/3, x0 + width/4, y0+height/3);
 8002a32:	887b      	ldrh	r3, [r7, #2]
 8002a34:	085b      	lsrs	r3, r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	b298      	uxth	r0, r3
 8002a3e:	88bb      	ldrh	r3, [r7, #4]
 8002a40:	3303      	adds	r3, #3
 8002a42:	b29c      	uxth	r4, r3
 8002a44:	887b      	ldrh	r3, [r7, #2]
 8002a46:	085b      	lsrs	r3, r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	88fb      	ldrh	r3, [r7, #6]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	887b      	ldrh	r3, [r7, #2]
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	b29d      	uxth	r5, r3
 8002a5a:	883b      	ldrh	r3, [r7, #0]
 8002a5c:	4a2d      	ldr	r2, [pc, #180]	; (8002b14 <LCD_ShowBtnUpDown+0x120>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	085b      	lsrs	r3, r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	88bb      	ldrh	r3, [r7, #4]
 8002a68:	4413      	add	r3, r2
 8002a6a:	b29e      	uxth	r6, r3
 8002a6c:	887b      	ldrh	r3, [r7, #2]
 8002a6e:	089b      	lsrs	r3, r3, #2
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	4413      	add	r3, r2
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	883a      	ldrh	r2, [r7, #0]
 8002a7a:	4926      	ldr	r1, [pc, #152]	; (8002b14 <LCD_ShowBtnUpDown+0x120>)
 8002a7c:	fba1 1202 	umull	r1, r2, r1, r2
 8002a80:	0852      	lsrs	r2, r2, #1
 8002a82:	b291      	uxth	r1, r2
 8002a84:	88ba      	ldrh	r2, [r7, #4]
 8002a86:	440a      	add	r2, r1
 8002a88:	b292      	uxth	r2, r2
 8002a8a:	9201      	str	r2, [sp, #4]
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	4633      	mov	r3, r6
 8002a90:	462a      	mov	r2, r5
 8002a92:	4621      	mov	r1, r4
 8002a94:	f7ff f9c0 	bl	8001e18 <Fill_Triangel>
	Fill_Triangel(x0+width/4, y0 + height*2/3, x0 + width/2+width/4, y0+height*2/3, x0 + width/2, y0+height-3);
 8002a98:	887b      	ldrh	r3, [r7, #2]
 8002a9a:	089b      	lsrs	r3, r3, #2
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	b298      	uxth	r0, r3
 8002aa4:	883b      	ldrh	r3, [r7, #0]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	4a1b      	ldr	r2, [pc, #108]	; (8002b18 <LCD_ShowBtnUpDown+0x124>)
 8002aaa:	fb82 1203 	smull	r1, r2, r2, r3
 8002aae:	17db      	asrs	r3, r3, #31
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	88bb      	ldrh	r3, [r7, #4]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	b29c      	uxth	r4, r3
 8002aba:	887b      	ldrh	r3, [r7, #2]
 8002abc:	085b      	lsrs	r3, r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	887b      	ldrh	r3, [r7, #2]
 8002ac8:	089b      	lsrs	r3, r3, #2
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	b29d      	uxth	r5, r3
 8002ad0:	883b      	ldrh	r3, [r7, #0]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4a10      	ldr	r2, [pc, #64]	; (8002b18 <LCD_ShowBtnUpDown+0x124>)
 8002ad6:	fb82 1203 	smull	r1, r2, r2, r3
 8002ada:	17db      	asrs	r3, r3, #31
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	88bb      	ldrh	r3, [r7, #4]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	b29e      	uxth	r6, r3
 8002ae6:	887b      	ldrh	r3, [r7, #2]
 8002ae8:	085b      	lsrs	r3, r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	4413      	add	r3, r2
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	88b9      	ldrh	r1, [r7, #4]
 8002af4:	883a      	ldrh	r2, [r7, #0]
 8002af6:	440a      	add	r2, r1
 8002af8:	b292      	uxth	r2, r2
 8002afa:	3a03      	subs	r2, #3
 8002afc:	b292      	uxth	r2, r2
 8002afe:	9201      	str	r2, [sp, #4]
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	4633      	mov	r3, r6
 8002b04:	462a      	mov	r2, r5
 8002b06:	4621      	mov	r1, r4
 8002b08:	f7ff f986 	bl	8001e18 <Fill_Triangel>
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b14:	aaaaaaab 	.word	0xaaaaaaab
 8002b18:	55555556 	.word	0x55555556

08002b1c <mypow>:
 * @parameters :m:the multiplier
                n:the power
 * @retvalue   :the nth power of m
******************************************************************************/
u32 mypow(u8 m,u8 n)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	460a      	mov	r2, r1
 8002b26:	71fb      	strb	r3, [r7, #7]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	71bb      	strb	r3, [r7, #6]
	u32 result=1;	 
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;    
 8002b30:	e004      	b.n	8002b3c <mypow+0x20>
 8002b32:	79fa      	ldrb	r2, [r7, #7]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	fb02 f303 	mul.w	r3, r2, r3
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	79bb      	ldrb	r3, [r7, #6]
 8002b3e:	1e5a      	subs	r2, r3, #1
 8002b40:	71ba      	strb	r2, [r7, #6]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f5      	bne.n	8002b32 <mypow+0x16>
	return result;
 8002b46:	68fb      	ldr	r3, [r7, #12]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LCD_ShowNum>:
								len:the length of the display number
								size:the size of display number
 * @retvalue   :None
******************************************************************************/  			 
void LCD_ShowNum(u16 x,u16 y,u32 num,u8 len,u8 size)
{         	
 8002b54:	b5b0      	push	{r4, r5, r7, lr}
 8002b56:	b08a      	sub	sp, #40	; 0x28
 8002b58:	af04      	add	r7, sp, #16
 8002b5a:	60ba      	str	r2, [r7, #8]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4603      	mov	r3, r0
 8002b60:	81fb      	strh	r3, [r7, #14]
 8002b62:	460b      	mov	r3, r1
 8002b64:	81bb      	strh	r3, [r7, #12]
 8002b66:	4613      	mov	r3, r2
 8002b68:	71fb      	strb	r3, [r7, #7]
	u8 t,temp;
	u8 enshow=0;						   
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	75bb      	strb	r3, [r7, #22]
	for(t=0;t<len;t++)
 8002b6e:	2300      	movs	r3, #0
 8002b70:	75fb      	strb	r3, [r7, #23]
 8002b72:	e064      	b.n	8002c3e <LCD_ShowNum+0xea>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8002b74:	79fa      	ldrb	r2, [r7, #7]
 8002b76:	7dfb      	ldrb	r3, [r7, #23]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	4619      	mov	r1, r3
 8002b82:	200a      	movs	r0, #10
 8002b84:	f7ff ffca 	bl	8002b1c <mypow>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002b90:	4b2f      	ldr	r3, [pc, #188]	; (8002c50 <LCD_ShowNum+0xfc>)
 8002b92:	fba3 2301 	umull	r2, r3, r3, r1
 8002b96:	08da      	lsrs	r2, r3, #3
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	1aca      	subs	r2, r1, r3
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	757b      	strb	r3, [r7, #21]
		if(enshow==0&&t<(len-1))
 8002ba6:	7dbb      	ldrb	r3, [r7, #22]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d126      	bne.n	8002bfa <LCD_ShowNum+0xa6>
 8002bac:	7dfa      	ldrb	r2, [r7, #23]
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	da21      	bge.n	8002bfa <LCD_ShowNum+0xa6>
		{
			if(temp==0)
 8002bb6:	7d7b      	ldrb	r3, [r7, #21]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d11c      	bne.n	8002bf6 <LCD_ShowNum+0xa2>
			{
				LCD_ShowChar(x+(size/2)*t,y,POINT_COLOR,BACK_COLOR,' ',size,0);
 8002bbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002bc0:	085b      	lsrs	r3, r3, #1
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	fb12 f303 	smulbb	r3, r2, r3
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	89fb      	ldrh	r3, [r7, #14]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	b298      	uxth	r0, r3
 8002bd6:	4b1f      	ldr	r3, [pc, #124]	; (8002c54 <LCD_ShowNum+0x100>)
 8002bd8:	881a      	ldrh	r2, [r3, #0]
 8002bda:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <LCD_ShowNum+0x104>)
 8002bdc:	881c      	ldrh	r4, [r3, #0]
 8002bde:	89b9      	ldrh	r1, [r7, #12]
 8002be0:	2300      	movs	r3, #0
 8002be2:	9302      	str	r3, [sp, #8]
 8002be4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	2320      	movs	r3, #32
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	4623      	mov	r3, r4
 8002bf0:	f7ff fab2 	bl	8002158 <LCD_ShowChar>
				continue;
 8002bf4:	e020      	b.n	8002c38 <LCD_ShowNum+0xe4>
			}else enshow=1; 
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	75bb      	strb	r3, [r7, #22]
		 	 
		}
	 	LCD_ShowChar(x+(size/2)*t,y,POINT_COLOR,BACK_COLOR,temp+'0',size,0); 
 8002bfa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002bfe:	085b      	lsrs	r3, r3, #1
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	7dfb      	ldrb	r3, [r7, #23]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	fb12 f303 	smulbb	r3, r2, r3
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	89fb      	ldrh	r3, [r7, #14]
 8002c10:	4413      	add	r3, r2
 8002c12:	b298      	uxth	r0, r3
 8002c14:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <LCD_ShowNum+0x100>)
 8002c16:	881c      	ldrh	r4, [r3, #0]
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <LCD_ShowNum+0x104>)
 8002c1a:	881d      	ldrh	r5, [r3, #0]
 8002c1c:	7d7b      	ldrb	r3, [r7, #21]
 8002c1e:	3330      	adds	r3, #48	; 0x30
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	89b9      	ldrh	r1, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	9202      	str	r2, [sp, #8]
 8002c28:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002c2c:	9201      	str	r2, [sp, #4]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	462b      	mov	r3, r5
 8002c32:	4622      	mov	r2, r4
 8002c34:	f7ff fa90 	bl	8002158 <LCD_ShowChar>
	for(t=0;t<len;t++)
 8002c38:	7dfb      	ldrb	r3, [r7, #23]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	75fb      	strb	r3, [r7, #23]
 8002c3e:	7dfa      	ldrb	r2, [r7, #23]
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d396      	bcc.n	8002b74 <LCD_ShowNum+0x20>
	}
} 
 8002c46:	bf00      	nop
 8002c48:	bf00      	nop
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c50:	cccccccd 	.word	0xcccccccd
 8002c54:	2000011e 	.word	0x2000011e
 8002c58:	20000028 	.word	0x20000028

08002c5c <GUI_DrawFont16>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void GUI_DrawFont16(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 8002c5c:	b590      	push	{r4, r7, lr}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4604      	mov	r4, r0
 8002c64:	4608      	mov	r0, r1
 8002c66:	4611      	mov	r1, r2
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4623      	mov	r3, r4
 8002c6c:	80fb      	strh	r3, [r7, #6]
 8002c6e:	4603      	mov	r3, r0
 8002c70:	80bb      	strh	r3, [r7, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	807b      	strh	r3, [r7, #2]
 8002c76:	4613      	mov	r3, r2
 8002c78:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont16)/sizeof(typFNT_GB16);	//�Զ�ͳ�ƺ�����Ŀ
 8002c7e:	233e      	movs	r3, #62	; 0x3e
 8002c80:	813b      	strh	r3, [r7, #8]
	
			
	for (k=0;k<HZnum;k++) 
 8002c82:	2300      	movs	r3, #0
 8002c84:	81bb      	strh	r3, [r7, #12]
 8002c86:	e083      	b.n	8002d90 <GUI_DrawFont16+0x134>
	{
	  if ((tfont16[k].Index[0]==*(s))&&(tfont16[k].Index[1]==*(s+1)))
 8002c88:	89ba      	ldrh	r2, [r7, #12]
 8002c8a:	494c      	ldr	r1, [pc, #304]	; (8002dbc <GUI_DrawFont16+0x160>)
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	4413      	add	r3, r2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	440b      	add	r3, r1
 8002c96:	781a      	ldrb	r2, [r3, #0]
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d174      	bne.n	8002d8a <GUI_DrawFont16+0x12e>
 8002ca0:	89ba      	ldrh	r2, [r7, #12]
 8002ca2:	4946      	ldr	r1, [pc, #280]	; (8002dbc <GUI_DrawFont16+0x160>)
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	4413      	add	r3, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	440b      	add	r3, r1
 8002cae:	3301      	adds	r3, #1
 8002cb0:	781a      	ldrb	r2, [r3, #0]
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d166      	bne.n	8002d8a <GUI_DrawFont16+0x12e>
	  { 	LCD_SetWindows(x,y,x+16-1,y+16-1);
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	330f      	adds	r3, #15
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	88bb      	ldrh	r3, [r7, #4]
 8002cc4:	330f      	adds	r3, #15
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	88b9      	ldrh	r1, [r7, #4]
 8002cca:	88f8      	ldrh	r0, [r7, #6]
 8002ccc:	f000 fdc6 	bl	800385c <LCD_SetWindows>
		    for(i=0;i<16*2;i++)
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	73fb      	strb	r3, [r7, #15]
 8002cd4:	e056      	b.n	8002d84 <GUI_DrawFont16+0x128>
		    {
				for(j=0;j<8;j++)
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73bb      	strb	r3, [r7, #14]
 8002cda:	e04d      	b.n	8002d78 <GUI_DrawFont16+0x11c>
		    	{	
					if(!mode) //�ǵ��ӷ�ʽ
 8002cdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d11c      	bne.n	8002d1e <GUI_DrawFont16+0xc2>
					{
						if(tfont16[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 8002ce4:	89ba      	ldrh	r2, [r7, #12]
 8002ce6:	7bf9      	ldrb	r1, [r7, #15]
 8002ce8:	4834      	ldr	r0, [pc, #208]	; (8002dbc <GUI_DrawFont16+0x160>)
 8002cea:	4613      	mov	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	4413      	add	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4403      	add	r3, r0
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	7bbb      	ldrb	r3, [r7, #14]
 8002cfe:	2280      	movs	r2, #128	; 0x80
 8002d00:	fa42 f303 	asr.w	r3, r2, r3
 8002d04:	400b      	ands	r3, r1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d004      	beq.n	8002d14 <GUI_DrawFont16+0xb8>
 8002d0a:	887b      	ldrh	r3, [r7, #2]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 fb63 	bl	80033d8 <Lcd_WriteData_16Bit>
 8002d12:	e02e      	b.n	8002d72 <GUI_DrawFont16+0x116>
						else Lcd_WriteData_16Bit(bc);
 8002d14:	883b      	ldrh	r3, [r7, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fb5e 	bl	80033d8 <Lcd_WriteData_16Bit>
 8002d1c:	e029      	b.n	8002d72 <GUI_DrawFont16+0x116>
					}
					else
					{
						POINT_COLOR=fc;
 8002d1e:	4a28      	ldr	r2, [pc, #160]	; (8002dc0 <GUI_DrawFont16+0x164>)
 8002d20:	887b      	ldrh	r3, [r7, #2]
 8002d22:	8013      	strh	r3, [r2, #0]
						if(tfont16[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 8002d24:	89ba      	ldrh	r2, [r7, #12]
 8002d26:	7bf9      	ldrb	r1, [r7, #15]
 8002d28:	4824      	ldr	r0, [pc, #144]	; (8002dbc <GUI_DrawFont16+0x160>)
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	4413      	add	r3, r2
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	4403      	add	r3, r0
 8002d34:	440b      	add	r3, r1
 8002d36:	3302      	adds	r3, #2
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	7bbb      	ldrb	r3, [r7, #14]
 8002d3e:	2280      	movs	r2, #128	; 0x80
 8002d40:	fa42 f303 	asr.w	r3, r2, r3
 8002d44:	400b      	ands	r3, r1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <GUI_DrawFont16+0xfa>
 8002d4a:	88ba      	ldrh	r2, [r7, #4]
 8002d4c:	88fb      	ldrh	r3, [r7, #6]
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fb77 	bl	8003444 <LCD_DrawPoint>
						x++;
 8002d56:	88fb      	ldrh	r3, [r7, #6]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	80fb      	strh	r3, [r7, #6]
						if((x-x0)==16)
 8002d5c:	88fa      	ldrh	r2, [r7, #6]
 8002d5e:	897b      	ldrh	r3, [r7, #10]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b10      	cmp	r3, #16
 8002d64:	d105      	bne.n	8002d72 <GUI_DrawFont16+0x116>
						{
							x=x0;
 8002d66:	897b      	ldrh	r3, [r7, #10]
 8002d68:	80fb      	strh	r3, [r7, #6]
							y++;
 8002d6a:	88bb      	ldrh	r3, [r7, #4]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	80bb      	strh	r3, [r7, #4]
							break;
 8002d70:	e005      	b.n	8002d7e <GUI_DrawFont16+0x122>
				for(j=0;j<8;j++)
 8002d72:	7bbb      	ldrb	r3, [r7, #14]
 8002d74:	3301      	adds	r3, #1
 8002d76:	73bb      	strb	r3, [r7, #14]
 8002d78:	7bbb      	ldrb	r3, [r7, #14]
 8002d7a:	2b07      	cmp	r3, #7
 8002d7c:	d9ae      	bls.n	8002cdc <GUI_DrawFont16+0x80>
		    for(i=0;i<16*2;i++)
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	3301      	adds	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	2b1f      	cmp	r3, #31
 8002d88:	d9a5      	bls.n	8002cd6 <GUI_DrawFont16+0x7a>
	for (k=0;k<HZnum;k++) 
 8002d8a:	89bb      	ldrh	r3, [r7, #12]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	81bb      	strh	r3, [r7, #12]
 8002d90:	89ba      	ldrh	r2, [r7, #12]
 8002d92:	893b      	ldrh	r3, [r7, #8]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	f4ff af77 	bcc.w	8002c88 <GUI_DrawFont16+0x2c>
			
		}				  	
		continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
	}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��  
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <GUI_DrawFont16+0x168>)
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <GUI_DrawFont16+0x168>)
 8002da4:	885b      	ldrh	r3, [r3, #2]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2100      	movs	r1, #0
 8002dac:	2000      	movs	r0, #0
 8002dae:	f000 fd55 	bl	800385c <LCD_SetWindows>
} 
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd90      	pop	{r4, r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	080072b0 	.word	0x080072b0
 8002dc0:	2000011e 	.word	0x2000011e
 8002dc4:	20000110 	.word	0x20000110

08002dc8 <GUI_DrawFont24>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void GUI_DrawFont24(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4604      	mov	r4, r0
 8002dd0:	4608      	mov	r0, r1
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4623      	mov	r3, r4
 8002dd8:	80fb      	strh	r3, [r7, #6]
 8002dda:	4603      	mov	r3, r0
 8002ddc:	80bb      	strh	r3, [r7, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	807b      	strh	r3, [r7, #2]
 8002de2:	4613      	mov	r3, r2
 8002de4:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont24)/sizeof(typFNT_GB24);	//�Զ�ͳ�ƺ�����Ŀ
 8002dea:	2307      	movs	r3, #7
 8002dec:	813b      	strh	r3, [r7, #8]
		
			for (k=0;k<HZnum;k++) 
 8002dee:	2300      	movs	r3, #0
 8002df0:	81bb      	strh	r3, [r7, #12]
 8002df2:	e07f      	b.n	8002ef4 <GUI_DrawFont24+0x12c>
			{
			  if ((tfont24[k].Index[0]==*(s))&&(tfont24[k].Index[1]==*(s+1)))
 8002df4:	89bb      	ldrh	r3, [r7, #12]
 8002df6:	4a4a      	ldr	r2, [pc, #296]	; (8002f20 <GUI_DrawFont24+0x158>)
 8002df8:	214a      	movs	r1, #74	; 0x4a
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	781a      	ldrb	r2, [r3, #0]
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d171      	bne.n	8002eee <GUI_DrawFont24+0x126>
 8002e0a:	89bb      	ldrh	r3, [r7, #12]
 8002e0c:	4a44      	ldr	r2, [pc, #272]	; (8002f20 <GUI_DrawFont24+0x158>)
 8002e0e:	214a      	movs	r1, #74	; 0x4a
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	3301      	adds	r3, #1
 8002e18:	781a      	ldrb	r2, [r3, #0]
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d164      	bne.n	8002eee <GUI_DrawFont24+0x126>
			  { 	LCD_SetWindows(x,y,x+24-1,y+24-1);
 8002e24:	88fb      	ldrh	r3, [r7, #6]
 8002e26:	3317      	adds	r3, #23
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	88bb      	ldrh	r3, [r7, #4]
 8002e2c:	3317      	adds	r3, #23
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	88b9      	ldrh	r1, [r7, #4]
 8002e32:	88f8      	ldrh	r0, [r7, #6]
 8002e34:	f000 fd12 	bl	800385c <LCD_SetWindows>
				    for(i=0;i<24*3;i++)
 8002e38:	2300      	movs	r3, #0
 8002e3a:	73fb      	strb	r3, [r7, #15]
 8002e3c:	e054      	b.n	8002ee8 <GUI_DrawFont24+0x120>
				    {
							for(j=0;j<8;j++)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	73bb      	strb	r3, [r7, #14]
 8002e42:	e04b      	b.n	8002edc <GUI_DrawFont24+0x114>
							{
								if(!mode) //�ǵ��ӷ�ʽ
 8002e44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d11b      	bne.n	8002e84 <GUI_DrawFont24+0xbc>
								{
									if(tfont24[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 8002e4c:	89ba      	ldrh	r2, [r7, #12]
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	4933      	ldr	r1, [pc, #204]	; (8002f20 <GUI_DrawFont24+0x158>)
 8002e52:	204a      	movs	r0, #74	; 0x4a
 8002e54:	fb00 f202 	mul.w	r2, r0, r2
 8002e58:	440a      	add	r2, r1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3302      	adds	r3, #2
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	4619      	mov	r1, r3
 8002e62:	7bbb      	ldrb	r3, [r7, #14]
 8002e64:	2280      	movs	r2, #128	; 0x80
 8002e66:	fa42 f303 	asr.w	r3, r2, r3
 8002e6a:	400b      	ands	r3, r1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d004      	beq.n	8002e7a <GUI_DrawFont24+0xb2>
 8002e70:	887b      	ldrh	r3, [r7, #2]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fab0 	bl	80033d8 <Lcd_WriteData_16Bit>
 8002e78:	e02d      	b.n	8002ed6 <GUI_DrawFont24+0x10e>
									else Lcd_WriteData_16Bit(bc);
 8002e7a:	883b      	ldrh	r3, [r7, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 faab 	bl	80033d8 <Lcd_WriteData_16Bit>
 8002e82:	e028      	b.n	8002ed6 <GUI_DrawFont24+0x10e>
								}
							else
							{
								POINT_COLOR=fc;
 8002e84:	4a27      	ldr	r2, [pc, #156]	; (8002f24 <GUI_DrawFont24+0x15c>)
 8002e86:	887b      	ldrh	r3, [r7, #2]
 8002e88:	8013      	strh	r3, [r2, #0]
								if(tfont24[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 8002e8a:	89ba      	ldrh	r2, [r7, #12]
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	4924      	ldr	r1, [pc, #144]	; (8002f20 <GUI_DrawFont24+0x158>)
 8002e90:	204a      	movs	r0, #74	; 0x4a
 8002e92:	fb00 f202 	mul.w	r2, r0, r2
 8002e96:	440a      	add	r2, r1
 8002e98:	4413      	add	r3, r2
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	7bbb      	ldrb	r3, [r7, #14]
 8002ea2:	2280      	movs	r2, #128	; 0x80
 8002ea4:	fa42 f303 	asr.w	r3, r2, r3
 8002ea8:	400b      	ands	r3, r1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <GUI_DrawFont24+0xf2>
 8002eae:	88ba      	ldrh	r2, [r7, #4]
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fac5 	bl	8003444 <LCD_DrawPoint>
								x++;
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	80fb      	strh	r3, [r7, #6]
								if((x-x0)==24)
 8002ec0:	88fa      	ldrh	r2, [r7, #6]
 8002ec2:	897b      	ldrh	r3, [r7, #10]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b18      	cmp	r3, #24
 8002ec8:	d105      	bne.n	8002ed6 <GUI_DrawFont24+0x10e>
								{
									x=x0;
 8002eca:	897b      	ldrh	r3, [r7, #10]
 8002ecc:	80fb      	strh	r3, [r7, #6]
									y++;
 8002ece:	88bb      	ldrh	r3, [r7, #4]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	80bb      	strh	r3, [r7, #4]
									break;
 8002ed4:	e005      	b.n	8002ee2 <GUI_DrawFont24+0x11a>
							for(j=0;j<8;j++)
 8002ed6:	7bbb      	ldrb	r3, [r7, #14]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	73bb      	strb	r3, [r7, #14]
 8002edc:	7bbb      	ldrb	r3, [r7, #14]
 8002ede:	2b07      	cmp	r3, #7
 8002ee0:	d9b0      	bls.n	8002e44 <GUI_DrawFont24+0x7c>
				    for(i=0;i<24*3;i++)
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	73fb      	strb	r3, [r7, #15]
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	2b47      	cmp	r3, #71	; 0x47
 8002eec:	d9a7      	bls.n	8002e3e <GUI_DrawFont24+0x76>
			for (k=0;k<HZnum;k++) 
 8002eee:	89bb      	ldrh	r3, [r7, #12]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	81bb      	strh	r3, [r7, #12]
 8002ef4:	89ba      	ldrh	r2, [r7, #12]
 8002ef6:	893b      	ldrh	r3, [r7, #8]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	f4ff af7b 	bcc.w	8002df4 <GUI_DrawFont24+0x2c>
					
				}				  	
				continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
			}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��  
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <GUI_DrawFont24+0x160>)
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <GUI_DrawFont24+0x160>)
 8002f08:	885b      	ldrh	r3, [r3, #2]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2100      	movs	r1, #0
 8002f10:	2000      	movs	r0, #0
 8002f12:	f000 fca3 	bl	800385c <LCD_SetWindows>
}
 8002f16:	bf00      	nop
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd90      	pop	{r4, r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	08007aec 	.word	0x08007aec
 8002f24:	2000011e 	.word	0x2000011e
 8002f28:	20000110 	.word	0x20000110

08002f2c <GUI_DrawFont32>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void GUI_DrawFont32(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 8002f2c:	b590      	push	{r4, r7, lr}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4604      	mov	r4, r0
 8002f34:	4608      	mov	r0, r1
 8002f36:	4611      	mov	r1, r2
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4623      	mov	r3, r4
 8002f3c:	80fb      	strh	r3, [r7, #6]
 8002f3e:	4603      	mov	r3, r0
 8002f40:	80bb      	strh	r3, [r7, #4]
 8002f42:	460b      	mov	r3, r1
 8002f44:	807b      	strh	r3, [r7, #2]
 8002f46:	4613      	mov	r3, r2
 8002f48:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont32)/sizeof(typFNT_GB32);	//�Զ�ͳ�ƺ�����Ŀ
 8002f4e:	2304      	movs	r3, #4
 8002f50:	813b      	strh	r3, [r7, #8]
	for (k=0;k<HZnum;k++) 
 8002f52:	2300      	movs	r3, #0
 8002f54:	81bb      	strh	r3, [r7, #12]
 8002f56:	e084      	b.n	8003062 <GUI_DrawFont32+0x136>
			{
			  if ((tfont32[k].Index[0]==*(s))&&(tfont32[k].Index[1]==*(s+1)))
 8002f58:	89ba      	ldrh	r2, [r7, #12]
 8002f5a:	494c      	ldr	r1, [pc, #304]	; (800308c <GUI_DrawFont32+0x160>)
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	019b      	lsls	r3, r3, #6
 8002f60:	4413      	add	r3, r2
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	440b      	add	r3, r1
 8002f66:	781a      	ldrb	r2, [r3, #0]
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d175      	bne.n	800305c <GUI_DrawFont32+0x130>
 8002f70:	89ba      	ldrh	r2, [r7, #12]
 8002f72:	4946      	ldr	r1, [pc, #280]	; (800308c <GUI_DrawFont32+0x160>)
 8002f74:	4613      	mov	r3, r2
 8002f76:	019b      	lsls	r3, r3, #6
 8002f78:	4413      	add	r3, r2
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3301      	adds	r3, #1
 8002f80:	781a      	ldrb	r2, [r3, #0]
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	3301      	adds	r3, #1
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d167      	bne.n	800305c <GUI_DrawFont32+0x130>
			  { 	LCD_SetWindows(x,y,x+32-1,y+32-1);
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	331f      	adds	r3, #31
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	88bb      	ldrh	r3, [r7, #4]
 8002f94:	331f      	adds	r3, #31
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	88b9      	ldrh	r1, [r7, #4]
 8002f9a:	88f8      	ldrh	r0, [r7, #6]
 8002f9c:	f000 fc5e 	bl	800385c <LCD_SetWindows>
				    for(i=0;i<32*4;i++)
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	73fb      	strb	r3, [r7, #15]
 8002fa4:	e056      	b.n	8003054 <GUI_DrawFont32+0x128>
				    {
						for(j=0;j<8;j++)
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	73bb      	strb	r3, [r7, #14]
 8002faa:	e04d      	b.n	8003048 <GUI_DrawFont32+0x11c>
				    	{
							if(!mode) //�ǵ��ӷ�ʽ
 8002fac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d11c      	bne.n	8002fee <GUI_DrawFont32+0xc2>
							{
								if(tfont32[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 8002fb4:	89ba      	ldrh	r2, [r7, #12]
 8002fb6:	7bf9      	ldrb	r1, [r7, #15]
 8002fb8:	4834      	ldr	r0, [pc, #208]	; (800308c <GUI_DrawFont32+0x160>)
 8002fba:	4613      	mov	r3, r2
 8002fbc:	019b      	lsls	r3, r3, #6
 8002fbe:	4413      	add	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	4403      	add	r3, r0
 8002fc4:	440b      	add	r3, r1
 8002fc6:	3302      	adds	r3, #2
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	4619      	mov	r1, r3
 8002fcc:	7bbb      	ldrb	r3, [r7, #14]
 8002fce:	2280      	movs	r2, #128	; 0x80
 8002fd0:	fa42 f303 	asr.w	r3, r2, r3
 8002fd4:	400b      	ands	r3, r1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d004      	beq.n	8002fe4 <GUI_DrawFont32+0xb8>
 8002fda:	887b      	ldrh	r3, [r7, #2]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 f9fb 	bl	80033d8 <Lcd_WriteData_16Bit>
 8002fe2:	e02e      	b.n	8003042 <GUI_DrawFont32+0x116>
								else Lcd_WriteData_16Bit(bc);
 8002fe4:	883b      	ldrh	r3, [r7, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f9f6 	bl	80033d8 <Lcd_WriteData_16Bit>
 8002fec:	e029      	b.n	8003042 <GUI_DrawFont32+0x116>
							}
							else
							{
								POINT_COLOR=fc;
 8002fee:	4a28      	ldr	r2, [pc, #160]	; (8003090 <GUI_DrawFont32+0x164>)
 8002ff0:	887b      	ldrh	r3, [r7, #2]
 8002ff2:	8013      	strh	r3, [r2, #0]
								if(tfont32[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 8002ff4:	89ba      	ldrh	r2, [r7, #12]
 8002ff6:	7bf9      	ldrb	r1, [r7, #15]
 8002ff8:	4824      	ldr	r0, [pc, #144]	; (800308c <GUI_DrawFont32+0x160>)
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	019b      	lsls	r3, r3, #6
 8002ffe:	4413      	add	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	4403      	add	r3, r0
 8003004:	440b      	add	r3, r1
 8003006:	3302      	adds	r3, #2
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	4619      	mov	r1, r3
 800300c:	7bbb      	ldrb	r3, [r7, #14]
 800300e:	2280      	movs	r2, #128	; 0x80
 8003010:	fa42 f303 	asr.w	r3, r2, r3
 8003014:	400b      	ands	r3, r1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <GUI_DrawFont32+0xfa>
 800301a:	88ba      	ldrh	r2, [r7, #4]
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	4611      	mov	r1, r2
 8003020:	4618      	mov	r0, r3
 8003022:	f000 fa0f 	bl	8003444 <LCD_DrawPoint>
								x++;
 8003026:	88fb      	ldrh	r3, [r7, #6]
 8003028:	3301      	adds	r3, #1
 800302a:	80fb      	strh	r3, [r7, #6]
								if((x-x0)==32)
 800302c:	88fa      	ldrh	r2, [r7, #6]
 800302e:	897b      	ldrh	r3, [r7, #10]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b20      	cmp	r3, #32
 8003034:	d105      	bne.n	8003042 <GUI_DrawFont32+0x116>
								{
									x=x0;
 8003036:	897b      	ldrh	r3, [r7, #10]
 8003038:	80fb      	strh	r3, [r7, #6]
									y++;
 800303a:	88bb      	ldrh	r3, [r7, #4]
 800303c:	3301      	adds	r3, #1
 800303e:	80bb      	strh	r3, [r7, #4]
									break;
 8003040:	e005      	b.n	800304e <GUI_DrawFont32+0x122>
						for(j=0;j<8;j++)
 8003042:	7bbb      	ldrb	r3, [r7, #14]
 8003044:	3301      	adds	r3, #1
 8003046:	73bb      	strb	r3, [r7, #14]
 8003048:	7bbb      	ldrb	r3, [r7, #14]
 800304a:	2b07      	cmp	r3, #7
 800304c:	d9ae      	bls.n	8002fac <GUI_DrawFont32+0x80>
				    for(i=0;i<32*4;i++)
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	3301      	adds	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
 8003054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003058:	2b00      	cmp	r3, #0
 800305a:	daa4      	bge.n	8002fa6 <GUI_DrawFont32+0x7a>
	for (k=0;k<HZnum;k++) 
 800305c:	89bb      	ldrh	r3, [r7, #12]
 800305e:	3301      	adds	r3, #1
 8003060:	81bb      	strh	r3, [r7, #12]
 8003062:	89ba      	ldrh	r2, [r7, #12]
 8003064:	893b      	ldrh	r3, [r7, #8]
 8003066:	429a      	cmp	r2, r3
 8003068:	f4ff af76 	bcc.w	8002f58 <GUI_DrawFont32+0x2c>
					
				}				  	
				continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
			}
	
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��  
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <GUI_DrawFont32+0x168>)
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	4b07      	ldr	r3, [pc, #28]	; (8003094 <GUI_DrawFont32+0x168>)
 8003076:	885b      	ldrh	r3, [r3, #2]
 8003078:	3b01      	subs	r3, #1
 800307a:	b29b      	uxth	r3, r3
 800307c:	2100      	movs	r1, #0
 800307e:	2000      	movs	r0, #0
 8003080:	f000 fbec 	bl	800385c <LCD_SetWindows>
} 
 8003084:	bf00      	nop
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	bd90      	pop	{r4, r7, pc}
 800308c:	08007cf4 	.word	0x08007cf4
 8003090:	2000011e 	.word	0x2000011e
 8003094:	20000110 	.word	0x20000110

08003098 <Show_Str>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/	   		   
void Show_Str(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{					
 8003098:	b5b0      	push	{r4, r5, r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af04      	add	r7, sp, #16
 800309e:	4604      	mov	r4, r0
 80030a0:	4608      	mov	r0, r1
 80030a2:	4611      	mov	r1, r2
 80030a4:	461a      	mov	r2, r3
 80030a6:	4623      	mov	r3, r4
 80030a8:	80fb      	strh	r3, [r7, #6]
 80030aa:	4603      	mov	r3, r0
 80030ac:	80bb      	strh	r3, [r7, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	807b      	strh	r3, [r7, #2]
 80030b2:	4613      	mov	r3, r2
 80030b4:	803b      	strh	r3, [r7, #0]
	u16 x0=x;							  	  
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	81bb      	strh	r3, [r7, #12]
  	u8 bHz=0;     //�ַ��������� 
 80030ba:	2300      	movs	r3, #0
 80030bc:	73fb      	strb	r3, [r7, #15]
    while(*str!=0)//����δ����
 80030be:	e0af      	b.n	8003220 <Show_Str+0x188>
    { 
        if(!bHz)
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d161      	bne.n	800318a <Show_Str+0xf2>
        {
			if(x>(lcddev.width-size/2)||y>(lcddev.height-size)) 
 80030c6:	88fa      	ldrh	r2, [r7, #6]
 80030c8:	4b5b      	ldr	r3, [pc, #364]	; (8003238 <Show_Str+0x1a0>)
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	4619      	mov	r1, r3
 80030ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030d2:	085b      	lsrs	r3, r3, #1
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	1acb      	subs	r3, r1, r3
 80030d8:	429a      	cmp	r2, r3
 80030da:	f300 80a7 	bgt.w	800322c <Show_Str+0x194>
 80030de:	88ba      	ldrh	r2, [r7, #4]
 80030e0:	4b55      	ldr	r3, [pc, #340]	; (8003238 <Show_Str+0x1a0>)
 80030e2:	885b      	ldrh	r3, [r3, #2]
 80030e4:	4619      	mov	r1, r3
 80030e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030ea:	1acb      	subs	r3, r1, r3
 80030ec:	429a      	cmp	r2, r3
 80030ee:	f300 809d 	bgt.w	800322c <Show_Str+0x194>
			return; 
	        if(*str>0x80)bHz=1;//���� 
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b80      	cmp	r3, #128	; 0x80
 80030f8:	d902      	bls.n	8003100 <Show_Str+0x68>
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
 80030fe:	e08f      	b.n	8003220 <Show_Str+0x188>
	        else              //�ַ�
	        {          
		        if(*str==0x0D)//���з���
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b0d      	cmp	r3, #13
 8003106:	d10b      	bne.n	8003120 <Show_Str+0x88>
		        {         
		            y+=size;
 8003108:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800310c:	b29a      	uxth	r2, r3
 800310e:	88bb      	ldrh	r3, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	80bb      	strh	r3, [r7, #4]
					x=x0;
 8003114:	89bb      	ldrh	r3, [r7, #12]
 8003116:	80fb      	strh	r3, [r7, #6]
		            str++; 
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	3301      	adds	r3, #1
 800311c:	623b      	str	r3, [r7, #32]
 800311e:	e030      	b.n	8003182 <Show_Str+0xea>
		        }  
		        else
				{
					if(size>16)//�ֿ���û�м���12X24 16X32��Ӣ������,��8X16����
 8003120:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003124:	2b10      	cmp	r3, #16
 8003126:	d913      	bls.n	8003150 <Show_Str+0xb8>
					{  
					LCD_ShowChar(x,y,fc,bc,*str,16,mode);
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	883d      	ldrh	r5, [r7, #0]
 800312e:	887c      	ldrh	r4, [r7, #2]
 8003130:	88b9      	ldrh	r1, [r7, #4]
 8003132:	88f8      	ldrh	r0, [r7, #6]
 8003134:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003138:	9202      	str	r2, [sp, #8]
 800313a:	2210      	movs	r2, #16
 800313c:	9201      	str	r2, [sp, #4]
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	462b      	mov	r3, r5
 8003142:	4622      	mov	r2, r4
 8003144:	f7ff f808 	bl	8002158 <LCD_ShowChar>
					x+=8; //�ַ�,Ϊȫ�ֵ�һ�� 
 8003148:	88fb      	ldrh	r3, [r7, #6]
 800314a:	3308      	adds	r3, #8
 800314c:	80fb      	strh	r3, [r7, #6]
 800314e:	e018      	b.n	8003182 <Show_Str+0xea>
					}
					else
					{
					LCD_ShowChar(x,y,fc,bc,*str,size,mode);
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	883d      	ldrh	r5, [r7, #0]
 8003156:	887c      	ldrh	r4, [r7, #2]
 8003158:	88b9      	ldrh	r1, [r7, #4]
 800315a:	88f8      	ldrh	r0, [r7, #6]
 800315c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003160:	9202      	str	r2, [sp, #8]
 8003162:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003166:	9201      	str	r2, [sp, #4]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	462b      	mov	r3, r5
 800316c:	4622      	mov	r2, r4
 800316e:	f7fe fff3 	bl	8002158 <LCD_ShowChar>
					x+=size/2; //�ַ�,Ϊȫ�ֵ�һ�� 
 8003172:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003176:	085b      	lsrs	r3, r3, #1
 8003178:	b2db      	uxtb	r3, r3
 800317a:	b29a      	uxth	r2, r3
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	4413      	add	r3, r2
 8003180:	80fb      	strh	r3, [r7, #6]
					}
				} 
				str++; 
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	3301      	adds	r3, #1
 8003186:	623b      	str	r3, [r7, #32]
 8003188:	e04a      	b.n	8003220 <Show_Str+0x188>
		        
	        }
        }else//���� 
        {   
			if(x>(lcddev.width-size)||y>(lcddev.height-size)) 
 800318a:	88fa      	ldrh	r2, [r7, #6]
 800318c:	4b2a      	ldr	r3, [pc, #168]	; (8003238 <Show_Str+0x1a0>)
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	4619      	mov	r1, r3
 8003192:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003196:	1acb      	subs	r3, r1, r3
 8003198:	429a      	cmp	r2, r3
 800319a:	dc49      	bgt.n	8003230 <Show_Str+0x198>
 800319c:	88ba      	ldrh	r2, [r7, #4]
 800319e:	4b26      	ldr	r3, [pc, #152]	; (8003238 <Show_Str+0x1a0>)
 80031a0:	885b      	ldrh	r3, [r3, #2]
 80031a2:	4619      	mov	r1, r3
 80031a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031a8:	1acb      	subs	r3, r1, r3
 80031aa:	429a      	cmp	r2, r3
 80031ac:	dc40      	bgt.n	8003230 <Show_Str+0x198>
			return;  
            bHz=0;//�к��ֿ�    
 80031ae:	2300      	movs	r3, #0
 80031b0:	73fb      	strb	r3, [r7, #15]
			if(size==32)
 80031b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031b6:	2b20      	cmp	r3, #32
 80031b8:	d10c      	bne.n	80031d4 <Show_Str+0x13c>
			GUI_DrawFont32(x,y,fc,bc,str,mode);	 	
 80031ba:	883c      	ldrh	r4, [r7, #0]
 80031bc:	887a      	ldrh	r2, [r7, #2]
 80031be:	88b9      	ldrh	r1, [r7, #4]
 80031c0:	88f8      	ldrh	r0, [r7, #6]
 80031c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	4623      	mov	r3, r4
 80031ce:	f7ff fead 	bl	8002f2c <GUI_DrawFont32>
 80031d2:	e01c      	b.n	800320e <Show_Str+0x176>
			else if(size==24)
 80031d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031d8:	2b18      	cmp	r3, #24
 80031da:	d10c      	bne.n	80031f6 <Show_Str+0x15e>
			GUI_DrawFont24(x,y,fc,bc,str,mode);	
 80031dc:	883c      	ldrh	r4, [r7, #0]
 80031de:	887a      	ldrh	r2, [r7, #2]
 80031e0:	88b9      	ldrh	r1, [r7, #4]
 80031e2:	88f8      	ldrh	r0, [r7, #6]
 80031e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80031e8:	9301      	str	r3, [sp, #4]
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	4623      	mov	r3, r4
 80031f0:	f7ff fdea 	bl	8002dc8 <GUI_DrawFont24>
 80031f4:	e00b      	b.n	800320e <Show_Str+0x176>
			else
			GUI_DrawFont16(x,y,fc,bc,str,mode);
 80031f6:	883c      	ldrh	r4, [r7, #0]
 80031f8:	887a      	ldrh	r2, [r7, #2]
 80031fa:	88b9      	ldrh	r1, [r7, #4]
 80031fc:	88f8      	ldrh	r0, [r7, #6]
 80031fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	4623      	mov	r3, r4
 800320a:	f7ff fd27 	bl	8002c5c <GUI_DrawFont16>
				
	        str+=2; 
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	3302      	adds	r3, #2
 8003212:	623b      	str	r3, [r7, #32]
	        x+=size;//��һ������ƫ��	    
 8003214:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003218:	b29a      	uxth	r2, r3
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	4413      	add	r3, r2
 800321e:	80fb      	strh	r3, [r7, #6]
    while(*str!=0)//����δ����
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	f47f af4b 	bne.w	80030c0 <Show_Str+0x28>
 800322a:	e002      	b.n	8003232 <Show_Str+0x19a>
			return; 
 800322c:	bf00      	nop
 800322e:	e000      	b.n	8003232 <Show_Str+0x19a>
			return;  
 8003230:	bf00      	nop
        }						 
    }   
}
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bdb0      	pop	{r4, r5, r7, pc}
 8003238:	20000110 	.word	0x20000110

0800323c <Gui_StrCenterV2>:
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 

void Gui_StrCenterV2(u16 x, u16 y,u16 width,u16 height, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b089      	sub	sp, #36	; 0x24
 8003240:	af04      	add	r7, sp, #16
 8003242:	4604      	mov	r4, r0
 8003244:	4608      	mov	r0, r1
 8003246:	4611      	mov	r1, r2
 8003248:	461a      	mov	r2, r3
 800324a:	4623      	mov	r3, r4
 800324c:	80fb      	strh	r3, [r7, #6]
 800324e:	4603      	mov	r3, r0
 8003250:	80bb      	strh	r3, [r7, #4]
 8003252:	460b      	mov	r3, r1
 8003254:	807b      	strh	r3, [r7, #2]
 8003256:	4613      	mov	r3, r2
 8003258:	803b      	strh	r3, [r7, #0]
	u16 len=strlen((const char *)str);
 800325a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800325c:	f7fc ffba 	bl	80001d4 <strlen>
 8003260:	4603      	mov	r3, r0
 8003262:	81fb      	strh	r3, [r7, #14]
	u16 x1=(width-len*(size/2))/2;
 8003264:	887a      	ldrh	r2, [r7, #2]
 8003266:	89fb      	ldrh	r3, [r7, #14]
 8003268:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800326c:	0849      	lsrs	r1, r1, #1
 800326e:	b2c9      	uxtb	r1, r1
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	0fda      	lsrs	r2, r3, #31
 8003278:	4413      	add	r3, r2
 800327a:	105b      	asrs	r3, r3, #1
 800327c:	81bb      	strh	r3, [r7, #12]
	Show_Str(x+x1,y,fc,bc,str,size,mode);
 800327e:	88fa      	ldrh	r2, [r7, #6]
 8003280:	89bb      	ldrh	r3, [r7, #12]
 8003282:	4413      	add	r3, r2
 8003284:	b298      	uxth	r0, r3
 8003286:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8003288:	8c3a      	ldrh	r2, [r7, #32]
 800328a:	88b9      	ldrh	r1, [r7, #4]
 800328c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003290:	9302      	str	r3, [sp, #8]
 8003292:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003296:	9301      	str	r3, [sp, #4]
 8003298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	4623      	mov	r3, r4
 800329e:	f7ff fefb 	bl	8003098 <Show_Str>
}
 80032a2:	bf00      	nop
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd90      	pop	{r4, r7, pc}
	...

080032ac <Gui_StrCenter>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void Gui_StrCenter(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b089      	sub	sp, #36	; 0x24
 80032b0:	af04      	add	r7, sp, #16
 80032b2:	4604      	mov	r4, r0
 80032b4:	4608      	mov	r0, r1
 80032b6:	4611      	mov	r1, r2
 80032b8:	461a      	mov	r2, r3
 80032ba:	4623      	mov	r3, r4
 80032bc:	80fb      	strh	r3, [r7, #6]
 80032be:	4603      	mov	r3, r0
 80032c0:	80bb      	strh	r3, [r7, #4]
 80032c2:	460b      	mov	r3, r1
 80032c4:	807b      	strh	r3, [r7, #2]
 80032c6:	4613      	mov	r3, r2
 80032c8:	803b      	strh	r3, [r7, #0]
	u16 len=strlen((const char *)str);
 80032ca:	6a38      	ldr	r0, [r7, #32]
 80032cc:	f7fc ff82 	bl	80001d4 <strlen>
 80032d0:	4603      	mov	r3, r0
 80032d2:	81fb      	strh	r3, [r7, #14]
	u16 x1=(lcddev.width-len*(size/2))/2;
 80032d4:	4b10      	ldr	r3, [pc, #64]	; (8003318 <Gui_StrCenter+0x6c>)
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	4619      	mov	r1, r3
 80032da:	89fb      	ldrh	r3, [r7, #14]
 80032dc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80032e0:	0852      	lsrs	r2, r2, #1
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	fb02 f303 	mul.w	r3, r2, r3
 80032e8:	1acb      	subs	r3, r1, r3
 80032ea:	0fda      	lsrs	r2, r3, #31
 80032ec:	4413      	add	r3, r2
 80032ee:	105b      	asrs	r3, r3, #1
 80032f0:	81bb      	strh	r3, [r7, #12]
	Show_Str(x1,y,fc,bc,str,size,mode);
 80032f2:	883c      	ldrh	r4, [r7, #0]
 80032f4:	887a      	ldrh	r2, [r7, #2]
 80032f6:	88b9      	ldrh	r1, [r7, #4]
 80032f8:	89b8      	ldrh	r0, [r7, #12]
 80032fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80032fe:	9302      	str	r3, [sp, #8]
 8003300:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003304:	9301      	str	r3, [sp, #4]
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	4623      	mov	r3, r4
 800330c:	f7ff fec4 	bl	8003098 <Show_Str>
} 
 8003310:	bf00      	nop
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	bd90      	pop	{r4, r7, pc}
 8003318:	20000110 	.word	0x20000110

0800331c <LCD_WR_REG>:
 * @function   :Write an 8-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u8 data)
{ 
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;     
 8003326:	4b09      	ldr	r3, [pc, #36]	; (800334c <LCD_WR_REG+0x30>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
	 LCD_RS_CLR;	  
 800332c:	4b08      	ldr	r3, [pc, #32]	; (8003350 <LCD_WR_REG+0x34>)
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
   SPI_WriteByte(SPI1,data);
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	4619      	mov	r1, r3
 8003336:	4807      	ldr	r0, [pc, #28]	; (8003354 <LCD_WR_REG+0x38>)
 8003338:	f002 fe80 	bl	800603c <SPI_WriteByte>
   LCD_CS_SET;	
 800333c:	4b03      	ldr	r3, [pc, #12]	; (800334c <LCD_WR_REG+0x30>)
 800333e:	2201      	movs	r2, #1
 8003340:	601a      	str	r2, [r3, #0]
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	424082bc 	.word	0x424082bc
 8003350:	424082b8 	.word	0x424082b8
 8003354:	40013000 	.word	0x40013000

08003358 <LCD_WR_DATA>:
 * @function   :Write an 8-bit data to the LCD screen
 * @parameters :data:data value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_DATA(u8 data)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;
 8003362:	4b09      	ldr	r3, [pc, #36]	; (8003388 <LCD_WR_DATA+0x30>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
	 LCD_RS_SET;
 8003368:	4b08      	ldr	r3, [pc, #32]	; (800338c <LCD_WR_DATA+0x34>)
 800336a:	2201      	movs	r2, #1
 800336c:	601a      	str	r2, [r3, #0]
   SPI_WriteByte(SPI1,data);
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	4619      	mov	r1, r3
 8003372:	4807      	ldr	r0, [pc, #28]	; (8003390 <LCD_WR_DATA+0x38>)
 8003374:	f002 fe62 	bl	800603c <SPI_WriteByte>
   LCD_CS_SET;
 8003378:	4b03      	ldr	r3, [pc, #12]	; (8003388 <LCD_WR_DATA+0x30>)
 800337a:	2201      	movs	r2, #1
 800337c:	601a      	str	r2, [r3, #0]
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	424082bc 	.word	0x424082bc
 800338c:	424082b8 	.word	0x424082b8
 8003390:	40013000 	.word	0x40013000

08003394 <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u8 LCD_Reg, u16 LCD_RegValue)
{	
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	460a      	mov	r2, r1
 800339e:	71fb      	strb	r3, [r7, #7]
 80033a0:	4613      	mov	r3, r2
 80033a2:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);  
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff ffb8 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);	    		 
 80033ac:	88bb      	ldrh	r3, [r7, #4]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff ffd1 	bl	8003358 <LCD_WR_DATA>
}	   
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 
void LCD_WriteRAM_Prepare(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 80033c4:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <LCD_WriteRAM_Prepare+0x14>)
 80033c6:	891b      	ldrh	r3, [r3, #8]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff ffa6 	bl	800331c <LCD_WR_REG>
}	 
 80033d0:	bf00      	nop
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	20000110 	.word	0x20000110

080033d8 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/	 
void Lcd_WriteData_16Bit(u16 Data)
{	
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	80fb      	strh	r3, [r7, #6]
   LCD_CS_CLR;
 80033e2:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <Lcd_WriteData_16Bit+0x40>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
   LCD_RS_SET;  
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <Lcd_WriteData_16Bit+0x44>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	601a      	str	r2, [r3, #0]
   SPI_WriteByte(SPI1,Data>>8);
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	0a1b      	lsrs	r3, r3, #8
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	4619      	mov	r1, r3
 80033f8:	4809      	ldr	r0, [pc, #36]	; (8003420 <Lcd_WriteData_16Bit+0x48>)
 80033fa:	f002 fe1f 	bl	800603c <SPI_WriteByte>
	 SPI_WriteByte(SPI1,Data);
 80033fe:	88fb      	ldrh	r3, [r7, #6]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	4619      	mov	r1, r3
 8003404:	4806      	ldr	r0, [pc, #24]	; (8003420 <Lcd_WriteData_16Bit+0x48>)
 8003406:	f002 fe19 	bl	800603c <SPI_WriteByte>
   LCD_CS_SET;
 800340a:	4b03      	ldr	r3, [pc, #12]	; (8003418 <Lcd_WriteData_16Bit+0x40>)
 800340c:	2201      	movs	r2, #1
 800340e:	601a      	str	r2, [r3, #0]
}
 8003410:	bf00      	nop
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	424082bc 	.word	0x424082bc
 800341c:	424082b8 	.word	0x424082b8
 8003420:	40013000 	.word	0x40013000

08003424 <LCD_SetColorPoint>:
 * @function   :Set color of point
 * @parameters :color
 * @retvalue   :None
******************************************************************************/
void LCD_SetColorPoint(u16 color)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	80fb      	strh	r3, [r7, #6]
	POINT_COLOR = color;
 800342e:	4a04      	ldr	r2, [pc, #16]	; (8003440 <LCD_SetColorPoint+0x1c>)
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	8013      	strh	r3, [r2, #0]
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	2000011e 	.word	0x2000011e

08003444 <LCD_DrawPoint>:
 * @parameters :x:the x coordinate of the pixel
                y:the y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/	
void LCD_DrawPoint(u16 x,u16 y)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	460a      	mov	r2, r1
 800344e:	80fb      	strh	r3, [r7, #6]
 8003450:	4613      	mov	r3, r2
 8003452:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);//���ù��λ�� 
 8003454:	88ba      	ldrh	r2, [r7, #4]
 8003456:	88fb      	ldrh	r3, [r7, #6]
 8003458:	4611      	mov	r1, r2
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fa52 	bl	8003904 <LCD_SetCursor>
	Lcd_WriteData_16Bit(POINT_COLOR); 
 8003460:	4b04      	ldr	r3, [pc, #16]	; (8003474 <LCD_DrawPoint+0x30>)
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff ffb7 	bl	80033d8 <Lcd_WriteData_16Bit>
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	2000011e 	.word	0x2000011e

08003478 <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/	
void LCD_Clear(u16 Color)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	80fb      	strh	r3, [r7, #6]
  unsigned int i,m;  
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);   
 8003482:	4b1a      	ldr	r3, [pc, #104]	; (80034ec <LCD_Clear+0x74>)
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	4b18      	ldr	r3, [pc, #96]	; (80034ec <LCD_Clear+0x74>)
 800348c:	885b      	ldrh	r3, [r3, #2]
 800348e:	3b01      	subs	r3, #1
 8003490:	b29b      	uxth	r3, r3
 8003492:	2100      	movs	r1, #0
 8003494:	2000      	movs	r0, #0
 8003496:	f000 f9e1 	bl	800385c <LCD_SetWindows>
	LCD_CS_CLR;
 800349a:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <LCD_Clear+0x78>)
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
	LCD_RS_SET;
 80034a0:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <LCD_Clear+0x7c>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	601a      	str	r2, [r3, #0]
	for(i=0;i<lcddev.height;i++)
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	e012      	b.n	80034d2 <LCD_Clear+0x5a>
	{
    for(m=0;m<lcddev.width;m++)
 80034ac:	2300      	movs	r3, #0
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	e006      	b.n	80034c0 <LCD_Clear+0x48>
    {	
			Lcd_WriteData_16Bit(Color);
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff ff8f 	bl	80033d8 <Lcd_WriteData_16Bit>
    for(m=0;m<lcddev.width;m++)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	3301      	adds	r3, #1
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <LCD_Clear+0x74>)
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d3f2      	bcc.n	80034b2 <LCD_Clear+0x3a>
	for(i=0;i<lcddev.height;i++)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	3301      	adds	r3, #1
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	4b06      	ldr	r3, [pc, #24]	; (80034ec <LCD_Clear+0x74>)
 80034d4:	885b      	ldrh	r3, [r3, #2]
 80034d6:	461a      	mov	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4293      	cmp	r3, r2
 80034dc:	d3e6      	bcc.n	80034ac <LCD_Clear+0x34>
		}
	}
	 LCD_CS_SET;
 80034de:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <LCD_Clear+0x78>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
} 
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20000110 	.word	0x20000110
 80034f0:	424082bc 	.word	0x424082bc
 80034f4:	424082b8 	.word	0x424082b8

080034f8 <LCD_ClearCursor>:
								wXe:the ending x coordinate of the specified area
								wYe:the ending y coordinate of the specified area
 * @retvalue   :None
******************************************************************************/
void LCD_ClearCursor(u16 wXs,u16 wYs,u16 wXe,u16 wYe,u16 wColor)
{
 80034f8:	b590      	push	{r4, r7, lr}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4604      	mov	r4, r0
 8003500:	4608      	mov	r0, r1
 8003502:	4611      	mov	r1, r2
 8003504:	461a      	mov	r2, r3
 8003506:	4623      	mov	r3, r4
 8003508:	80fb      	strh	r3, [r7, #6]
 800350a:	4603      	mov	r3, r0
 800350c:	80bb      	strh	r3, [r7, #4]
 800350e:	460b      	mov	r3, r1
 8003510:	807b      	strh	r3, [r7, #2]
 8003512:	4613      	mov	r3, r2
 8003514:	803b      	strh	r3, [r7, #0]
	  unsigned int i,m;
		u16 width=wXe-wXs-1;
 8003516:	887a      	ldrh	r2, [r7, #2]
 8003518:	88fb      	ldrh	r3, [r7, #6]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	81fb      	strh	r3, [r7, #14]
		u16 height=wYe-wYs-1;
 8003522:	883a      	ldrh	r2, [r7, #0]
 8003524:	88bb      	ldrh	r3, [r7, #4]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	81bb      	strh	r3, [r7, #12]
		LCD_SetWindows(wXs,wYs,wXe,wYe);
 800352e:	883b      	ldrh	r3, [r7, #0]
 8003530:	887a      	ldrh	r2, [r7, #2]
 8003532:	88b9      	ldrh	r1, [r7, #4]
 8003534:	88f8      	ldrh	r0, [r7, #6]
 8003536:	f000 f991 	bl	800385c <LCD_SetWindows>
		LCD_CS_CLR;
 800353a:	4b18      	ldr	r3, [pc, #96]	; (800359c <LCD_ClearCursor+0xa4>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
		LCD_RS_SET;
 8003540:	4b17      	ldr	r3, [pc, #92]	; (80035a0 <LCD_ClearCursor+0xa8>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]
		for(i=0;i<height;i++)
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	e010      	b.n	800356e <LCD_ClearCursor+0x76>
		{
	    for(m=0;m<width;m++)
 800354c:	2300      	movs	r3, #0
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	e006      	b.n	8003560 <LCD_ClearCursor+0x68>
	    {
				Lcd_WriteData_16Bit(wColor);
 8003552:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff3f 	bl	80033d8 <Lcd_WriteData_16Bit>
	    for(m=0;m<width;m++)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	3301      	adds	r3, #1
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	89fb      	ldrh	r3, [r7, #14]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	429a      	cmp	r2, r3
 8003566:	d3f4      	bcc.n	8003552 <LCD_ClearCursor+0x5a>
		for(i=0;i<height;i++)
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	3301      	adds	r3, #1
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	89bb      	ldrh	r3, [r7, #12]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	429a      	cmp	r2, r3
 8003574:	d3ea      	bcc.n	800354c <LCD_ClearCursor+0x54>
			}
		}
		 LCD_CS_SET;
 8003576:	4b09      	ldr	r3, [pc, #36]	; (800359c <LCD_ClearCursor+0xa4>)
 8003578:	2201      	movs	r2, #1
 800357a:	601a      	str	r2, [r3, #0]
		 LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
 800357c:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <LCD_ClearCursor+0xac>)
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	4b07      	ldr	r3, [pc, #28]	; (80035a4 <LCD_ClearCursor+0xac>)
 8003586:	885b      	ldrh	r3, [r3, #2]
 8003588:	3b01      	subs	r3, #1
 800358a:	b29b      	uxth	r3, r3
 800358c:	2100      	movs	r1, #0
 800358e:	2000      	movs	r0, #0
 8003590:	f000 f964 	bl	800385c <LCD_SetWindows>
}
 8003594:	bf00      	nop
 8003596:	371c      	adds	r7, #28
 8003598:	46bd      	mov	sp, r7
 800359a:	bd90      	pop	{r4, r7, pc}
 800359c:	424082bc 	.word	0x424082bc
 80035a0:	424082b8 	.word	0x424082b8
 80035a4:	20000110 	.word	0x20000110

080035a8 <LCD_GPIOInit>:
 * @function   :Initialization LCD screen GPIO
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	
void LCD_GPIOInit(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStructure;
	      
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB ,ENABLE);
 80035ae:	2101      	movs	r1, #1
 80035b0:	2002      	movs	r0, #2
 80035b2:	f7fd f8df 	bl	8000774 <RCC_AHB1PeriphClockCmd>
	
	GPIO_InitStructure.GPIO_Pin =  RST_GPIO| LED_GPIO|RS_GPIO| CS_GPIO;
 80035b6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80035ba:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80035bc:	2301      	movs	r3, #1
 80035be:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80035c0:	2303      	movs	r3, #3
 80035c2:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80035c4:	2300      	movs	r3, #0
 80035c6:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80035c8:	2301      	movs	r3, #1
 80035ca:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(LCD_PORT, &GPIO_InitStructure);
 80035cc:	463b      	mov	r3, r7
 80035ce:	4619      	mov	r1, r3
 80035d0:	4803      	ldr	r0, [pc, #12]	; (80035e0 <LCD_GPIOInit+0x38>)
 80035d2:	f7fc ff11 	bl	80003f8 <GPIO_Init>
}
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40020400 	.word	0x40020400

080035e4 <LCD_RESET>:
 * @function   :Reset LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	
void LCD_RESET(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
	LCD_RST_CLR;
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <LCD_RESET+0x20>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
	delay_ms(100);
 80035ee:	2064      	movs	r0, #100	; 0x64
 80035f0:	f002 fe45 	bl	800627e <delay_ms>
	LCD_RST_SET;
 80035f4:	4b03      	ldr	r3, [pc, #12]	; (8003604 <LCD_RESET+0x20>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	601a      	str	r2, [r3, #0]
	delay_ms(50);
 80035fa:	2032      	movs	r0, #50	; 0x32
 80035fc:	f002 fe3f 	bl	800627e <delay_ms>
}
 8003600:	bf00      	nop
 8003602:	bd80      	pop	{r7, pc}
 8003604:	424082b0 	.word	0x424082b0

08003608 <LCD_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 	 
void LCD_Init(void)
{  
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
	SPI1_Init(); //Ӳ��SPI��ʼ��
 800360c:	f002 fd3a 	bl	8006084 <SPI1_Init>
	//SPI_SetSpeed(SPI1,SPI_BaudRatePrescaler_2);
	LCD_GPIOInit();//LCD GPIO��ʼ��										 
 8003610:	f7ff ffca 	bl	80035a8 <LCD_GPIOInit>
 	LCD_RESET(); //LCD ��λ
 8003614:	f7ff ffe6 	bl	80035e4 <LCD_RESET>
//*************3.2inch ILI9341��ʼ��**********//	
	LCD_WR_REG(0xCF);  
 8003618:	20cf      	movs	r0, #207	; 0xcf
 800361a:	f7ff fe7f 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 800361e:	2000      	movs	r0, #0
 8003620:	f7ff fe9a 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0xD9); //C1 
 8003624:	20d9      	movs	r0, #217	; 0xd9
 8003626:	f7ff fe97 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0X30); 
 800362a:	2030      	movs	r0, #48	; 0x30
 800362c:	f7ff fe94 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_REG(0xED);  
 8003630:	20ed      	movs	r0, #237	; 0xed
 8003632:	f7ff fe73 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(0x64); 
 8003636:	2064      	movs	r0, #100	; 0x64
 8003638:	f7ff fe8e 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x03); 
 800363c:	2003      	movs	r0, #3
 800363e:	f7ff fe8b 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0X12); 
 8003642:	2012      	movs	r0, #18
 8003644:	f7ff fe88 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0X81); 
 8003648:	2081      	movs	r0, #129	; 0x81
 800364a:	f7ff fe85 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);  
 800364e:	20e8      	movs	r0, #232	; 0xe8
 8003650:	f7ff fe64 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(0x85); 
 8003654:	2085      	movs	r0, #133	; 0x85
 8003656:	f7ff fe7f 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x10); 
 800365a:	2010      	movs	r0, #16
 800365c:	f7ff fe7c 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A); 
 8003660:	207a      	movs	r0, #122	; 0x7a
 8003662:	f7ff fe79 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);  
 8003666:	20cb      	movs	r0, #203	; 0xcb
 8003668:	f7ff fe58 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(0x39); 
 800366c:	2039      	movs	r0, #57	; 0x39
 800366e:	f7ff fe73 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C); 
 8003672:	202c      	movs	r0, #44	; 0x2c
 8003674:	f7ff fe70 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 8003678:	2000      	movs	r0, #0
 800367a:	f7ff fe6d 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x34); 
 800367e:	2034      	movs	r0, #52	; 0x34
 8003680:	f7ff fe6a 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x02); 
 8003684:	2002      	movs	r0, #2
 8003686:	f7ff fe67 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);  
 800368a:	20f7      	movs	r0, #247	; 0xf7
 800368c:	f7ff fe46 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(0x20); 
 8003690:	2020      	movs	r0, #32
 8003692:	f7ff fe61 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);  
 8003696:	20ea      	movs	r0, #234	; 0xea
 8003698:	f7ff fe40 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 800369c:	2000      	movs	r0, #0
 800369e:	f7ff fe5b 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 80036a2:	2000      	movs	r0, #0
 80036a4:	f7ff fe58 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control 
 80036a8:	20c0      	movs	r0, #192	; 0xc0
 80036aa:	f7ff fe37 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0] 
 80036ae:	201b      	movs	r0, #27
 80036b0:	f7ff fe52 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control 
 80036b4:	20c1      	movs	r0, #193	; 0xc1
 80036b6:	f7ff fe31 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(0x12);   //SAP[2:0];BT[3:0] //0x01
 80036ba:	2012      	movs	r0, #18
 80036bc:	f7ff fe4c 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control 
 80036c0:	20c5      	movs	r0, #197	; 0xc5
 80036c2:	f7ff fe2b 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(0x26); 	 //3F
 80036c6:	2026      	movs	r0, #38	; 0x26
 80036c8:	f7ff fe46 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x26); 	 //3C
 80036cc:	2026      	movs	r0, #38	; 0x26
 80036ce:	f7ff fe43 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2 
 80036d2:	20c7      	movs	r0, #199	; 0xc7
 80036d4:	f7ff fe22 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(0XB0); 
 80036d8:	20b0      	movs	r0, #176	; 0xb0
 80036da:	f7ff fe3d 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control 
 80036de:	2036      	movs	r0, #54	; 0x36
 80036e0:	f7ff fe1c 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(0x08); 
 80036e4:	2008      	movs	r0, #8
 80036e6:	f7ff fe37 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);   
 80036ea:	203a      	movs	r0, #58	; 0x3a
 80036ec:	f7ff fe16 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(0x55); 
 80036f0:	2055      	movs	r0, #85	; 0x55
 80036f2:	f7ff fe31 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);   
 80036f6:	20b1      	movs	r0, #177	; 0xb1
 80036f8:	f7ff fe10 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(0x00);   
 80036fc:	2000      	movs	r0, #0
 80036fe:	f7ff fe2b 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A); 
 8003702:	201a      	movs	r0, #26
 8003704:	f7ff fe28 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control 
 8003708:	20b6      	movs	r0, #182	; 0xb6
 800370a:	f7ff fe07 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(0x0A); 
 800370e:	200a      	movs	r0, #10
 8003710:	f7ff fe22 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2); 
 8003714:	20a2      	movs	r0, #162	; 0xa2
 8003716:	f7ff fe1f 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 800371a:	20f2      	movs	r0, #242	; 0xf2
 800371c:	f7ff fdfe 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8003720:	2000      	movs	r0, #0
 8003722:	f7ff fe19 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected 
 8003726:	2026      	movs	r0, #38	; 0x26
 8003728:	f7ff fdf8 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(0x01); 
 800372c:	2001      	movs	r0, #1
 800372e:	f7ff fe13 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_REG(0xE0); //Set Gamma
 8003732:	20e0      	movs	r0, #224	; 0xe0
 8003734:	f7ff fdf2 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(0x1F);
 8003738:	201f      	movs	r0, #31
 800373a:	f7ff fe0d 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x24);
 800373e:	2024      	movs	r0, #36	; 0x24
 8003740:	f7ff fe0a 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x24);
 8003744:	2024      	movs	r0, #36	; 0x24
 8003746:	f7ff fe07 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x0D);
 800374a:	200d      	movs	r0, #13
 800374c:	f7ff fe04 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x12);
 8003750:	2012      	movs	r0, #18
 8003752:	f7ff fe01 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x09);
 8003756:	2009      	movs	r0, #9
 8003758:	f7ff fdfe 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x52);
 800375c:	2052      	movs	r0, #82	; 0x52
 800375e:	f7ff fdfb 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0xB7);
 8003762:	20b7      	movs	r0, #183	; 0xb7
 8003764:	f7ff fdf8 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8003768:	203f      	movs	r0, #63	; 0x3f
 800376a:	f7ff fdf5 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x0C);
 800376e:	200c      	movs	r0, #12
 8003770:	f7ff fdf2 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8003774:	2015      	movs	r0, #21
 8003776:	f7ff fdef 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800377a:	2006      	movs	r0, #6
 800377c:	f7ff fdec 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8003780:	200e      	movs	r0, #14
 8003782:	f7ff fde9 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8003786:	2008      	movs	r0, #8
 8003788:	f7ff fde6 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800378c:	2000      	movs	r0, #0
 800378e:	f7ff fde3 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_REG(0XE1); //Set Gamma
 8003792:	20e1      	movs	r0, #225	; 0xe1
 8003794:	f7ff fdc2 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003798:	2000      	movs	r0, #0
 800379a:	f7ff fddd 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x1B);
 800379e:	201b      	movs	r0, #27
 80037a0:	f7ff fdda 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x1B);
 80037a4:	201b      	movs	r0, #27
 80037a6:	f7ff fdd7 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80037aa:	2002      	movs	r0, #2
 80037ac:	f7ff fdd4 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80037b0:	200e      	movs	r0, #14
 80037b2:	f7ff fdd1 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80037b6:	2006      	movs	r0, #6
 80037b8:	f7ff fdce 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x2E);
 80037bc:	202e      	movs	r0, #46	; 0x2e
 80037be:	f7ff fdcb 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x48);
 80037c2:	2048      	movs	r0, #72	; 0x48
 80037c4:	f7ff fdc8 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80037c8:	203f      	movs	r0, #63	; 0x3f
 80037ca:	f7ff fdc5 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80037ce:	2003      	movs	r0, #3
 80037d0:	f7ff fdc2 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80037d4:	200a      	movs	r0, #10
 80037d6:	f7ff fdbf 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x09);
 80037da:	2009      	movs	r0, #9
 80037dc:	f7ff fdbc 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x31);
 80037e0:	2031      	movs	r0, #49	; 0x31
 80037e2:	f7ff fdb9 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x37);
 80037e6:	2037      	movs	r0, #55	; 0x37
 80037e8:	f7ff fdb6 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x1F);
 80037ec:	201f      	movs	r0, #31
 80037ee:	f7ff fdb3 	bl	8003358 <LCD_WR_DATA>

	LCD_WR_REG(0x2B); 
 80037f2:	202b      	movs	r0, #43	; 0x2b
 80037f4:	f7ff fd92 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80037f8:	2000      	movs	r0, #0
 80037fa:	f7ff fdad 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80037fe:	2000      	movs	r0, #0
 8003800:	f7ff fdaa 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8003804:	2001      	movs	r0, #1
 8003806:	f7ff fda7 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800380a:	203f      	movs	r0, #63	; 0x3f
 800380c:	f7ff fda4 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_REG(0x2A); 
 8003810:	202a      	movs	r0, #42	; 0x2a
 8003812:	f7ff fd83 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003816:	2000      	movs	r0, #0
 8003818:	f7ff fd9e 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800381c:	2000      	movs	r0, #0
 800381e:	f7ff fd9b 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003822:	2000      	movs	r0, #0
 8003824:	f7ff fd98 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);	 
 8003828:	20ef      	movs	r0, #239	; 0xef
 800382a:	f7ff fd95 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800382e:	2011      	movs	r0, #17
 8003830:	f7ff fd74 	bl	800331c <LCD_WR_REG>
	delay_ms(120);
 8003834:	2078      	movs	r0, #120	; 0x78
 8003836:	f002 fd22 	bl	800627e <delay_ms>
	LCD_WR_REG(0x29); //display on		
 800383a:	2029      	movs	r0, #41	; 0x29
 800383c:	f7ff fd6e 	bl	800331c <LCD_WR_REG>

	LCD_direction(USE_HORIZONTAL);
 8003840:	2000      	movs	r0, #0
 8003842:	f000 f871 	bl	8003928 <LCD_direction>
	LCD_LED=1;
 8003846:	4b04      	ldr	r3, [pc, #16]	; (8003858 <LCD_Init+0x250>)
 8003848:	2201      	movs	r2, #1
 800384a:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 800384c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003850:	f7ff fe12 	bl	8003478 <LCD_Clear>
}
 8003854:	bf00      	nop
 8003856:	bd80      	pop	{r7, pc}
 8003858:	424082b4 	.word	0x424082b4

0800385c <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{	
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	4604      	mov	r4, r0
 8003864:	4608      	mov	r0, r1
 8003866:	4611      	mov	r1, r2
 8003868:	461a      	mov	r2, r3
 800386a:	4623      	mov	r3, r4
 800386c:	80fb      	strh	r3, [r7, #6]
 800386e:	4603      	mov	r3, r0
 8003870:	80bb      	strh	r3, [r7, #4]
 8003872:	460b      	mov	r3, r1
 8003874:	807b      	strh	r3, [r7, #2]
 8003876:	4613      	mov	r3, r2
 8003878:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);	
 800387a:	4b21      	ldr	r3, [pc, #132]	; (8003900 <LCD_SetWindows+0xa4>)
 800387c:	895b      	ldrh	r3, [r3, #10]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff fd4b 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 8003886:	88fb      	ldrh	r3, [r7, #6]
 8003888:	0a1b      	lsrs	r3, r3, #8
 800388a:	b29b      	uxth	r3, r3
 800388c:	b2db      	uxtb	r3, r3
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff fd62 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xStar);		
 8003894:	88fb      	ldrh	r3, [r7, #6]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fd5d 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(xEnd>>8);
 800389e:	887b      	ldrh	r3, [r7, #2]
 80038a0:	0a1b      	lsrs	r3, r3, #8
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff fd56 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xEnd);
 80038ac:	887b      	ldrh	r3, [r7, #2]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fd51 	bl	8003358 <LCD_WR_DATA>

	LCD_WR_REG(lcddev.setycmd);	
 80038b6:	4b12      	ldr	r3, [pc, #72]	; (8003900 <LCD_SetWindows+0xa4>)
 80038b8:	899b      	ldrh	r3, [r3, #12]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff fd2d 	bl	800331c <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 80038c2:	88bb      	ldrh	r3, [r7, #4]
 80038c4:	0a1b      	lsrs	r3, r3, #8
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fd44 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yStar);		
 80038d0:	88bb      	ldrh	r3, [r7, #4]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff fd3f 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(yEnd>>8);
 80038da:	883b      	ldrh	r3, [r7, #0]
 80038dc:	0a1b      	lsrs	r3, r3, #8
 80038de:	b29b      	uxth	r3, r3
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff fd38 	bl	8003358 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yEnd);
 80038e8:	883b      	ldrh	r3, [r7, #0]
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fd33 	bl	8003358 <LCD_WR_DATA>

	LCD_WriteRAM_Prepare();	//��ʼд��GRAM			
 80038f2:	f7ff fd65 	bl	80033c0 <LCD_WriteRAM_Prepare>
}   
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd90      	pop	{r4, r7, pc}
 80038fe:	bf00      	nop
 8003900:	20000110 	.word	0x20000110

08003904 <LCD_SetCursor>:
 * @parameters :Xpos:the  x coordinate of the pixel
								Ypos:the  y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{	  	    			
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	460a      	mov	r2, r1
 800390e:	80fb      	strh	r3, [r7, #6]
 8003910:	4613      	mov	r3, r2
 8003912:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);	
 8003914:	88bb      	ldrh	r3, [r7, #4]
 8003916:	88fa      	ldrh	r2, [r7, #6]
 8003918:	88b9      	ldrh	r1, [r7, #4]
 800391a:	88f8      	ldrh	r0, [r7, #6]
 800391c:	f7ff ff9e 	bl	800385c <LCD_SetWindows>
} 
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/ 
void LCD_direction(u8 direction)
{ 
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	71fb      	strb	r3, [r7, #7]
			lcddev.setxcmd=0x2A;
 8003932:	4b26      	ldr	r3, [pc, #152]	; (80039cc <LCD_direction+0xa4>)
 8003934:	222a      	movs	r2, #42	; 0x2a
 8003936:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0x2B;
 8003938:	4b24      	ldr	r3, [pc, #144]	; (80039cc <LCD_direction+0xa4>)
 800393a:	222b      	movs	r2, #43	; 0x2b
 800393c:	819a      	strh	r2, [r3, #12]
			lcddev.wramcmd=0x2C;
 800393e:	4b23      	ldr	r3, [pc, #140]	; (80039cc <LCD_direction+0xa4>)
 8003940:	222c      	movs	r2, #44	; 0x2c
 8003942:	811a      	strh	r2, [r3, #8]
	switch(direction){		  
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	2b03      	cmp	r3, #3
 8003948:	d83a      	bhi.n	80039c0 <LCD_direction+0x98>
 800394a:	a201      	add	r2, pc, #4	; (adr r2, 8003950 <LCD_direction+0x28>)
 800394c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003950:	08003961 	.word	0x08003961
 8003954:	08003979 	.word	0x08003979
 8003958:	08003991 	.word	0x08003991
 800395c:	080039a9 	.word	0x080039a9
		case 0:						 	 		
			lcddev.width=LCD_W;
 8003960:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <LCD_direction+0xa4>)
 8003962:	22f0      	movs	r2, #240	; 0xf0
 8003964:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;		
 8003966:	4b19      	ldr	r3, [pc, #100]	; (80039cc <LCD_direction+0xa4>)
 8003968:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800396c:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 800396e:	2108      	movs	r1, #8
 8003970:	2036      	movs	r0, #54	; 0x36
 8003972:	f7ff fd0f 	bl	8003394 <LCD_WriteReg>
		break;
 8003976:	e024      	b.n	80039c2 <LCD_direction+0x9a>
		case 1:
			lcddev.width=LCD_H;
 8003978:	4b14      	ldr	r3, [pc, #80]	; (80039cc <LCD_direction+0xa4>)
 800397a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800397e:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8003980:	4b12      	ldr	r3, [pc, #72]	; (80039cc <LCD_direction+0xa4>)
 8003982:	22f0      	movs	r2, #240	; 0xf0
 8003984:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8003986:	2168      	movs	r1, #104	; 0x68
 8003988:	2036      	movs	r0, #54	; 0x36
 800398a:	f7ff fd03 	bl	8003394 <LCD_WriteReg>
		break;
 800398e:	e018      	b.n	80039c2 <LCD_direction+0x9a>
		case 2:						 	 		
			lcddev.width=LCD_W;
 8003990:	4b0e      	ldr	r3, [pc, #56]	; (80039cc <LCD_direction+0xa4>)
 8003992:	22f0      	movs	r2, #240	; 0xf0
 8003994:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;	
 8003996:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <LCD_direction+0xa4>)
 8003998:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800399c:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 800399e:	21c8      	movs	r1, #200	; 0xc8
 80039a0:	2036      	movs	r0, #54	; 0x36
 80039a2:	f7ff fcf7 	bl	8003394 <LCD_WriteReg>
		break;
 80039a6:	e00c      	b.n	80039c2 <LCD_direction+0x9a>
		case 3:
			lcddev.width=LCD_H;
 80039a8:	4b08      	ldr	r3, [pc, #32]	; (80039cc <LCD_direction+0xa4>)
 80039aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80039ae:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <LCD_direction+0xa4>)
 80039b2:	22f0      	movs	r2, #240	; 0xf0
 80039b4:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 80039b6:	21a8      	movs	r1, #168	; 0xa8
 80039b8:	2036      	movs	r0, #54	; 0x36
 80039ba:	f7ff fceb 	bl	8003394 <LCD_WriteReg>
		break;	
 80039be:	e000      	b.n	80039c2 <LCD_direction+0x9a>
		default:break;
 80039c0:	bf00      	nop
	}		
}	 
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000110 	.word	0x20000110

080039d0 <controlLed>:
/******************************************************************************/

/******************************************************************************/

void controlLed(DeviceState_e state)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	71fb      	strb	r3, [r7, #7]
	switch(state)
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d006      	beq.n	80039ee <controlLed+0x1e>
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	dc2b      	bgt.n	8003a3c <controlLed+0x6c>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01c      	beq.n	8003a22 <controlLed+0x52>
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d00d      	beq.n	8003a08 <controlLed+0x38>
 80039ec:	e026      	b.n	8003a3c <controlLed+0x6c>
	{
	case PAUSE:
		GPIO_SetBits(LED_GREEN_1_PORT,LED_GREEN_1_GPIO);
 80039ee:	2110      	movs	r1, #16
 80039f0:	481b      	ldr	r0, [pc, #108]	; (8003a60 <controlLed+0x90>)
 80039f2:	f7fc fdaa 	bl	800054a <GPIO_SetBits>
		GPIO_ResetBits(LED_RED_PORT, LED_RED_GPIO);
 80039f6:	2102      	movs	r1, #2
 80039f8:	4819      	ldr	r0, [pc, #100]	; (8003a60 <controlLed+0x90>)
 80039fa:	f7fc fdb5 	bl	8000568 <GPIO_ResetBits>
		GPIO_ResetBits(LED_GREEN_2_PORT, LED_GREEN_2_GPIO);
 80039fe:	2101      	movs	r1, #1
 8003a00:	4818      	ldr	r0, [pc, #96]	; (8003a64 <controlLed+0x94>)
 8003a02:	f7fc fdb1 	bl	8000568 <GPIO_ResetBits>
		break;
 8003a06:	e026      	b.n	8003a56 <controlLed+0x86>
	case RUN:
		GPIO_SetBits(LED_GREEN_2_PORT,LED_GREEN_2_GPIO);
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4816      	ldr	r0, [pc, #88]	; (8003a64 <controlLed+0x94>)
 8003a0c:	f7fc fd9d 	bl	800054a <GPIO_SetBits>
		GPIO_ResetBits(LED_RED_PORT, LED_RED_GPIO);
 8003a10:	2102      	movs	r1, #2
 8003a12:	4813      	ldr	r0, [pc, #76]	; (8003a60 <controlLed+0x90>)
 8003a14:	f7fc fda8 	bl	8000568 <GPIO_ResetBits>
		GPIO_ResetBits(LED_GREEN_1_PORT, LED_GREEN_1_GPIO);
 8003a18:	2110      	movs	r1, #16
 8003a1a:	4811      	ldr	r0, [pc, #68]	; (8003a60 <controlLed+0x90>)
 8003a1c:	f7fc fda4 	bl	8000568 <GPIO_ResetBits>
		break;
 8003a20:	e019      	b.n	8003a56 <controlLed+0x86>
	case STOP:
		GPIO_SetBits(LED_RED_PORT,LED_RED_GPIO);
 8003a22:	2102      	movs	r1, #2
 8003a24:	480e      	ldr	r0, [pc, #56]	; (8003a60 <controlLed+0x90>)
 8003a26:	f7fc fd90 	bl	800054a <GPIO_SetBits>
		GPIO_SetBits(LED_GREEN_2_PORT, LED_GREEN_2_GPIO);
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	480d      	ldr	r0, [pc, #52]	; (8003a64 <controlLed+0x94>)
 8003a2e:	f7fc fd8c 	bl	800054a <GPIO_SetBits>
		GPIO_SetBits(LED_GREEN_1_PORT, LED_GREEN_1_GPIO);
 8003a32:	2110      	movs	r1, #16
 8003a34:	480a      	ldr	r0, [pc, #40]	; (8003a60 <controlLed+0x90>)
 8003a36:	f7fc fd88 	bl	800054a <GPIO_SetBits>
		break;
 8003a3a:	e00c      	b.n	8003a56 <controlLed+0x86>
	default:
		GPIO_ResetBits(LED_RED_PORT, LED_RED_GPIO);
 8003a3c:	2102      	movs	r1, #2
 8003a3e:	4808      	ldr	r0, [pc, #32]	; (8003a60 <controlLed+0x90>)
 8003a40:	f7fc fd92 	bl	8000568 <GPIO_ResetBits>
		GPIO_ResetBits(LED_GREEN_2_PORT, LED_GREEN_2_GPIO);
 8003a44:	2101      	movs	r1, #1
 8003a46:	4807      	ldr	r0, [pc, #28]	; (8003a64 <controlLed+0x94>)
 8003a48:	f7fc fd8e 	bl	8000568 <GPIO_ResetBits>
		GPIO_ResetBits(LED_GREEN_1_PORT, LED_GREEN_1_GPIO);
 8003a4c:	2110      	movs	r1, #16
 8003a4e:	4804      	ldr	r0, [pc, #16]	; (8003a60 <controlLed+0x90>)
 8003a50:	f7fc fd8a 	bl	8000568 <GPIO_ResetBits>
		break;
 8003a54:	bf00      	nop
	}
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40020000 	.word	0x40020000
 8003a64:	40020400 	.word	0x40020400

08003a68 <ledInit>:
void ledInit(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GpioInitStruct;
	RCC_AHB1PeriphClockCmd(LED_GREEN_1_RCC, ENABLE);
 8003a6e:	2101      	movs	r1, #1
 8003a70:	2001      	movs	r0, #1
 8003a72:	f7fc fe7f 	bl	8000774 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(LED_RED_RCC, ENABLE);
 8003a76:	2101      	movs	r1, #1
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f7fc fe7b 	bl	8000774 <RCC_AHB1PeriphClockCmd>

	GpioInitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	713b      	strb	r3, [r7, #4]
	GpioInitStruct.GPIO_OType = GPIO_OType_PP;
 8003a82:	2300      	movs	r3, #0
 8003a84:	71bb      	strb	r3, [r7, #6]
	GpioInitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8003a86:	2302      	movs	r3, #2
 8003a88:	71fb      	strb	r3, [r7, #7]
	GpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	717b      	strb	r3, [r7, #5]

	GpioInitStruct.GPIO_Pin = LED_RED_GPIO;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_RED_PORT, &GpioInitStruct);
 8003a92:	463b      	mov	r3, r7
 8003a94:	4619      	mov	r1, r3
 8003a96:	480a      	ldr	r0, [pc, #40]	; (8003ac0 <ledInit+0x58>)
 8003a98:	f7fc fcae 	bl	80003f8 <GPIO_Init>

	GpioInitStruct.GPIO_Pin = LED_GREEN_1_GPIO;
 8003a9c:	2310      	movs	r3, #16
 8003a9e:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_GREEN_1_PORT, &GpioInitStruct);
 8003aa0:	463b      	mov	r3, r7
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4806      	ldr	r0, [pc, #24]	; (8003ac0 <ledInit+0x58>)
 8003aa6:	f7fc fca7 	bl	80003f8 <GPIO_Init>

	GpioInitStruct.GPIO_Pin = LED_GREEN_2_GPIO;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_GREEN_2_PORT, &GpioInitStruct);
 8003aae:	463b      	mov	r3, r7
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4804      	ldr	r0, [pc, #16]	; (8003ac4 <ledInit+0x5c>)
 8003ab4:	f7fc fca0 	bl	80003f8 <GPIO_Init>
}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40020000 	.word	0x40020000
 8003ac4:	40020400 	.word	0x40020400

08003ac8 <updateDataStopHandleCallBack>:

/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/
void updateDataStopHandleCallBack(upDateDataStopHandle pHandle)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	pUpdateDataStopHandle = pHandle;
 8003ad0:	4a04      	ldr	r2, [pc, #16]	; (8003ae4 <updateDataStopHandleCallBack+0x1c>)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6013      	str	r3, [r2, #0]
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	20000120 	.word	0x20000120

08003ae8 <HMI>:
void HMI(uint32_t dwCountMax,\
		uint32_t dwCounting,\
		uint32_t dwCountMiss,\
		uint32_t Thold,\
		uint8_t State)
{
 8003ae8:	b590      	push	{r4, r7, lr}
 8003aea:	b09b      	sub	sp, #108	; 0x6c
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	603b      	str	r3, [r7, #0]
	//ValueKey_e key = NOKEY ;
	static u8 Flag = 0;
	const u16 lengthNum = 10;
 8003af6:	230a      	movs	r3, #10
 8003af8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	const u16 size = 16;
 8003afc:	2310      	movs	r3, #16
 8003afe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	const u16 widthStr = 100;
 8003b02:	2364      	movs	r3, #100	; 0x64
 8003b04:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	u16 widthBox = lengthNum*(size/2);
 8003b08:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003b0c:	085b      	lsrs	r3, r3, #1
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003b14:	fb12 f303 	smulbb	r3, r2, r3
 8003b18:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	const u16 heightBox = 20;
 8003b1c:	2314      	movs	r3, #20
 8003b1e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	const u16 xEditNumCntMax = 70;
 8003b22:	2346      	movs	r3, #70	; 0x46
 8003b24:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	const u16 yEditNumCntMax = 50;
 8003b28:	2332      	movs	r3, #50	; 0x32
 8003b2a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	const u16 xEditNumThold = 70;
 8003b2e:	2346      	movs	r3, #70	; 0x46
 8003b30:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	const u16 yEditNumThold = 80;
 8003b34:	2350      	movs	r3, #80	; 0x50
 8003b36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	const u16 xEditNumCntMiss = 70;
 8003b3a:	2346      	movs	r3, #70	; 0x46
 8003b3c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	const u16 yEditNumCntMiss = 110;
 8003b40:	236e      	movs	r3, #110	; 0x6e
 8003b42:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	const u16 xEditNumCnting = 70;
 8003b46:	2346      	movs	r3, #70	; 0x46
 8003b48:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	const u16 yEditNumCnting = 140;
 8003b4c:	238c      	movs	r3, #140	; 0x8c
 8003b4e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46


	u16 XsBoxCntMax = xEditNumCntMax + widthStr -1;
 8003b52:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003b56:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003b5a:	4413      	add	r3, r2
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	u16 YsBoxCntMax = yEditNumCntMax -1;
 8003b64:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	u16 XeBoxCntMax = XsBoxCntMax + widthBox;
 8003b6e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8003b72:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003b76:	4413      	add	r3, r2
 8003b78:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	u16 YeBoxCntMax = YsBoxCntMax + heightBox;
 8003b7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8003b80:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003b84:	4413      	add	r3, r2
 8003b86:	87fb      	strh	r3, [r7, #62]	; 0x3e

	u16 XsBoxThold = xEditNumThold + widthStr -1;
 8003b88:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003b8c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003b90:	4413      	add	r3, r2
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	87bb      	strh	r3, [r7, #60]	; 0x3c
	u16 YsBoxThold = yEditNumThold - 1;
 8003b98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	877b      	strh	r3, [r7, #58]	; 0x3a
	u16 XeBoxThold = XsBoxThold + widthBox;
 8003ba0:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8003ba2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003ba6:	4413      	add	r3, r2
 8003ba8:	873b      	strh	r3, [r7, #56]	; 0x38
	u16 YeBoxThold = YsBoxThold + heightBox;
 8003baa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003bac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003bb0:	4413      	add	r3, r2
 8003bb2:	86fb      	strh	r3, [r7, #54]	; 0x36

	u16 XsBoxCnting = xEditNumCnting + widthStr -1;
 8003bb4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003bb8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003bbc:	4413      	add	r3, r2
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	86bb      	strh	r3, [r7, #52]	; 0x34
	u16 YsBoxCnting = yEditNumCnting - 1;
 8003bc4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	867b      	strh	r3, [r7, #50]	; 0x32
	u16 XeBoxCnting = XsBoxCnting + widthBox;
 8003bcc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003bce:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003bd2:	4413      	add	r3, r2
 8003bd4:	863b      	strh	r3, [r7, #48]	; 0x30
	u16 YeBoxCnting = YsBoxCnting + heightBox;
 8003bd6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8003bd8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003bdc:	4413      	add	r3, r2
 8003bde:	85fb      	strh	r3, [r7, #46]	; 0x2e

	u16 XsBoxCntMiss = xEditNumCntMiss + widthStr -1;
 8003be0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003be4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003be8:	4413      	add	r3, r2
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	85bb      	strh	r3, [r7, #44]	; 0x2c
	u16 YsBoxCntMiss = yEditNumCntMiss - 1;
 8003bf0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	857b      	strh	r3, [r7, #42]	; 0x2a
	u16 XeBoxCntMiss = XsBoxCntMiss + widthBox;
 8003bf8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003bfa:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003bfe:	4413      	add	r3, r2
 8003c00:	853b      	strh	r3, [r7, #40]	; 0x28
	u16 YeBoxCntMiss = YsBoxCntMiss + heightBox;
 8003c02:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003c04:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003c08:	4413      	add	r3, r2
 8003c0a:	84fb      	strh	r3, [r7, #38]	; 0x26

	u16 XsBoxProcess = 5;
 8003c0c:	2305      	movs	r3, #5
 8003c0e:	84bb      	strh	r3, [r7, #36]	; 0x24
	u16 YsBoxProcess = YeBoxCnting +20;
 8003c10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c12:	3314      	adds	r3, #20
 8003c14:	847b      	strh	r3, [r7, #34]	; 0x22
	u16 XeBoxProcess = 315;
 8003c16:	f240 133b 	movw	r3, #315	; 0x13b
 8003c1a:	843b      	strh	r3, [r7, #32]
	u16 YeBoxProcess = YsBoxProcess + heightBox;
 8003c1c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003c1e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003c22:	4413      	add	r3, r2
 8003c24:	83fb      	strh	r3, [r7, #30]

	u16 XsUpdateBoxProcess = XsBoxProcess + 5;
 8003c26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c28:	3305      	adds	r3, #5
 8003c2a:	83bb      	strh	r3, [r7, #28]
	u16 YsUpdateBoxProcess = YsBoxProcess + 5;
 8003c2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c2e:	3305      	adds	r3, #5
 8003c30:	837b      	strh	r3, [r7, #26]
	static u16 XeUpdateBoxProcess ;
	u16 YeUpdateBoxProcess = YeBoxProcess - 5;
 8003c32:	8bfb      	ldrh	r3, [r7, #30]
 8003c34:	3b05      	subs	r3, #5
 8003c36:	833b      	strh	r3, [r7, #24]

	const u16 widthProcess1Unit = 3;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	82fb      	strh	r3, [r7, #22]

	u16 valuePosition = 0,ratioProcess = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	82bb      	strh	r3, [r7, #20]
 8003c40:	2300      	movs	r3, #0
 8003c42:	827b      	strh	r3, [r7, #18]
	static u16 lastRatioProcess = 0;
	if(State == 0 && Flag == 0)
 8003c44:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f040 8096 	bne.w	8003d7a <HMI+0x292>
 8003c4e:	4b7a      	ldr	r3, [pc, #488]	; (8003e38 <HMI+0x350>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f040 8091 	bne.w	8003d7a <HMI+0x292>
		{
			LCD_Clear(WHITE);
 8003c58:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003c5c:	f7ff fc0c 	bl	8003478 <LCD_Clear>
			//Print Titel
			LCD_ShowTitle(heightBox, WHITE, BLUE, (u8*)"TEST JIG SOCKET", 16, 1);
 8003c60:	f8b7 0056 	ldrh.w	r0, [r7, #86]	; 0x56
 8003c64:	2301      	movs	r3, #1
 8003c66:	9301      	str	r3, [sp, #4]
 8003c68:	2310      	movs	r3, #16
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	4b73      	ldr	r3, [pc, #460]	; (8003e3c <HMI+0x354>)
 8003c6e:	221f      	movs	r2, #31
 8003c70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c74:	f7fe f9fa 	bl	800206c <LCD_ShowTitle>
			LCD_ShowEditNum(xEditNumCntMax, yEditNumCntMax,(u8*)"Count Max", lengthNum);
 8003c78:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
 8003c82:	f8b7 0054 	ldrh.w	r0, [r7, #84]	; 0x54
 8003c86:	4a6e      	ldr	r2, [pc, #440]	; (8003e40 <HMI+0x358>)
 8003c88:	f7fe fdd3 	bl	8002832 <LCD_ShowEditNum>
			LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMax);
 8003c8c:	8ffc      	ldrh	r4, [r7, #62]	; 0x3e
 8003c8e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003c92:	f8b7 1042 	ldrh.w	r1, [r7, #66]	; 0x42
 8003c96:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	4623      	mov	r3, r4
 8003ca0:	f7fe fe0e 	bl	80028c0 <LCD_UpdateEditNum>
			LCD_ShowEditNum(xEditNumThold, yEditNumThold,(u8*)"Time Hold", lengthNum);
 8003ca4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 8003cae:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
 8003cb2:	4a64      	ldr	r2, [pc, #400]	; (8003e44 <HMI+0x35c>)
 8003cb4:	f7fe fdbd 	bl	8002832 <LCD_ShowEditNum>
			LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, Thold);
 8003cb8:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 8003cba:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003cbc:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8003cbe:	8fb8      	ldrh	r0, [r7, #60]	; 0x3c
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	4623      	mov	r3, r4
 8003cc6:	f7fe fdfb 	bl	80028c0 <LCD_UpdateEditNum>

			LCD_ShowEditNum(xEditNumCnting, yEditNumCnting,(u8*)"Counting", lengthNum);
 8003cca:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8003cd4:	f8b7 0048 	ldrh.w	r0, [r7, #72]	; 0x48
 8003cd8:	4a5b      	ldr	r2, [pc, #364]	; (8003e48 <HMI+0x360>)
 8003cda:	f7fe fdaa 	bl	8002832 <LCD_ShowEditNum>
			LCD_UpdateEditNum(XsBoxCnting, YsBoxCnting, XeBoxCnting, YeBoxCnting, dwCounting);
 8003cde:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8003ce0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003ce2:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8003ce4:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	4623      	mov	r3, r4
 8003cec:	f7fe fde8 	bl	80028c0 <LCD_UpdateEditNum>
			LCD_ShowEditNum(xEditNumCntMiss, yEditNumCntMiss,(u8*)"Count Miss", lengthNum);
 8003cf0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8003cfa:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8003cfe:	4a53      	ldr	r2, [pc, #332]	; (8003e4c <HMI+0x364>)
 8003d00:	f7fe fd97 	bl	8002832 <LCD_ShowEditNum>
			LCD_UpdateEditNum(XsBoxCntMiss, YsBoxCntMiss, XeBoxCntMiss, YeBoxCntMiss, dwCountMiss);
 8003d04:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003d06:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003d08:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8003d0a:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	4623      	mov	r3, r4
 8003d12:	f7fe fdd5 	bl	80028c0 <LCD_UpdateEditNum>

			LCD_DrawRectangle(XsBoxProcess,YsBoxProcess,XeBoxProcess,YeBoxProcess);
 8003d16:	8bfb      	ldrh	r3, [r7, #30]
 8003d18:	8c3a      	ldrh	r2, [r7, #32]
 8003d1a:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003d1c:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8003d1e:	f7fd ff41 	bl	8001ba4 <LCD_DrawRectangle>
			LCD_Fill(XsUpdateBoxProcess, YsUpdateBoxProcess, XeBoxProcess - 5, YeUpdateBoxProcess, WHITE);
 8003d22:	8c3b      	ldrh	r3, [r7, #32]
 8003d24:	3b05      	subs	r3, #5
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	8b3b      	ldrh	r3, [r7, #24]
 8003d2a:	8b79      	ldrh	r1, [r7, #26]
 8003d2c:	8bb8      	ldrh	r0, [r7, #28]
 8003d2e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003d32:	9400      	str	r4, [sp, #0]
 8003d34:	f7fd fe66 	bl	8001a04 <LCD_Fill>
			LCD_ShowNum(XeBoxProcess-5*8, YeBoxProcess+10, 0, 3, 16);
 8003d38:	8c3b      	ldrh	r3, [r7, #32]
 8003d3a:	3b28      	subs	r3, #40	; 0x28
 8003d3c:	b298      	uxth	r0, r3
 8003d3e:	8bfb      	ldrh	r3, [r7, #30]
 8003d40:	330a      	adds	r3, #10
 8003d42:	b299      	uxth	r1, r3
 8003d44:	2310      	movs	r3, #16
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	2303      	movs	r3, #3
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f7fe ff02 	bl	8002b54 <LCD_ShowNum>
			LCD_ShowString(XeBoxProcess-3*8, YeBoxProcess+10, 16,(u8*) "%", 1);
 8003d50:	8c3b      	ldrh	r3, [r7, #32]
 8003d52:	3b18      	subs	r3, #24
 8003d54:	b298      	uxth	r0, r3
 8003d56:	8bfb      	ldrh	r3, [r7, #30]
 8003d58:	330a      	adds	r3, #10
 8003d5a:	b299      	uxth	r1, r3
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	4b3b      	ldr	r3, [pc, #236]	; (8003e50 <HMI+0x368>)
 8003d62:	2210      	movs	r2, #16
 8003d64:	f7fe fad4 	bl	8002310 <LCD_ShowString>
			//LCD_ShowChar(XeBoxProcess-3*8, YeBoxProcess+10, BLACK, WHITE, 37, 16, 1);
			lastRatioProcess = 0;
 8003d68:	4b3a      	ldr	r3, [pc, #232]	; (8003e54 <HMI+0x36c>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	801a      	strh	r2, [r3, #0]
			XeUpdateBoxProcess = XsUpdateBoxProcess;
 8003d6e:	4a3a      	ldr	r2, [pc, #232]	; (8003e58 <HMI+0x370>)
 8003d70:	8bbb      	ldrh	r3, [r7, #28]
 8003d72:	8013      	strh	r3, [r2, #0]
			Flag = 1;
 8003d74:	4b30      	ldr	r3, [pc, #192]	; (8003e38 <HMI+0x350>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	701a      	strb	r2, [r3, #0]
		}
	if(State == 1)
 8003d7a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d156      	bne.n	8003e30 <HMI+0x348>
	{
			//LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMax);
			LCD_UpdateEditNum(XsBoxCnting, YsBoxCnting, XeBoxCnting, YeBoxCnting, dwCounting);
 8003d82:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8003d84:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003d86:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8003d88:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	4623      	mov	r3, r4
 8003d90:	f7fe fd96 	bl	80028c0 <LCD_UpdateEditNum>
			LCD_UpdateEditNum(XsBoxCntMiss, YsBoxCntMiss, XeBoxCntMiss, YeBoxCntMiss, dwCountMiss);
 8003d94:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003d96:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003d98:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8003d9a:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	4623      	mov	r3, r4
 8003da2:	f7fe fd8d 	bl	80028c0 <LCD_UpdateEditNum>
			//LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, Thold);
			Flag = 0;
 8003da6:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <HMI+0x350>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	701a      	strb	r2, [r3, #0]

			//Update process
			ratioProcess = (u16)(dwCounting*100/(dwCountMax));
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2264      	movs	r2, #100	; 0x64
 8003db0:	fb03 f202 	mul.w	r2, r3, r2
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dba:	827b      	strh	r3, [r7, #18]
			LCD_ShowNum(XeBoxProcess-3*8, YeBoxProcess+10, ratioProcess, 3, 16);
 8003dbc:	8c3b      	ldrh	r3, [r7, #32]
 8003dbe:	3b18      	subs	r3, #24
 8003dc0:	b298      	uxth	r0, r3
 8003dc2:	8bfb      	ldrh	r3, [r7, #30]
 8003dc4:	330a      	adds	r3, #10
 8003dc6:	b299      	uxth	r1, r3
 8003dc8:	8a7a      	ldrh	r2, [r7, #18]
 8003dca:	2310      	movs	r3, #16
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	2303      	movs	r3, #3
 8003dd0:	f7fe fec0 	bl	8002b54 <LCD_ShowNum>
			if(lastRatioProcess != ratioProcess)
 8003dd4:	4b1f      	ldr	r3, [pc, #124]	; (8003e54 <HMI+0x36c>)
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	8a7a      	ldrh	r2, [r7, #18]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d028      	beq.n	8003e30 <HMI+0x348>
			{
				valuePosition = ratioProcess - lastRatioProcess;
 8003dde:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <HMI+0x36c>)
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	8a7a      	ldrh	r2, [r7, #18]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	82bb      	strh	r3, [r7, #20]
				valuePosition *= widthProcess1Unit;
 8003de8:	8aba      	ldrh	r2, [r7, #20]
 8003dea:	8afb      	ldrh	r3, [r7, #22]
 8003dec:	fb12 f303 	smulbb	r3, r2, r3
 8003df0:	82bb      	strh	r3, [r7, #20]
				XeUpdateBoxProcess += valuePosition ;
 8003df2:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <HMI+0x370>)
 8003df4:	881a      	ldrh	r2, [r3, #0]
 8003df6:	8abb      	ldrh	r3, [r7, #20]
 8003df8:	4413      	add	r3, r2
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	4b16      	ldr	r3, [pc, #88]	; (8003e58 <HMI+0x370>)
 8003dfe:	801a      	strh	r2, [r3, #0]
				LCD_Fill(XsUpdateBoxProcess, YsUpdateBoxProcess, XeUpdateBoxProcess, YeUpdateBoxProcess, BLACK);
 8003e00:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <HMI+0x370>)
 8003e02:	881a      	ldrh	r2, [r3, #0]
 8003e04:	8b3b      	ldrh	r3, [r7, #24]
 8003e06:	8b79      	ldrh	r1, [r7, #26]
 8003e08:	8bb8      	ldrh	r0, [r7, #28]
 8003e0a:	2400      	movs	r4, #0
 8003e0c:	9400      	str	r4, [sp, #0]
 8003e0e:	f7fd fdf9 	bl	8001a04 <LCD_Fill>
				LCD_ShowNum(XeBoxProcess-3*8, YeBoxProcess+10, ratioProcess, 3, 16);
 8003e12:	8c3b      	ldrh	r3, [r7, #32]
 8003e14:	3b18      	subs	r3, #24
 8003e16:	b298      	uxth	r0, r3
 8003e18:	8bfb      	ldrh	r3, [r7, #30]
 8003e1a:	330a      	adds	r3, #10
 8003e1c:	b299      	uxth	r1, r3
 8003e1e:	8a7a      	ldrh	r2, [r7, #18]
 8003e20:	2310      	movs	r3, #16
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	2303      	movs	r3, #3
 8003e26:	f7fe fe95 	bl	8002b54 <LCD_ShowNum>
				lastRatioProcess = ratioProcess;
 8003e2a:	4a0a      	ldr	r2, [pc, #40]	; (8003e54 <HMI+0x36c>)
 8003e2c:	8a7b      	ldrh	r3, [r7, #18]
 8003e2e:	8013      	strh	r3, [r2, #0]



	}

}
 8003e30:	bf00      	nop
 8003e32:	3764      	adds	r7, #100	; 0x64
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd90      	pop	{r4, r7, pc}
 8003e38:	2000013a 	.word	0x2000013a
 8003e3c:	08006754 	.word	0x08006754
 8003e40:	08006764 	.word	0x08006764
 8003e44:	08006770 	.word	0x08006770
 8003e48:	0800677c 	.word	0x0800677c
 8003e4c:	08006788 	.word	0x08006788
 8003e50:	08006794 	.word	0x08006794
 8003e54:	2000013c 	.word	0x2000013c
 8003e58:	2000013e 	.word	0x2000013e

08003e5c <processMainMenu>:
uint8_t processMainMenu(uint32_t dwCountMax,\
						uint32_t dwCounting,\
						uint32_t dwCountMiss,\
						uint32_t Thold)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
	uint8_t state = 0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	75fb      	strb	r3, [r7, #23]
	uint8_t byOptionChoose = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	75bb      	strb	r3, [r7, #22]


	switch(option)
 8003e72:	4b55      	ldr	r3, [pc, #340]	; (8003fc8 <processMainMenu+0x16c>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	f200 809b 	bhi.w	8003fb2 <processMainMenu+0x156>
 8003e7c:	a201      	add	r2, pc, #4	; (adr r2, 8003e84 <processMainMenu+0x28>)
 8003e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e82:	bf00      	nop
 8003e84:	08003e99 	.word	0x08003e99
 8003e88:	08003ee1 	.word	0x08003ee1
 8003e8c:	08003f17 	.word	0x08003f17
 8003e90:	08003f4f 	.word	0x08003f4f
 8003e94:	08003f8b 	.word	0x08003f8b
	{
	case MENU_OPTION:
		byOptionChoose = getOptionMainMenu();
 8003e98:	f000 f89a 	bl	8003fd0 <getOptionMainMenu>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	75bb      	strb	r3, [r7, #22]
		if( byOptionChoose == 1)
 8003ea0:	7dbb      	ldrb	r3, [r7, #22]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d103      	bne.n	8003eae <processMainMenu+0x52>
		{
			option = INFORMATION_OPTION;
 8003ea6:	4b48      	ldr	r3, [pc, #288]	; (8003fc8 <processMainMenu+0x16c>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	701a      	strb	r2, [r3, #0]
			option = SLEEP_OPTION;
		}else
		{
			option = MENU_OPTION;
		}
		break;
 8003eac:	e086      	b.n	8003fbc <processMainMenu+0x160>
		}else if(byOptionChoose == 2)
 8003eae:	7dbb      	ldrb	r3, [r7, #22]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d103      	bne.n	8003ebc <processMainMenu+0x60>
			option = PREPARE_OPTION;
 8003eb4:	4b44      	ldr	r3, [pc, #272]	; (8003fc8 <processMainMenu+0x16c>)
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	701a      	strb	r2, [r3, #0]
		break;
 8003eba:	e07f      	b.n	8003fbc <processMainMenu+0x160>
		}else if(byOptionChoose == 3)
 8003ebc:	7dbb      	ldrb	r3, [r7, #22]
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	d103      	bne.n	8003eca <processMainMenu+0x6e>
			option = SETUP_AND_RUN_OPTION;
 8003ec2:	4b41      	ldr	r3, [pc, #260]	; (8003fc8 <processMainMenu+0x16c>)
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	701a      	strb	r2, [r3, #0]
		break;
 8003ec8:	e078      	b.n	8003fbc <processMainMenu+0x160>
		}else if(byOptionChoose == 4)
 8003eca:	7dbb      	ldrb	r3, [r7, #22]
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d103      	bne.n	8003ed8 <processMainMenu+0x7c>
			option = SLEEP_OPTION;
 8003ed0:	4b3d      	ldr	r3, [pc, #244]	; (8003fc8 <processMainMenu+0x16c>)
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	701a      	strb	r2, [r3, #0]
		break;
 8003ed6:	e071      	b.n	8003fbc <processMainMenu+0x160>
			option = MENU_OPTION;
 8003ed8:	4b3b      	ldr	r3, [pc, #236]	; (8003fc8 <processMainMenu+0x16c>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	701a      	strb	r2, [r3, #0]
		break;
 8003ede:	e06d      	b.n	8003fbc <processMainMenu+0x160>
	case INFORMATION_OPTION:
		action = processInfomationOption(dwCountMax,dwCounting,dwCountMiss,Thold);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f88a 	bl	8004000 <processInfomationOption>
 8003eec:	4603      	mov	r3, r0
 8003eee:	461a      	mov	r2, r3
 8003ef0:	4b36      	ldr	r3, [pc, #216]	; (8003fcc <processMainMenu+0x170>)
 8003ef2:	701a      	strb	r2, [r3, #0]
		if(action == RETURN_ACTION)
 8003ef4:	4b35      	ldr	r3, [pc, #212]	; (8003fcc <processMainMenu+0x170>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d102      	bne.n	8003f02 <processMainMenu+0xa6>
		{
			option = MENU_OPTION;
 8003efc:	4b32      	ldr	r3, [pc, #200]	; (8003fc8 <processMainMenu+0x16c>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	701a      	strb	r2, [r3, #0]
		}
		if(action == SELECT_ACTION)
 8003f02:	4b32      	ldr	r3, [pc, #200]	; (8003fcc <processMainMenu+0x170>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d157      	bne.n	8003fba <processMainMenu+0x15e>
		{
			//Restart
			option = MENU_OPTION;
 8003f0a:	4b2f      	ldr	r3, [pc, #188]	; (8003fc8 <processMainMenu+0x16c>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	701a      	strb	r2, [r3, #0]
			state = 1;
 8003f10:	2301      	movs	r3, #1
 8003f12:	75fb      	strb	r3, [r7, #23]
		}
		break;
 8003f14:	e051      	b.n	8003fba <processMainMenu+0x15e>
	case PREPARE_OPTION:
		action = processPrepareOption();
 8003f16:	f000 f8e3 	bl	80040e0 <processPrepareOption>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4b2b      	ldr	r3, [pc, #172]	; (8003fcc <processMainMenu+0x170>)
 8003f20:	701a      	strb	r2, [r3, #0]
		if(action == RETURN_ACTION)
 8003f22:	4b2a      	ldr	r3, [pc, #168]	; (8003fcc <processMainMenu+0x170>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d103      	bne.n	8003f32 <processMainMenu+0xd6>
		{
			option = MENU_OPTION;
 8003f2a:	4b27      	ldr	r3, [pc, #156]	; (8003fc8 <processMainMenu+0x16c>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	701a      	strb	r2, [r3, #0]
			state = 1;
		}else
		{
			option = PREPARE_OPTION;
		}
		break;
 8003f30:	e044      	b.n	8003fbc <processMainMenu+0x160>
		}else if(action == SELECT_ACTION)
 8003f32:	4b26      	ldr	r3, [pc, #152]	; (8003fcc <processMainMenu+0x170>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d105      	bne.n	8003f46 <processMainMenu+0xea>
			option = MENU_OPTION;
 8003f3a:	4b23      	ldr	r3, [pc, #140]	; (8003fc8 <processMainMenu+0x16c>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	701a      	strb	r2, [r3, #0]
			state = 1;
 8003f40:	2301      	movs	r3, #1
 8003f42:	75fb      	strb	r3, [r7, #23]
		break;
 8003f44:	e03a      	b.n	8003fbc <processMainMenu+0x160>
			option = PREPARE_OPTION;
 8003f46:	4b20      	ldr	r3, [pc, #128]	; (8003fc8 <processMainMenu+0x16c>)
 8003f48:	2202      	movs	r2, #2
 8003f4a:	701a      	strb	r2, [r3, #0]
		break;
 8003f4c:	e036      	b.n	8003fbc <processMainMenu+0x160>
	case SETUP_AND_RUN_OPTION:
		action = processSetUpAndRunOption(dwCountMax,Thold);
 8003f4e:	6839      	ldr	r1, [r7, #0]
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f8f3 	bl	800413c <processSetUpAndRunOption>
 8003f56:	4603      	mov	r3, r0
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4b1c      	ldr	r3, [pc, #112]	; (8003fcc <processMainMenu+0x170>)
 8003f5c:	701a      	strb	r2, [r3, #0]
		if(action == RETURN_ACTION)
 8003f5e:	4b1b      	ldr	r3, [pc, #108]	; (8003fcc <processMainMenu+0x170>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d103      	bne.n	8003f6e <processMainMenu+0x112>
		{
			option = MENU_OPTION;
 8003f66:	4b18      	ldr	r3, [pc, #96]	; (8003fc8 <processMainMenu+0x16c>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
			state = 1;
		}else
		{
			option = SETUP_AND_RUN_OPTION;
		}
		break;
 8003f6c:	e026      	b.n	8003fbc <processMainMenu+0x160>
		}else if(action == SELECT_ACTION)
 8003f6e:	4b17      	ldr	r3, [pc, #92]	; (8003fcc <processMainMenu+0x170>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d105      	bne.n	8003f82 <processMainMenu+0x126>
			option = MENU_OPTION;
 8003f76:	4b14      	ldr	r3, [pc, #80]	; (8003fc8 <processMainMenu+0x16c>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	701a      	strb	r2, [r3, #0]
			state = 1;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	75fb      	strb	r3, [r7, #23]
		break;
 8003f80:	e01c      	b.n	8003fbc <processMainMenu+0x160>
			option = SETUP_AND_RUN_OPTION;
 8003f82:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <processMainMenu+0x16c>)
 8003f84:	2203      	movs	r2, #3
 8003f86:	701a      	strb	r2, [r3, #0]
		break;
 8003f88:	e018      	b.n	8003fbc <processMainMenu+0x160>
	case SLEEP_OPTION:
		action = processSleepOption();
 8003f8a:	f000 f8ed 	bl	8004168 <processSleepOption>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	461a      	mov	r2, r3
 8003f92:	4b0e      	ldr	r3, [pc, #56]	; (8003fcc <processMainMenu+0x170>)
 8003f94:	701a      	strb	r2, [r3, #0]
		if(action == SELECT_ACTION)
 8003f96:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <processMainMenu+0x170>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d103      	bne.n	8003fa6 <processMainMenu+0x14a>
		{
			//
			option = SLEEP_OPTION;
 8003f9e:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <processMainMenu+0x16c>)
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	701a      	strb	r2, [r3, #0]
 8003fa4:	e002      	b.n	8003fac <processMainMenu+0x150>
		}else
		{
			option = MENU_OPTION;
 8003fa6:	4b08      	ldr	r3, [pc, #32]	; (8003fc8 <processMainMenu+0x16c>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	701a      	strb	r2, [r3, #0]
		}
		state = 1;
 8003fac:	2301      	movs	r3, #1
 8003fae:	75fb      	strb	r3, [r7, #23]
		break;
 8003fb0:	e004      	b.n	8003fbc <processMainMenu+0x160>
	default:
		option = MENU_OPTION;
 8003fb2:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <processMainMenu+0x16c>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	701a      	strb	r2, [r3, #0]
		break;
 8003fb8:	e000      	b.n	8003fbc <processMainMenu+0x160>
		break;
 8003fba:	bf00      	nop
	}

	return state;
 8003fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000139 	.word	0x20000139
 8003fcc:	20000138 	.word	0x20000138

08003fd0 <getOptionMainMenu>:

uint8_t getOptionMainMenu(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
	uint8_t byOption = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	71fb      	strb	r3, [r7, #7]
	while(byOption == 0)
 8003fda:	e007      	b.n	8003fec <getOptionMainMenu+0x1c>
	{
		byOption = getChooseMainMenu(4, 20, pMenuMain, 16);
 8003fdc:	2310      	movs	r3, #16
 8003fde:	4a07      	ldr	r2, [pc, #28]	; (8003ffc <getOptionMainMenu+0x2c>)
 8003fe0:	2114      	movs	r1, #20
 8003fe2:	2004      	movs	r0, #4
 8003fe4:	f001 f92a 	bl	800523c <getChooseMainMenu>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	71fb      	strb	r3, [r7, #7]
	while(byOption == 0)
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f4      	beq.n	8003fdc <getOptionMainMenu+0xc>
	}
	return byOption;
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	2000002c 	.word	0x2000002c

08004000 <processInfomationOption>:
Action_e processInfomationOption(uint32_t dwCountMax,\
							uint32_t dwCounting,\
							uint32_t dwCountMiss,\
							uint32_t Thold)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08a      	sub	sp, #40	; 0x28
 8004004:	af04      	add	r7, sp, #16
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
	Action_e action = NONE_ACTION;
 800400e:	2300      	movs	r3, #0
 8004010:	75fb      	strb	r3, [r7, #23]
	//void LCD_ShowNumAndStr(u16 x,u16 y,u8 size,char *pStr1,u8 lengthStr,u32 num,u8 lengthNum,u8 mode)
	LCD_ShowStrAndStr(20, 40, 16, "NAME", 150, "VALUE", 64, 1);
 8004012:	2301      	movs	r3, #1
 8004014:	9303      	str	r3, [sp, #12]
 8004016:	2340      	movs	r3, #64	; 0x40
 8004018:	9302      	str	r3, [sp, #8]
 800401a:	4b2b      	ldr	r3, [pc, #172]	; (80040c8 <processInfomationOption+0xc8>)
 800401c:	9301      	str	r3, [sp, #4]
 800401e:	2396      	movs	r3, #150	; 0x96
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	4b2a      	ldr	r3, [pc, #168]	; (80040cc <processInfomationOption+0xcc>)
 8004024:	2210      	movs	r2, #16
 8004026:	2128      	movs	r1, #40	; 0x28
 8004028:	2014      	movs	r0, #20
 800402a:	f7fe fa77 	bl	800251c <LCD_ShowStrAndStr>
	LCD_ShowNumAndStr(20, 60,16,"COUNT_MAX  ",150,dwCountMax,64,1);
 800402e:	2301      	movs	r3, #1
 8004030:	9303      	str	r3, [sp, #12]
 8004032:	2340      	movs	r3, #64	; 0x40
 8004034:	9302      	str	r3, [sp, #8]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	9301      	str	r3, [sp, #4]
 800403a:	2396      	movs	r3, #150	; 0x96
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	4b24      	ldr	r3, [pc, #144]	; (80040d0 <processInfomationOption+0xd0>)
 8004040:	2210      	movs	r2, #16
 8004042:	213c      	movs	r1, #60	; 0x3c
 8004044:	2014      	movs	r0, #20
 8004046:	f7fe f9a7 	bl	8002398 <LCD_ShowNumAndStr>
	LCD_ShowNumAndStr(20, 80,16,"COUTING    ",150,dwCounting,64,1);
 800404a:	2301      	movs	r3, #1
 800404c:	9303      	str	r3, [sp, #12]
 800404e:	2340      	movs	r3, #64	; 0x40
 8004050:	9302      	str	r3, [sp, #8]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	2396      	movs	r3, #150	; 0x96
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	4b1e      	ldr	r3, [pc, #120]	; (80040d4 <processInfomationOption+0xd4>)
 800405c:	2210      	movs	r2, #16
 800405e:	2150      	movs	r1, #80	; 0x50
 8004060:	2014      	movs	r0, #20
 8004062:	f7fe f999 	bl	8002398 <LCD_ShowNumAndStr>
	LCD_ShowNumAndStr(20, 100,16,"COUNTMISS  ",150,dwCountMiss,64,1);
 8004066:	2301      	movs	r3, #1
 8004068:	9303      	str	r3, [sp, #12]
 800406a:	2340      	movs	r3, #64	; 0x40
 800406c:	9302      	str	r3, [sp, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	9301      	str	r3, [sp, #4]
 8004072:	2396      	movs	r3, #150	; 0x96
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	4b18      	ldr	r3, [pc, #96]	; (80040d8 <processInfomationOption+0xd8>)
 8004078:	2210      	movs	r2, #16
 800407a:	2164      	movs	r1, #100	; 0x64
 800407c:	2014      	movs	r0, #20
 800407e:	f7fe f98b 	bl	8002398 <LCD_ShowNumAndStr>
	LCD_ShowNumAndStr(20, 120,16,"T_HOLD     ",150,Thold,64,1);
 8004082:	2301      	movs	r3, #1
 8004084:	9303      	str	r3, [sp, #12]
 8004086:	2340      	movs	r3, #64	; 0x40
 8004088:	9302      	str	r3, [sp, #8]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	2396      	movs	r3, #150	; 0x96
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	4b12      	ldr	r3, [pc, #72]	; (80040dc <processInfomationOption+0xdc>)
 8004094:	2210      	movs	r2, #16
 8004096:	2178      	movs	r1, #120	; 0x78
 8004098:	2014      	movs	r0, #20
 800409a:	f7fe f97d 	bl	8002398 <LCD_ShowNumAndStr>
	if(dwCounting<dwCountMax)
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d205      	bcs.n	80040b2 <processInfomationOption+0xb2>
	{
		action = getChooseInformation(1);
 80040a6:	2001      	movs	r0, #1
 80040a8:	f001 fa2e 	bl	8005508 <getChooseInformation>
 80040ac:	4603      	mov	r3, r0
 80040ae:	75fb      	strb	r3, [r7, #23]
 80040b0:	e004      	b.n	80040bc <processInfomationOption+0xbc>
	}else
	{
		action = getChooseInformation(0);
 80040b2:	2000      	movs	r0, #0
 80040b4:	f001 fa28 	bl	8005508 <getChooseInformation>
 80040b8:	4603      	mov	r3, r0
 80040ba:	75fb      	strb	r3, [r7, #23]
	}
	//In ra thong tin da luu
	//Get tuy chon Restart/Return

	return action;
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	080067a0 	.word	0x080067a0
 80040cc:	08006798 	.word	0x08006798
 80040d0:	080067a8 	.word	0x080067a8
 80040d4:	080067b4 	.word	0x080067b4
 80040d8:	080067c0 	.word	0x080067c0
 80040dc:	080067cc 	.word	0x080067cc

080040e0 <processPrepareOption>:
Action_e processPrepareOption(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af04      	add	r7, sp, #16
	Action_e action = NONE_ACTION;
 80040e6:	2300      	movs	r3, #0
 80040e8:	71fb      	strb	r3, [r7, #7]
	Show_Str(20, 25, BLACK, GREEN, (u8*)"SENSOR", 16, 1);
 80040ea:	2301      	movs	r3, #1
 80040ec:	9302      	str	r3, [sp, #8]
 80040ee:	2310      	movs	r3, #16
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	4b11      	ldr	r3, [pc, #68]	; (8004138 <processPrepareOption+0x58>)
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040fa:	2200      	movs	r2, #0
 80040fc:	2119      	movs	r1, #25
 80040fe:	2014      	movs	r0, #20
 8004100:	f7fe ffca 	bl	8003098 <Show_Str>
	LCD_DrawLine(20, 50, 220, 50);
 8004104:	2332      	movs	r3, #50	; 0x32
 8004106:	22dc      	movs	r2, #220	; 0xdc
 8004108:	2132      	movs	r1, #50	; 0x32
 800410a:	2014      	movs	r0, #20
 800410c:	f7fd fcc6 	bl	8001a9c <LCD_DrawLine>

	LCD_DrawLine(220, 20, 220, 240);
 8004110:	23f0      	movs	r3, #240	; 0xf0
 8004112:	22dc      	movs	r2, #220	; 0xdc
 8004114:	2114      	movs	r1, #20
 8004116:	20dc      	movs	r0, #220	; 0xdc
 8004118:	f7fd fcc0 	bl	8001a9c <LCD_DrawLine>


	while(action == NONE_ACTION)
 800411c:	e003      	b.n	8004126 <processPrepareOption+0x46>
	{
		action = getChoosePrepare();
 800411e:	f001 fb2b 	bl	8005778 <getChoosePrepare>
 8004122:	4603      	mov	r3, r0
 8004124:	71fb      	strb	r3, [r7, #7]
	while(action == NONE_ACTION)
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0f8      	beq.n	800411e <processPrepareOption+0x3e>
	}
	return action;
 800412c:	79fb      	ldrb	r3, [r7, #7]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	080067d8 	.word	0x080067d8

0800413c <processSetUpAndRunOption>:
Action_e processSetUpAndRunOption(u32 dwCountMax,\
		u32 dwTimeHold)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
	Action_e action = NONE_ACTION;
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]
	while(action == NONE_ACTION)
 800414a:	e005      	b.n	8004158 <processSetUpAndRunOption+0x1c>
	{
		action = getChooseSetAndRun(dwCountMax,dwTimeHold);
 800414c:	6839      	ldr	r1, [r7, #0]
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f822 	bl	8004198 <getChooseSetAndRun>
 8004154:	4603      	mov	r3, r0
 8004156:	73fb      	strb	r3, [r7, #15]
	while(action == NONE_ACTION)
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f6      	beq.n	800414c <processSetUpAndRunOption+0x10>
	}
	return action;
 800415e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <processSleepOption>:
Action_e processSleepOption(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
	Action_e action = NONE_ACTION;
 800416e:	2300      	movs	r3, #0
 8004170:	71fb      	strb	r3, [r7, #7]
	while(action == NONE_ACTION)
 8004172:	e007      	b.n	8004184 <processSleepOption+0x1c>
	{
		action = getChooseMainMenu(4, 20, pMenuMain, 16);
 8004174:	2310      	movs	r3, #16
 8004176:	4a07      	ldr	r2, [pc, #28]	; (8004194 <processSleepOption+0x2c>)
 8004178:	2114      	movs	r1, #20
 800417a:	2004      	movs	r0, #4
 800417c:	f001 f85e 	bl	800523c <getChooseMainMenu>
 8004180:	4603      	mov	r3, r0
 8004182:	71fb      	strb	r3, [r7, #7]
	while(action == NONE_ACTION)
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f4      	beq.n	8004174 <processSleepOption+0xc>
	}

	return action;
 800418a:	79fb      	ldrb	r3, [r7, #7]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	2000002c 	.word	0x2000002c

08004198 <getChooseSetAndRun>:
Action_e getChooseSetAndRun(u32 dwCountMax,\
		u32 dwTimeHold)
{
 8004198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419a:	b09b      	sub	sp, #108	; 0x6c
 800419c:	af02      	add	r7, sp, #8
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
	Action_e action = NONE_ACTION;
 80041a2:	2300      	movs	r3, #0
 80041a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	static u8 flag = 0;
	static u8 Row = 0;
	u16 lengthNum = 10;
 80041a8:	230a      	movs	r3, #10
 80041aa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	u16 size = 16;
 80041ae:	2310      	movs	r3, #16
 80041b0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	u16 widthStr = 100;
 80041b4:	2364      	movs	r3, #100	; 0x64
 80041b6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	u16 widthBox = lengthNum*(size/2);
 80041ba:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80041c6:	fb12 f303 	smulbb	r3, r2, r3
 80041ca:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	u16 heightBox = 20;
 80041ce:	2314      	movs	r3, #20
 80041d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	u16 heightButton = 20;
 80041d4:	2314      	movs	r3, #20
 80041d6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	u16 widthButton = 120;
 80041da:	2378      	movs	r3, #120	; 0x78
 80041dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a


	u16 heightButtonUpDown = 50;
 80041e0:	2332      	movs	r3, #50	; 0x32
 80041e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	u16 widthButtonUpDown = 30;
 80041e6:	231e      	movs	r3, #30
 80041e8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	//Position of Button,edit-Number
	u16 xEditNumCntMax = 70;
 80041ec:	2346      	movs	r3, #70	; 0x46
 80041ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	u16 yEditNumCntMax = 53;
 80041f2:	2335      	movs	r3, #53	; 0x35
 80041f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	u16 xEditNumThold = 70;
 80041f8:	2346      	movs	r3, #70	; 0x46
 80041fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	u16 yEditNumThold = 120;
 80041fe:	2378      	movs	r3, #120	; 0x78
 8004200:	87fb      	strh	r3, [r7, #62]	; 0x3e

	u16 XsButtonRun = 320/2 - (widthButton/2);
 8004202:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004206:	085b      	lsrs	r3, r3, #1
 8004208:	b29b      	uxth	r3, r3
 800420a:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800420e:	87bb      	strh	r3, [r7, #60]	; 0x3c
	u16 YsButtonRun = 240-(heightButton*2+20+10);
 8004210:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004214:	f1c3 0369 	rsb	r3, r3, #105	; 0x69
 8004218:	b29b      	uxth	r3, r3
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	877b      	strh	r3, [r7, #58]	; 0x3a



	u16 XsBoxCntMax = xEditNumCntMax + widthStr -1;
 800421e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8004222:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004226:	4413      	add	r3, r2
 8004228:	b29b      	uxth	r3, r3
 800422a:	3b01      	subs	r3, #1
 800422c:	873b      	strh	r3, [r7, #56]	; 0x38
	u16 YsBoxCntMax = yEditNumCntMax -1;
 800422e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004232:	3b01      	subs	r3, #1
 8004234:	86fb      	strh	r3, [r7, #54]	; 0x36
	u16 XeBoxCntMax = XsBoxCntMax + widthBox;
 8004236:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8004238:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800423c:	4413      	add	r3, r2
 800423e:	86bb      	strh	r3, [r7, #52]	; 0x34
	u16 YeBoxCntMax = YsBoxCntMax + heightBox;
 8004240:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004242:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004246:	4413      	add	r3, r2
 8004248:	867b      	strh	r3, [r7, #50]	; 0x32

	u16 XsBoxThold = xEditNumThold + widthStr -1;
 800424a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800424e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004252:	4413      	add	r3, r2
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	863b      	strh	r3, [r7, #48]	; 0x30
	u16 YsBoxThold = yEditNumThold - 1;
 800425a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800425c:	3b01      	subs	r3, #1
 800425e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	u16 XeBoxThold = XsBoxThold + widthBox;
 8004260:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004262:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004266:	4413      	add	r3, r2
 8004268:	85bb      	strh	r3, [r7, #44]	; 0x2c
	u16 YeBoxThold = YsBoxThold + heightBox;
 800426a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800426c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004270:	4413      	add	r3, r2
 8004272:	857b      	strh	r3, [r7, #42]	; 0x2a

	u16 XeButtonRun = XsButtonRun + widthButton;
 8004274:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004276:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800427a:	4413      	add	r3, r2
 800427c:	853b      	strh	r3, [r7, #40]	; 0x28
	u16 YeButtonRun = YsButtonRun + heightButton;
 800427e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8004280:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004284:	4413      	add	r3, r2
 8004286:	84fb      	strh	r3, [r7, #38]	; 0x26

	u16 XsButtonReturn = XsButtonRun;
 8004288:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800428a:	84bb      	strh	r3, [r7, #36]	; 0x24
	u16 XeButtonReturn = XsButtonReturn + widthButton;
 800428c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800428e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004292:	4413      	add	r3, r2
 8004294:	847b      	strh	r3, [r7, #34]	; 0x22
	u16 YsButtonReturn = YeButtonRun  + 20;
 8004296:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004298:	3314      	adds	r3, #20
 800429a:	843b      	strh	r3, [r7, #32]
	u16 YeButtonReturn = YsButtonReturn + heightButton;
 800429c:	8c3a      	ldrh	r2, [r7, #32]
 800429e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80042a2:	4413      	add	r3, r2
 80042a4:	83fb      	strh	r3, [r7, #30]

	u16 XsButtonUpDownCntMax = XeBoxCntMax+10;
 80042a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80042a8:	330a      	adds	r3, #10
 80042aa:	83bb      	strh	r3, [r7, #28]
	u16 YsButtonUpDownCntMax = YeBoxCntMax-heightBox/2-heightButtonUpDown/2;
 80042ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042b0:	085b      	lsrs	r3, r3, #1
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80042be:	085b      	lsrs	r3, r3, #1
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	837b      	strh	r3, [r7, #26]
	u16 XeButtonUpDownCntMax = XsButtonUpDownCntMax + widthButtonUpDown;
 80042c6:	8bba      	ldrh	r2, [r7, #28]
 80042c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80042cc:	4413      	add	r3, r2
 80042ce:	833b      	strh	r3, [r7, #24]
	u16 YeButtonUpDownCntMax = YsButtonUpDownCntMax + heightButtonUpDown;
 80042d0:	8b7a      	ldrh	r2, [r7, #26]
 80042d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80042d6:	4413      	add	r3, r2
 80042d8:	82fb      	strh	r3, [r7, #22]

	u16 XsButtonUpDownTimeHold = XeBoxThold+10;
 80042da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80042dc:	330a      	adds	r3, #10
 80042de:	82bb      	strh	r3, [r7, #20]
	u16 YsButtonUpDownTimeHold = YeBoxThold-heightBox/2-heightButtonUpDown/2;
 80042e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042e4:	085b      	lsrs	r3, r3, #1
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80042f2:	085b      	lsrs	r3, r3, #1
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	827b      	strh	r3, [r7, #18]
	u16 XeButtonUpDownTimeHold = XsButtonUpDownTimeHold + widthButtonUpDown;
 80042fa:	8aba      	ldrh	r2, [r7, #20]
 80042fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004300:	4413      	add	r3, r2
 8004302:	823b      	strh	r3, [r7, #16]
	u16 YeButtonUpDownTimeHold = YsButtonUpDownTimeHold + heightButtonUpDown;
 8004304:	8a7a      	ldrh	r2, [r7, #18]
 8004306:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800430a:	4413      	add	r3, r2
 800430c:	81fb      	strh	r3, [r7, #14]

	key_t key = NOKEY;
 800430e:	2300      	movs	r3, #0
 8004310:	65bb      	str	r3, [r7, #88]	; 0x58
	static u32 dwCountMaxTemp;
	dwCountMaxTemp = dwCountMax;
 8004312:	4a9c      	ldr	r2, [pc, #624]	; (8004584 <getChooseSetAndRun+0x3ec>)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6013      	str	r3, [r2, #0]
	static u32 dwTimeHoldTemp;
	dwTimeHoldTemp = dwTimeHold;
 8004318:	4a9b      	ldr	r2, [pc, #620]	; (8004588 <getChooseSetAndRun+0x3f0>)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	6013      	str	r3, [r2, #0]

	if(flag == 0)
 800431e:	4b9b      	ldr	r3, [pc, #620]	; (800458c <getChooseSetAndRun+0x3f4>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f040 8096 	bne.w	8004454 <getChooseSetAndRun+0x2bc>
	{
		LCD_ShowEditNum(xEditNumCntMax, yEditNumCntMax,(u8*)"Count Max", lengthNum);
 8004328:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800432c:	b2db      	uxtb	r3, r3
 800432e:	f8b7 1042 	ldrh.w	r1, [r7, #66]	; 0x42
 8004332:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 8004336:	4a96      	ldr	r2, [pc, #600]	; (8004590 <getChooseSetAndRun+0x3f8>)
 8004338:	f7fe fa7b 	bl	8002832 <LCD_ShowEditNum>
		LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 800433c:	4b91      	ldr	r3, [pc, #580]	; (8004584 <getChooseSetAndRun+0x3ec>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8004342:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004344:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8004346:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	4623      	mov	r3, r4
 800434c:	f7fe fab8 	bl	80028c0 <LCD_UpdateEditNum>
		LCD_ShowEditNum(xEditNumThold, yEditNumThold,(u8*)"Time Hold", lengthNum);
 8004350:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004354:	b2db      	uxtb	r3, r3
 8004356:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8004358:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 800435c:	4a8d      	ldr	r2, [pc, #564]	; (8004594 <getChooseSetAndRun+0x3fc>)
 800435e:	f7fe fa68 	bl	8002832 <LCD_ShowEditNum>
		LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 8004362:	4b89      	ldr	r3, [pc, #548]	; (8004588 <getChooseSetAndRun+0x3f0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004368:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800436a:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800436c:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	4623      	mov	r3, r4
 8004372:	f7fe faa5 	bl	80028c0 <LCD_UpdateEditNum>
		LCD_ShowButton(XsButtonRun,YsButtonRun,widthButton,heightButton,(u8*)"Save And Run",1);
 8004376:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800437a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800437e:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8004380:	8fb8      	ldrh	r0, [r7, #60]	; 0x3c
 8004382:	2401      	movs	r4, #1
 8004384:	9401      	str	r4, [sp, #4]
 8004386:	4c84      	ldr	r4, [pc, #528]	; (8004598 <getChooseSetAndRun+0x400>)
 8004388:	9400      	str	r4, [sp, #0]
 800438a:	f7fe f919 	bl	80025c0 <LCD_ShowButton>
		LCD_ShowButton(XsButtonReturn,YsButtonReturn,widthButton,heightButton,(u8*)"RETURN",1);
 800438e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004392:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8004396:	8c39      	ldrh	r1, [r7, #32]
 8004398:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800439a:	2401      	movs	r4, #1
 800439c:	9401      	str	r4, [sp, #4]
 800439e:	4c7f      	ldr	r4, [pc, #508]	; (800459c <getChooseSetAndRun+0x404>)
 80043a0:	9400      	str	r4, [sp, #0]
 80043a2:	f7fe f90d 	bl	80025c0 <LCD_ShowButton>

		LCD_DrawLine(20,YeBoxThold-heightBox/2-heightButtonUpDown/2 -10,320-20,YeBoxThold-heightBox/2-heightButtonUpDown/2 -10);
 80043a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043aa:	085b      	lsrs	r3, r3, #1
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80043b8:	085b      	lsrs	r3, r3, #1
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b0a      	subs	r3, #10
 80043c2:	b299      	uxth	r1, r3
 80043c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043c8:	085b      	lsrs	r3, r3, #1
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80043d6:	085b      	lsrs	r3, r3, #1
 80043d8:	b29b      	uxth	r3, r3
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b0a      	subs	r3, #10
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043e6:	2014      	movs	r0, #20
 80043e8:	f7fd fb58 	bl	8001a9c <LCD_DrawLine>

		LCD_ShowBtnUpDown(XsButtonUpDownCntMax,YsButtonUpDownCntMax,widthButtonUpDown,heightButtonUpDown);
 80043ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80043f0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80043f4:	8b79      	ldrh	r1, [r7, #26]
 80043f6:	8bb8      	ldrh	r0, [r7, #28]
 80043f8:	f7fe fafc 	bl	80029f4 <LCD_ShowBtnUpDown>
		LCD_ShowBtnUpDown(XsButtonUpDownTimeHold,YsButtonUpDownTimeHold,widthButtonUpDown,heightButtonUpDown);
 80043fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004400:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004404:	8a79      	ldrh	r1, [r7, #18]
 8004406:	8ab8      	ldrh	r0, [r7, #20]
 8004408:	f7fe faf4 	bl	80029f4 <LCD_ShowBtnUpDown>
		LCD_DrawLine(20,YsButtonRun-10,320-20,YsButtonRun-10);
 800440c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800440e:	3b0a      	subs	r3, #10
 8004410:	b299      	uxth	r1, r3
 8004412:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004414:	3b0a      	subs	r3, #10
 8004416:	b29b      	uxth	r3, r3
 8004418:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800441c:	2014      	movs	r0, #20
 800441e:	f7fd fb3d 	bl	8001a9c <LCD_DrawLine>
		LCD_SetColorPoint(BLUE);
 8004422:	201f      	movs	r0, #31
 8004424:	f7fe fffe 	bl	8003424 <LCD_SetColorPoint>
		LCD_DrawRectangle(XsButtonUpDownCntMax-1,YsButtonUpDownCntMax-1,XeButtonUpDownCntMax+1,YeButtonUpDownCntMax+1);
 8004428:	8bbb      	ldrh	r3, [r7, #28]
 800442a:	3b01      	subs	r3, #1
 800442c:	b298      	uxth	r0, r3
 800442e:	8b7b      	ldrh	r3, [r7, #26]
 8004430:	3b01      	subs	r3, #1
 8004432:	b299      	uxth	r1, r3
 8004434:	8b3b      	ldrh	r3, [r7, #24]
 8004436:	3301      	adds	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	8afb      	ldrh	r3, [r7, #22]
 800443c:	3301      	adds	r3, #1
 800443e:	b29b      	uxth	r3, r3
 8004440:	f7fd fbb0 	bl	8001ba4 <LCD_DrawRectangle>

		flag = 1;
 8004444:	4b51      	ldr	r3, [pc, #324]	; (800458c <getChooseSetAndRun+0x3f4>)
 8004446:	2201      	movs	r2, #1
 8004448:	701a      	strb	r2, [r3, #0]
	}
	while(key == NOKEY)
 800444a:	e003      	b.n	8004454 <getChooseSetAndRun+0x2bc>
	{
		key = processEventButton();
 800444c:	f7fc fbfa 	bl	8000c44 <processEventButton>
 8004450:	4603      	mov	r3, r0
 8004452:	65bb      	str	r3, [r7, #88]	; 0x58
	while(key == NOKEY)
 8004454:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f8      	beq.n	800444c <getChooseSetAndRun+0x2b4>
	}
	switch(key)
 800445a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800445c:	2b09      	cmp	r3, #9
 800445e:	f000 80cc 	beq.w	80045fa <getChooseSetAndRun+0x462>
 8004462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004464:	2b09      	cmp	r3, #9
 8004466:	f300 86d9 	bgt.w	800521c <getChooseSetAndRun+0x1084>
 800446a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800446c:	2b01      	cmp	r3, #1
 800446e:	f000 8177 	beq.w	8004760 <getChooseSetAndRun+0x5c8>
 8004472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004474:	2b03      	cmp	r3, #3
 8004476:	f040 86d1 	bne.w	800521c <getChooseSetAndRun+0x1084>
			{
			case UP:
				Row--;
 800447a:	4b49      	ldr	r3, [pc, #292]	; (80045a0 <getChooseSetAndRun+0x408>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	3b01      	subs	r3, #1
 8004480:	b2da      	uxtb	r2, r3
 8004482:	4b47      	ldr	r3, [pc, #284]	; (80045a0 <getChooseSetAndRun+0x408>)
 8004484:	701a      	strb	r2, [r3, #0]
				if(Row == 255)
 8004486:	4b46      	ldr	r3, [pc, #280]	; (80045a0 <getChooseSetAndRun+0x408>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2bff      	cmp	r3, #255	; 0xff
 800448c:	d102      	bne.n	8004494 <getChooseSetAndRun+0x2fc>
				{
					Row = 3;
 800448e:	4b44      	ldr	r3, [pc, #272]	; (80045a0 <getChooseSetAndRun+0x408>)
 8004490:	2203      	movs	r2, #3
 8004492:	701a      	strb	r2, [r3, #0]
				}
				if(Row == 0)
 8004494:	4b42      	ldr	r3, [pc, #264]	; (80045a0 <getChooseSetAndRun+0x408>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d123      	bne.n	80044e4 <getChooseSetAndRun+0x34c>
				{
					LCD_SetColorPoint(WHITE);
 800449c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80044a0:	f7fe ffc0 	bl	8003424 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonUpDownTimeHold-1,YsButtonUpDownTimeHold-1,XeButtonUpDownTimeHold+1,YeButtonUpDownTimeHold+1);
 80044a4:	8abb      	ldrh	r3, [r7, #20]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b298      	uxth	r0, r3
 80044aa:	8a7b      	ldrh	r3, [r7, #18]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b299      	uxth	r1, r3
 80044b0:	8a3b      	ldrh	r3, [r7, #16]
 80044b2:	3301      	adds	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	89fb      	ldrh	r3, [r7, #14]
 80044b8:	3301      	adds	r3, #1
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	f7fd fb72 	bl	8001ba4 <LCD_DrawRectangle>
					LCD_SetColorPoint(BLUE);
 80044c0:	201f      	movs	r0, #31
 80044c2:	f7fe ffaf 	bl	8003424 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonUpDownCntMax-1,YsButtonUpDownCntMax-1,XeButtonUpDownCntMax+1,YeButtonUpDownCntMax+1);
 80044c6:	8bbb      	ldrh	r3, [r7, #28]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b298      	uxth	r0, r3
 80044cc:	8b7b      	ldrh	r3, [r7, #26]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b299      	uxth	r1, r3
 80044d2:	8b3b      	ldrh	r3, [r7, #24]
 80044d4:	3301      	adds	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	8afb      	ldrh	r3, [r7, #22]
 80044da:	3301      	adds	r3, #1
 80044dc:	b29b      	uxth	r3, r3
 80044de:	f7fd fb61 	bl	8001ba4 <LCD_DrawRectangle>
 80044e2:	e086      	b.n	80045f2 <getChooseSetAndRun+0x45a>
				}
				else if(Row == 1)
 80044e4:	4b2e      	ldr	r3, [pc, #184]	; (80045a0 <getChooseSetAndRun+0x408>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d123      	bne.n	8004534 <getChooseSetAndRun+0x39c>
				{
					LCD_SetColorPoint(WHITE);
 80044ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80044f0:	f7fe ff98 	bl	8003424 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonRun-1,YsButtonRun-1,XeButtonRun+1,YeButtonRun+1);
 80044f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b298      	uxth	r0, r3
 80044fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b299      	uxth	r1, r3
 8004500:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004502:	3301      	adds	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004508:	3301      	adds	r3, #1
 800450a:	b29b      	uxth	r3, r3
 800450c:	f7fd fb4a 	bl	8001ba4 <LCD_DrawRectangle>
					LCD_SetColorPoint(BLUE);
 8004510:	201f      	movs	r0, #31
 8004512:	f7fe ff87 	bl	8003424 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonUpDownTimeHold-1,YsButtonUpDownTimeHold-1,XeButtonUpDownTimeHold+1,YeButtonUpDownTimeHold+1);
 8004516:	8abb      	ldrh	r3, [r7, #20]
 8004518:	3b01      	subs	r3, #1
 800451a:	b298      	uxth	r0, r3
 800451c:	8a7b      	ldrh	r3, [r7, #18]
 800451e:	3b01      	subs	r3, #1
 8004520:	b299      	uxth	r1, r3
 8004522:	8a3b      	ldrh	r3, [r7, #16]
 8004524:	3301      	adds	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	89fb      	ldrh	r3, [r7, #14]
 800452a:	3301      	adds	r3, #1
 800452c:	b29b      	uxth	r3, r3
 800452e:	f7fd fb39 	bl	8001ba4 <LCD_DrawRectangle>
 8004532:	e05e      	b.n	80045f2 <getChooseSetAndRun+0x45a>
				}else if(Row == 2)
 8004534:	4b1a      	ldr	r3, [pc, #104]	; (80045a0 <getChooseSetAndRun+0x408>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d133      	bne.n	80045a4 <getChooseSetAndRun+0x40c>
				{
					LCD_SetColorPoint(WHITE);
 800453c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004540:	f7fe ff70 	bl	8003424 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonReturn-1,YsButtonReturn-1,XeButtonReturn+1,YeButtonReturn+1);
 8004544:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004546:	3b01      	subs	r3, #1
 8004548:	b298      	uxth	r0, r3
 800454a:	8c3b      	ldrh	r3, [r7, #32]
 800454c:	3b01      	subs	r3, #1
 800454e:	b299      	uxth	r1, r3
 8004550:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004552:	3301      	adds	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	8bfb      	ldrh	r3, [r7, #30]
 8004558:	3301      	adds	r3, #1
 800455a:	b29b      	uxth	r3, r3
 800455c:	f7fd fb22 	bl	8001ba4 <LCD_DrawRectangle>
					LCD_SetColorPoint(BLUE);
 8004560:	201f      	movs	r0, #31
 8004562:	f7fe ff5f 	bl	8003424 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonRun-1,YsButtonRun-1,XeButtonRun+1,YeButtonRun+1);
 8004566:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004568:	3b01      	subs	r3, #1
 800456a:	b298      	uxth	r0, r3
 800456c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800456e:	3b01      	subs	r3, #1
 8004570:	b299      	uxth	r1, r3
 8004572:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004574:	3301      	adds	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800457a:	3301      	adds	r3, #1
 800457c:	b29b      	uxth	r3, r3
 800457e:	f7fd fb11 	bl	8001ba4 <LCD_DrawRectangle>
 8004582:	e036      	b.n	80045f2 <getChooseSetAndRun+0x45a>
 8004584:	20000140 	.word	0x20000140
 8004588:	20000144 	.word	0x20000144
 800458c:	20000148 	.word	0x20000148
 8004590:	08006764 	.word	0x08006764
 8004594:	08006770 	.word	0x08006770
 8004598:	080067e0 	.word	0x080067e0
 800459c:	080067f0 	.word	0x080067f0
 80045a0:	20000149 	.word	0x20000149

				}else if(Row == 3)
 80045a4:	4b6d      	ldr	r3, [pc, #436]	; (800475c <getChooseSetAndRun+0x5c4>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d122      	bne.n	80045f2 <getChooseSetAndRun+0x45a>
				{
					LCD_SetColorPoint(WHITE);
 80045ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80045b0:	f7fe ff38 	bl	8003424 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonUpDownCntMax-1,YsButtonUpDownCntMax-1,XeButtonUpDownCntMax+1,YeButtonUpDownCntMax+1);
 80045b4:	8bbb      	ldrh	r3, [r7, #28]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b298      	uxth	r0, r3
 80045ba:	8b7b      	ldrh	r3, [r7, #26]
 80045bc:	3b01      	subs	r3, #1
 80045be:	b299      	uxth	r1, r3
 80045c0:	8b3b      	ldrh	r3, [r7, #24]
 80045c2:	3301      	adds	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	8afb      	ldrh	r3, [r7, #22]
 80045c8:	3301      	adds	r3, #1
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f7fd faea 	bl	8001ba4 <LCD_DrawRectangle>
					LCD_SetColorPoint(BLUE);
 80045d0:	201f      	movs	r0, #31
 80045d2:	f7fe ff27 	bl	8003424 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonReturn-1,YsButtonReturn-1,XeButtonReturn+1,YeButtonReturn+1);
 80045d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045d8:	3b01      	subs	r3, #1
 80045da:	b298      	uxth	r0, r3
 80045dc:	8c3b      	ldrh	r3, [r7, #32]
 80045de:	3b01      	subs	r3, #1
 80045e0:	b299      	uxth	r1, r3
 80045e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045e4:	3301      	adds	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	8bfb      	ldrh	r3, [r7, #30]
 80045ea:	3301      	adds	r3, #1
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	f7fd fad9 	bl	8001ba4 <LCD_DrawRectangle>
				}
				key = NOKEY;
 80045f2:	2300      	movs	r3, #0
 80045f4:	65bb      	str	r3, [r7, #88]	; 0x58
				break;
 80045f6:	f000 be12 	b.w	800521e <getChooseSetAndRun+0x1086>
			case DOWN:
				Row++;
 80045fa:	4b58      	ldr	r3, [pc, #352]	; (800475c <getChooseSetAndRun+0x5c4>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	3301      	adds	r3, #1
 8004600:	b2da      	uxtb	r2, r3
 8004602:	4b56      	ldr	r3, [pc, #344]	; (800475c <getChooseSetAndRun+0x5c4>)
 8004604:	701a      	strb	r2, [r3, #0]
				if(Row == 4)
 8004606:	4b55      	ldr	r3, [pc, #340]	; (800475c <getChooseSetAndRun+0x5c4>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b04      	cmp	r3, #4
 800460c:	d102      	bne.n	8004614 <getChooseSetAndRun+0x47c>
				{
					Row = 0;
 800460e:	4b53      	ldr	r3, [pc, #332]	; (800475c <getChooseSetAndRun+0x5c4>)
 8004610:	2200      	movs	r2, #0
 8004612:	701a      	strb	r2, [r3, #0]
				}
				if(Row == 0)
 8004614:	4b51      	ldr	r3, [pc, #324]	; (800475c <getChooseSetAndRun+0x5c4>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d123      	bne.n	8004664 <getChooseSetAndRun+0x4cc>
				{
					LCD_SetColorPoint(WHITE);
 800461c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004620:	f7fe ff00 	bl	8003424 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonReturn-1,YsButtonReturn-1,XeButtonReturn+1,YeButtonReturn+1);
 8004624:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004626:	3b01      	subs	r3, #1
 8004628:	b298      	uxth	r0, r3
 800462a:	8c3b      	ldrh	r3, [r7, #32]
 800462c:	3b01      	subs	r3, #1
 800462e:	b299      	uxth	r1, r3
 8004630:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004632:	3301      	adds	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	8bfb      	ldrh	r3, [r7, #30]
 8004638:	3301      	adds	r3, #1
 800463a:	b29b      	uxth	r3, r3
 800463c:	f7fd fab2 	bl	8001ba4 <LCD_DrawRectangle>
					LCD_SetColorPoint(BLUE);
 8004640:	201f      	movs	r0, #31
 8004642:	f7fe feef 	bl	8003424 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonUpDownCntMax-1,YsButtonUpDownCntMax-1,XeButtonUpDownCntMax+1,YeButtonUpDownCntMax+1);
 8004646:	8bbb      	ldrh	r3, [r7, #28]
 8004648:	3b01      	subs	r3, #1
 800464a:	b298      	uxth	r0, r3
 800464c:	8b7b      	ldrh	r3, [r7, #26]
 800464e:	3b01      	subs	r3, #1
 8004650:	b299      	uxth	r1, r3
 8004652:	8b3b      	ldrh	r3, [r7, #24]
 8004654:	3301      	adds	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	8afb      	ldrh	r3, [r7, #22]
 800465a:	3301      	adds	r3, #1
 800465c:	b29b      	uxth	r3, r3
 800465e:	f7fd faa1 	bl	8001ba4 <LCD_DrawRectangle>
 8004662:	e076      	b.n	8004752 <getChooseSetAndRun+0x5ba>
				}
				else if(Row == 1)
 8004664:	4b3d      	ldr	r3, [pc, #244]	; (800475c <getChooseSetAndRun+0x5c4>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d123      	bne.n	80046b4 <getChooseSetAndRun+0x51c>
				{
					LCD_SetColorPoint(WHITE);
 800466c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004670:	f7fe fed8 	bl	8003424 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonUpDownCntMax-1,YsButtonUpDownCntMax-1,XeButtonUpDownCntMax+1,YeButtonUpDownCntMax+1);
 8004674:	8bbb      	ldrh	r3, [r7, #28]
 8004676:	3b01      	subs	r3, #1
 8004678:	b298      	uxth	r0, r3
 800467a:	8b7b      	ldrh	r3, [r7, #26]
 800467c:	3b01      	subs	r3, #1
 800467e:	b299      	uxth	r1, r3
 8004680:	8b3b      	ldrh	r3, [r7, #24]
 8004682:	3301      	adds	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	8afb      	ldrh	r3, [r7, #22]
 8004688:	3301      	adds	r3, #1
 800468a:	b29b      	uxth	r3, r3
 800468c:	f7fd fa8a 	bl	8001ba4 <LCD_DrawRectangle>
					LCD_SetColorPoint(BLUE);
 8004690:	201f      	movs	r0, #31
 8004692:	f7fe fec7 	bl	8003424 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonUpDownTimeHold-1,YsButtonUpDownTimeHold-1,XeButtonUpDownTimeHold+1,YeButtonUpDownTimeHold+1);
 8004696:	8abb      	ldrh	r3, [r7, #20]
 8004698:	3b01      	subs	r3, #1
 800469a:	b298      	uxth	r0, r3
 800469c:	8a7b      	ldrh	r3, [r7, #18]
 800469e:	3b01      	subs	r3, #1
 80046a0:	b299      	uxth	r1, r3
 80046a2:	8a3b      	ldrh	r3, [r7, #16]
 80046a4:	3301      	adds	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	89fb      	ldrh	r3, [r7, #14]
 80046aa:	3301      	adds	r3, #1
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f7fd fa79 	bl	8001ba4 <LCD_DrawRectangle>
 80046b2:	e04e      	b.n	8004752 <getChooseSetAndRun+0x5ba>
				}else if(Row == 2)
 80046b4:	4b29      	ldr	r3, [pc, #164]	; (800475c <getChooseSetAndRun+0x5c4>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d123      	bne.n	8004704 <getChooseSetAndRun+0x56c>
				{
					LCD_SetColorPoint(WHITE);
 80046bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80046c0:	f7fe feb0 	bl	8003424 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonUpDownTimeHold-1,YsButtonUpDownTimeHold-1,XeButtonUpDownTimeHold+1,YeButtonUpDownTimeHold+1);
 80046c4:	8abb      	ldrh	r3, [r7, #20]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b298      	uxth	r0, r3
 80046ca:	8a7b      	ldrh	r3, [r7, #18]
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b299      	uxth	r1, r3
 80046d0:	8a3b      	ldrh	r3, [r7, #16]
 80046d2:	3301      	adds	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	89fb      	ldrh	r3, [r7, #14]
 80046d8:	3301      	adds	r3, #1
 80046da:	b29b      	uxth	r3, r3
 80046dc:	f7fd fa62 	bl	8001ba4 <LCD_DrawRectangle>
					LCD_SetColorPoint(BLUE);
 80046e0:	201f      	movs	r0, #31
 80046e2:	f7fe fe9f 	bl	8003424 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonRun-1,YsButtonRun-1,XeButtonRun+1,YeButtonRun+1);
 80046e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b298      	uxth	r0, r3
 80046ec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b299      	uxth	r1, r3
 80046f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80046f4:	3301      	adds	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046fa:	3301      	adds	r3, #1
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	f7fd fa51 	bl	8001ba4 <LCD_DrawRectangle>
 8004702:	e026      	b.n	8004752 <getChooseSetAndRun+0x5ba>

				}else if(Row == 3)
 8004704:	4b15      	ldr	r3, [pc, #84]	; (800475c <getChooseSetAndRun+0x5c4>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b03      	cmp	r3, #3
 800470a:	d122      	bne.n	8004752 <getChooseSetAndRun+0x5ba>
				{
					LCD_SetColorPoint(WHITE);
 800470c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004710:	f7fe fe88 	bl	8003424 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonRun-1,YsButtonRun-1,XeButtonRun+1,YeButtonRun+1);
 8004714:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004716:	3b01      	subs	r3, #1
 8004718:	b298      	uxth	r0, r3
 800471a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800471c:	3b01      	subs	r3, #1
 800471e:	b299      	uxth	r1, r3
 8004720:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004722:	3301      	adds	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004728:	3301      	adds	r3, #1
 800472a:	b29b      	uxth	r3, r3
 800472c:	f7fd fa3a 	bl	8001ba4 <LCD_DrawRectangle>
					LCD_SetColorPoint(BLUE);
 8004730:	201f      	movs	r0, #31
 8004732:	f7fe fe77 	bl	8003424 <LCD_SetColorPoint>
					LCD_DrawRectangle(XsButtonReturn-1,YsButtonReturn-1,XeButtonReturn+1,YeButtonReturn+1);
 8004736:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004738:	3b01      	subs	r3, #1
 800473a:	b298      	uxth	r0, r3
 800473c:	8c3b      	ldrh	r3, [r7, #32]
 800473e:	3b01      	subs	r3, #1
 8004740:	b299      	uxth	r1, r3
 8004742:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004744:	3301      	adds	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	8bfb      	ldrh	r3, [r7, #30]
 800474a:	3301      	adds	r3, #1
 800474c:	b29b      	uxth	r3, r3
 800474e:	f7fd fa29 	bl	8001ba4 <LCD_DrawRectangle>
				}
				key = NOKEY;
 8004752:	2300      	movs	r3, #0
 8004754:	65bb      	str	r3, [r7, #88]	; 0x58
				break;
 8004756:	f000 bd62 	b.w	800521e <getChooseSetAndRun+0x1086>
 800475a:	bf00      	nop
 800475c:	20000149 	.word	0x20000149
			case SELECT:

				if(Row == 0)
 8004760:	4ba5      	ldr	r3, [pc, #660]	; (80049f8 <getChooseSetAndRun+0x860>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	f040 8293 	bne.w	8004c90 <getChooseSetAndRun+0xaf8>
				{
					LCD_SetColorPoint(GREEN);
 800476a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800476e:	f7fe fe59 	bl	8003424 <LCD_SetColorPoint>
					Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/4,\
 8004772:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004776:	089b      	lsrs	r3, r3, #2
 8004778:	b29a      	uxth	r2, r3
 800477a:	8bbb      	ldrh	r3, [r7, #28]
 800477c:	4413      	add	r3, r2
 800477e:	b298      	uxth	r0, r3
							YsButtonUpDownCntMax + heightButtonUpDown*2/3, \
 8004780:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	4a9d      	ldr	r2, [pc, #628]	; (80049fc <getChooseSetAndRun+0x864>)
 8004788:	fb82 1203 	smull	r1, r2, r2, r3
 800478c:	17db      	asrs	r3, r3, #31
 800478e:	1ad3      	subs	r3, r2, r3
					Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/4,\
 8004790:	b29a      	uxth	r2, r3
 8004792:	8b7b      	ldrh	r3, [r7, #26]
 8004794:	4413      	add	r3, r2
 8004796:	b29c      	uxth	r4, r3
							XsButtonUpDownCntMax + widthButtonUpDown/2+widthButtonUpDown/4, \
 8004798:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	8bbb      	ldrh	r3, [r7, #28]
 80047a2:	4413      	add	r3, r2
 80047a4:	b29a      	uxth	r2, r3
					Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/4,\
 80047a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80047aa:	089b      	lsrs	r3, r3, #2
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	4413      	add	r3, r2
 80047b0:	b29d      	uxth	r5, r3
							YsButtonUpDownCntMax + heightButtonUpDown*2/3, \
 80047b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	4a90      	ldr	r2, [pc, #576]	; (80049fc <getChooseSetAndRun+0x864>)
 80047ba:	fb82 1203 	smull	r1, r2, r2, r3
 80047be:	17db      	asrs	r3, r3, #31
 80047c0:	1ad3      	subs	r3, r2, r3
					Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/4,\
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	8b7b      	ldrh	r3, [r7, #26]
 80047c6:	4413      	add	r3, r2
 80047c8:	b29e      	uxth	r6, r3
 80047ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80047ce:	085b      	lsrs	r3, r3, #1
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	8bbb      	ldrh	r3, [r7, #28]
 80047d4:	4413      	add	r3, r2
 80047d6:	b29b      	uxth	r3, r3
							XsButtonUpDownCntMax + widthButtonUpDown/2, \
							YsButtonUpDownCntMax + heightButtonUpDown-3);
 80047d8:	8b79      	ldrh	r1, [r7, #26]
 80047da:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80047de:	440a      	add	r2, r1
 80047e0:	b292      	uxth	r2, r2
					Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/4,\
 80047e2:	3a03      	subs	r2, #3
 80047e4:	b292      	uxth	r2, r2
 80047e6:	9201      	str	r2, [sp, #4]
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	4633      	mov	r3, r6
 80047ec:	462a      	mov	r2, r5
 80047ee:	4621      	mov	r1, r4
 80047f0:	f7fd fb12 	bl	8001e18 <Fill_Triangel>
					Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/2,\
 80047f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80047f8:	085b      	lsrs	r3, r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	8bbb      	ldrh	r3, [r7, #28]
 80047fe:	4413      	add	r3, r2
 8004800:	b298      	uxth	r0, r3
 8004802:	8b7b      	ldrh	r3, [r7, #26]
 8004804:	3303      	adds	r3, #3
 8004806:	b29c      	uxth	r4, r3
							YsButtonUpDownCntMax + 3,\
							XsButtonUpDownCntMax + widthButtonUpDown/2+widthButtonUpDown/4, \
 8004808:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800480c:	085b      	lsrs	r3, r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	8bbb      	ldrh	r3, [r7, #28]
 8004812:	4413      	add	r3, r2
 8004814:	b29a      	uxth	r2, r3
					Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/2,\
 8004816:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800481a:	089b      	lsrs	r3, r3, #2
 800481c:	b29b      	uxth	r3, r3
 800481e:	4413      	add	r3, r2
 8004820:	b29d      	uxth	r5, r3
 8004822:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004826:	4a76      	ldr	r2, [pc, #472]	; (8004a00 <getChooseSetAndRun+0x868>)
 8004828:	fba2 2303 	umull	r2, r3, r2, r3
 800482c:	085b      	lsrs	r3, r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	8b7b      	ldrh	r3, [r7, #26]
 8004832:	4413      	add	r3, r2
 8004834:	b29e      	uxth	r6, r3
 8004836:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800483a:	089b      	lsrs	r3, r3, #2
 800483c:	b29a      	uxth	r2, r3
 800483e:	8bbb      	ldrh	r3, [r7, #28]
 8004840:	4413      	add	r3, r2
 8004842:	b29b      	uxth	r3, r3
 8004844:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004848:	496d      	ldr	r1, [pc, #436]	; (8004a00 <getChooseSetAndRun+0x868>)
 800484a:	fba1 1202 	umull	r1, r2, r1, r2
 800484e:	0852      	lsrs	r2, r2, #1
 8004850:	b291      	uxth	r1, r2
 8004852:	8b7a      	ldrh	r2, [r7, #26]
 8004854:	440a      	add	r2, r1
 8004856:	b292      	uxth	r2, r2
 8004858:	9201      	str	r2, [sp, #4]
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	4633      	mov	r3, r6
 800485e:	462a      	mov	r2, r5
 8004860:	4621      	mov	r1, r4
 8004862:	f7fd fad9 	bl	8001e18 <Fill_Triangel>
							YsButtonUpDownCntMax+heightButtonUpDown/3, \
							XsButtonUpDownCntMax + widthButtonUpDown/4, \
							YsButtonUpDownCntMax+heightButtonUpDown/3);

					do{
						key = processEventButton();
 8004866:	f7fc f9ed 	bl	8000c44 <processEventButton>
 800486a:	4603      	mov	r3, r0
 800486c:	65bb      	str	r3, [r7, #88]	; 0x58
 800486e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004870:	3b01      	subs	r3, #1
 8004872:	2b0d      	cmp	r3, #13
 8004874:	f200 81fb 	bhi.w	8004c6e <getChooseSetAndRun+0xad6>
 8004878:	a201      	add	r2, pc, #4	; (adr r2, 8004880 <getChooseSetAndRun+0x6e8>)
 800487a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487e:	bf00      	nop
 8004880:	08004b4b 	.word	0x08004b4b
 8004884:	08004c4f 	.word	0x08004c4f
 8004888:	080048b9 	.word	0x080048b9
 800488c:	080048ed 	.word	0x080048ed
 8004890:	08004921 	.word	0x08004921
 8004894:	08004955 	.word	0x08004955
 8004898:	0800498b 	.word	0x0800498b
 800489c:	080049c3 	.word	0x080049c3
 80048a0:	08004a0d 	.word	0x08004a0d
 80048a4:	08004a41 	.word	0x08004a41
 80048a8:	08004a75 	.word	0x08004a75
 80048ac:	08004aa9 	.word	0x08004aa9
 80048b0:	08004adf 	.word	0x08004adf
 80048b4:	08004b17 	.word	0x08004b17
						switch(key)
						{
						case UP:
							dwCountMaxTemp ++;
 80048b8:	4b52      	ldr	r3, [pc, #328]	; (8004a04 <getChooseSetAndRun+0x86c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3301      	adds	r3, #1
 80048be:	4a51      	ldr	r2, [pc, #324]	; (8004a04 <getChooseSetAndRun+0x86c>)
 80048c0:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 80048c2:	4b50      	ldr	r3, [pc, #320]	; (8004a04 <getChooseSetAndRun+0x86c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a50      	ldr	r2, [pc, #320]	; (8004a08 <getChooseSetAndRun+0x870>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d902      	bls.n	80048d2 <getChooseSetAndRun+0x73a>
							{
								dwCountMaxTemp = 1;
 80048cc:	4b4d      	ldr	r3, [pc, #308]	; (8004a04 <getChooseSetAndRun+0x86c>)
 80048ce:	2201      	movs	r2, #1
 80048d0:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 80048d2:	4b4c      	ldr	r3, [pc, #304]	; (8004a04 <getChooseSetAndRun+0x86c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 80048d8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80048da:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 80048dc:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	4623      	mov	r3, r4
 80048e2:	f7fd ffed 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 80048e6:	2300      	movs	r3, #0
 80048e8:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 80048ea:	e1c0      	b.n	8004c6e <getChooseSetAndRun+0xad6>
						case UP_DOUBLE:
							dwCountMaxTemp +=10;
 80048ec:	4b45      	ldr	r3, [pc, #276]	; (8004a04 <getChooseSetAndRun+0x86c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	330a      	adds	r3, #10
 80048f2:	4a44      	ldr	r2, [pc, #272]	; (8004a04 <getChooseSetAndRun+0x86c>)
 80048f4:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 80048f6:	4b43      	ldr	r3, [pc, #268]	; (8004a04 <getChooseSetAndRun+0x86c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a43      	ldr	r2, [pc, #268]	; (8004a08 <getChooseSetAndRun+0x870>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d902      	bls.n	8004906 <getChooseSetAndRun+0x76e>
							{
								dwCountMaxTemp = 1;
 8004900:	4b40      	ldr	r3, [pc, #256]	; (8004a04 <getChooseSetAndRun+0x86c>)
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 8004906:	4b3f      	ldr	r3, [pc, #252]	; (8004a04 <getChooseSetAndRun+0x86c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 800490c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800490e:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8004910:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	4623      	mov	r3, r4
 8004916:	f7fd ffd3 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 800491a:	2300      	movs	r3, #0
 800491c:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 800491e:	e1a6      	b.n	8004c6e <getChooseSetAndRun+0xad6>
						case UP_TRIPLE:
							dwCountMaxTemp +=100;
 8004920:	4b38      	ldr	r3, [pc, #224]	; (8004a04 <getChooseSetAndRun+0x86c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3364      	adds	r3, #100	; 0x64
 8004926:	4a37      	ldr	r2, [pc, #220]	; (8004a04 <getChooseSetAndRun+0x86c>)
 8004928:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 800492a:	4b36      	ldr	r3, [pc, #216]	; (8004a04 <getChooseSetAndRun+0x86c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a36      	ldr	r2, [pc, #216]	; (8004a08 <getChooseSetAndRun+0x870>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d902      	bls.n	800493a <getChooseSetAndRun+0x7a2>
							{
								dwCountMaxTemp = 1;
 8004934:	4b33      	ldr	r3, [pc, #204]	; (8004a04 <getChooseSetAndRun+0x86c>)
 8004936:	2201      	movs	r2, #1
 8004938:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 800493a:	4b32      	ldr	r3, [pc, #200]	; (8004a04 <getChooseSetAndRun+0x86c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8004940:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004942:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8004944:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	4623      	mov	r3, r4
 800494a:	f7fd ffb9 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 800494e:	2300      	movs	r3, #0
 8004950:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004952:	e18c      	b.n	8004c6e <getChooseSetAndRun+0xad6>
						case UP_QUADRUPLE:
							dwCountMaxTemp +=1000;
 8004954:	4b2b      	ldr	r3, [pc, #172]	; (8004a04 <getChooseSetAndRun+0x86c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800495c:	4a29      	ldr	r2, [pc, #164]	; (8004a04 <getChooseSetAndRun+0x86c>)
 800495e:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 8004960:	4b28      	ldr	r3, [pc, #160]	; (8004a04 <getChooseSetAndRun+0x86c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a28      	ldr	r2, [pc, #160]	; (8004a08 <getChooseSetAndRun+0x870>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d902      	bls.n	8004970 <getChooseSetAndRun+0x7d8>
							{
								dwCountMaxTemp = 1;
 800496a:	4b26      	ldr	r3, [pc, #152]	; (8004a04 <getChooseSetAndRun+0x86c>)
 800496c:	2201      	movs	r2, #1
 800496e:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 8004970:	4b24      	ldr	r3, [pc, #144]	; (8004a04 <getChooseSetAndRun+0x86c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8004976:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004978:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800497a:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	4623      	mov	r3, r4
 8004980:	f7fd ff9e 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 8004984:	2300      	movs	r3, #0
 8004986:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004988:	e171      	b.n	8004c6e <getChooseSetAndRun+0xad6>
						case UP_QUINTUPLE:
							dwCountMaxTemp +=10000;
 800498a:	4b1e      	ldr	r3, [pc, #120]	; (8004a04 <getChooseSetAndRun+0x86c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004992:	3310      	adds	r3, #16
 8004994:	4a1b      	ldr	r2, [pc, #108]	; (8004a04 <getChooseSetAndRun+0x86c>)
 8004996:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 8004998:	4b1a      	ldr	r3, [pc, #104]	; (8004a04 <getChooseSetAndRun+0x86c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a1a      	ldr	r2, [pc, #104]	; (8004a08 <getChooseSetAndRun+0x870>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d902      	bls.n	80049a8 <getChooseSetAndRun+0x810>
							{
								dwCountMaxTemp = 1;
 80049a2:	4b18      	ldr	r3, [pc, #96]	; (8004a04 <getChooseSetAndRun+0x86c>)
 80049a4:	2201      	movs	r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 80049a8:	4b16      	ldr	r3, [pc, #88]	; (8004a04 <getChooseSetAndRun+0x86c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 80049ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80049b0:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 80049b2:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	4623      	mov	r3, r4
 80049b8:	f7fd ff82 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 80049bc:	2300      	movs	r3, #0
 80049be:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 80049c0:	e155      	b.n	8004c6e <getChooseSetAndRun+0xad6>
						case UP_HOLD:
							dwCountMaxTemp ++;
 80049c2:	4b10      	ldr	r3, [pc, #64]	; (8004a04 <getChooseSetAndRun+0x86c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3301      	adds	r3, #1
 80049c8:	4a0e      	ldr	r2, [pc, #56]	; (8004a04 <getChooseSetAndRun+0x86c>)
 80049ca:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 80049cc:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <getChooseSetAndRun+0x86c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a0d      	ldr	r2, [pc, #52]	; (8004a08 <getChooseSetAndRun+0x870>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d902      	bls.n	80049dc <getChooseSetAndRun+0x844>
							{
								dwCountMaxTemp = 1;
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <getChooseSetAndRun+0x86c>)
 80049d8:	2201      	movs	r2, #1
 80049da:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 80049dc:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <getChooseSetAndRun+0x86c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 80049e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80049e4:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 80049e6:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	4623      	mov	r3, r4
 80049ec:	f7fd ff68 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 80049f0:	2300      	movs	r3, #0
 80049f2:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 80049f4:	e13b      	b.n	8004c6e <getChooseSetAndRun+0xad6>
 80049f6:	bf00      	nop
 80049f8:	20000149 	.word	0x20000149
 80049fc:	55555556 	.word	0x55555556
 8004a00:	aaaaaaab 	.word	0xaaaaaaab
 8004a04:	20000140 	.word	0x20000140
 8004a08:	0001869f 	.word	0x0001869f
						case DOWN:
							dwCountMaxTemp --;
 8004a0c:	4b9b      	ldr	r3, [pc, #620]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3b01      	subs	r3, #1
 8004a12:	4a9a      	ldr	r2, [pc, #616]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004a14:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 8004a16:	4b99      	ldr	r3, [pc, #612]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a99      	ldr	r2, [pc, #612]	; (8004c80 <getChooseSetAndRun+0xae8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d902      	bls.n	8004a26 <getChooseSetAndRun+0x88e>
							{
								dwCountMaxTemp = 99999;
 8004a20:	4b96      	ldr	r3, [pc, #600]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004a22:	4a97      	ldr	r2, [pc, #604]	; (8004c80 <getChooseSetAndRun+0xae8>)
 8004a24:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 8004a26:	4b95      	ldr	r3, [pc, #596]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8004a2c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a2e:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8004a30:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	4623      	mov	r3, r4
 8004a36:	f7fd ff43 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004a3e:	e116      	b.n	8004c6e <getChooseSetAndRun+0xad6>
						case DOWN_DOUBLE:
							dwCountMaxTemp -=10;
 8004a40:	4b8e      	ldr	r3, [pc, #568]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3b0a      	subs	r3, #10
 8004a46:	4a8d      	ldr	r2, [pc, #564]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004a48:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 8004a4a:	4b8c      	ldr	r3, [pc, #560]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a8c      	ldr	r2, [pc, #560]	; (8004c80 <getChooseSetAndRun+0xae8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d902      	bls.n	8004a5a <getChooseSetAndRun+0x8c2>
							{
								dwCountMaxTemp = 99999;
 8004a54:	4b89      	ldr	r3, [pc, #548]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004a56:	4a8a      	ldr	r2, [pc, #552]	; (8004c80 <getChooseSetAndRun+0xae8>)
 8004a58:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 8004a5a:	4b88      	ldr	r3, [pc, #544]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8004a60:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a62:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8004a64:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	4623      	mov	r3, r4
 8004a6a:	f7fd ff29 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004a72:	e0fc      	b.n	8004c6e <getChooseSetAndRun+0xad6>
						case DOWN_TRIPLE:
							dwCountMaxTemp -=100;
 8004a74:	4b81      	ldr	r3, [pc, #516]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3b64      	subs	r3, #100	; 0x64
 8004a7a:	4a80      	ldr	r2, [pc, #512]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004a7c:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 8004a7e:	4b7f      	ldr	r3, [pc, #508]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a7f      	ldr	r2, [pc, #508]	; (8004c80 <getChooseSetAndRun+0xae8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d902      	bls.n	8004a8e <getChooseSetAndRun+0x8f6>
							{
								dwCountMaxTemp = 99999;
 8004a88:	4b7c      	ldr	r3, [pc, #496]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004a8a:	4a7d      	ldr	r2, [pc, #500]	; (8004c80 <getChooseSetAndRun+0xae8>)
 8004a8c:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 8004a8e:	4b7b      	ldr	r3, [pc, #492]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8004a94:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a96:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8004a98:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	4623      	mov	r3, r4
 8004a9e:	f7fd ff0f 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004aa6:	e0e2      	b.n	8004c6e <getChooseSetAndRun+0xad6>
						case DOWN_QUADRUPLE:
							dwCountMaxTemp -=1000;
 8004aa8:	4b74      	ldr	r3, [pc, #464]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8004ab0:	4a72      	ldr	r2, [pc, #456]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004ab2:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 8004ab4:	4b71      	ldr	r3, [pc, #452]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a71      	ldr	r2, [pc, #452]	; (8004c80 <getChooseSetAndRun+0xae8>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d902      	bls.n	8004ac4 <getChooseSetAndRun+0x92c>
							{
								dwCountMaxTemp = 99999;
 8004abe:	4b6f      	ldr	r3, [pc, #444]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004ac0:	4a6f      	ldr	r2, [pc, #444]	; (8004c80 <getChooseSetAndRun+0xae8>)
 8004ac2:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 8004ac4:	4b6d      	ldr	r3, [pc, #436]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8004aca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004acc:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8004ace:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	4623      	mov	r3, r4
 8004ad4:	f7fd fef4 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004adc:	e0c7      	b.n	8004c6e <getChooseSetAndRun+0xad6>
						case DOWN_QUINTUPLE:
							dwCountMaxTemp -=10000;
 8004ade:	4b67      	ldr	r3, [pc, #412]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8004ae6:	3b10      	subs	r3, #16
 8004ae8:	4a64      	ldr	r2, [pc, #400]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004aea:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 8004aec:	4b63      	ldr	r3, [pc, #396]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a63      	ldr	r2, [pc, #396]	; (8004c80 <getChooseSetAndRun+0xae8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d902      	bls.n	8004afc <getChooseSetAndRun+0x964>
							{
								dwCountMaxTemp = 99999;
 8004af6:	4b61      	ldr	r3, [pc, #388]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004af8:	4a61      	ldr	r2, [pc, #388]	; (8004c80 <getChooseSetAndRun+0xae8>)
 8004afa:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 8004afc:	4b5f      	ldr	r3, [pc, #380]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8004b02:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b04:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8004b06:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	4623      	mov	r3, r4
 8004b0c:	f7fd fed8 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 8004b10:	2300      	movs	r3, #0
 8004b12:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004b14:	e0ab      	b.n	8004c6e <getChooseSetAndRun+0xad6>
						case DOWN_HOLD:
							dwCountMaxTemp --;
 8004b16:	4b59      	ldr	r3, [pc, #356]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	4a57      	ldr	r2, [pc, #348]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004b1e:	6013      	str	r3, [r2, #0]
							if(dwCountMaxTemp > 99999)
 8004b20:	4b56      	ldr	r3, [pc, #344]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a56      	ldr	r2, [pc, #344]	; (8004c80 <getChooseSetAndRun+0xae8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d902      	bls.n	8004b30 <getChooseSetAndRun+0x998>
							{
								dwCountMaxTemp = 99999;
 8004b2a:	4b54      	ldr	r3, [pc, #336]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004b2c:	4a54      	ldr	r2, [pc, #336]	; (8004c80 <getChooseSetAndRun+0xae8>)
 8004b2e:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 8004b30:	4b52      	ldr	r3, [pc, #328]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8004b36:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b38:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8004b3a:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	4623      	mov	r3, r4
 8004b40:	f7fd febe 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 8004b44:	2300      	movs	r3, #0
 8004b46:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004b48:	e091      	b.n	8004c6e <getChooseSetAndRun+0xad6>
						case SELECT:
							LCD_SetColorPoint(BLACK);
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f7fe fc6a 	bl	8003424 <LCD_SetColorPoint>
							Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/4,\
 8004b50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004b54:	089b      	lsrs	r3, r3, #2
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	8bbb      	ldrh	r3, [r7, #28]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	b298      	uxth	r0, r3
									YsButtonUpDownCntMax + heightButtonUpDown*2/3, \
 8004b5e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	4a47      	ldr	r2, [pc, #284]	; (8004c84 <getChooseSetAndRun+0xaec>)
 8004b66:	fb82 1203 	smull	r1, r2, r2, r3
 8004b6a:	17db      	asrs	r3, r3, #31
 8004b6c:	1ad3      	subs	r3, r2, r3
							Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/4,\
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	8b7b      	ldrh	r3, [r7, #26]
 8004b72:	4413      	add	r3, r2
 8004b74:	b29c      	uxth	r4, r3
									XsButtonUpDownCntMax + widthButtonUpDown/2+widthButtonUpDown/4, \
 8004b76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004b7a:	085b      	lsrs	r3, r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	8bbb      	ldrh	r3, [r7, #28]
 8004b80:	4413      	add	r3, r2
 8004b82:	b29a      	uxth	r2, r3
							Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/4,\
 8004b84:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004b88:	089b      	lsrs	r3, r3, #2
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	b29d      	uxth	r5, r3
									YsButtonUpDownCntMax + heightButtonUpDown*2/3, \
 8004b90:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	4a3b      	ldr	r2, [pc, #236]	; (8004c84 <getChooseSetAndRun+0xaec>)
 8004b98:	fb82 1203 	smull	r1, r2, r2, r3
 8004b9c:	17db      	asrs	r3, r3, #31
 8004b9e:	1ad3      	subs	r3, r2, r3
							Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/4,\
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	8b7b      	ldrh	r3, [r7, #26]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	b29e      	uxth	r6, r3
 8004ba8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004bac:	085b      	lsrs	r3, r3, #1
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	8bbb      	ldrh	r3, [r7, #28]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	b29b      	uxth	r3, r3
									XsButtonUpDownCntMax + widthButtonUpDown/2, \
									YsButtonUpDownCntMax + heightButtonUpDown-3);
 8004bb6:	8b79      	ldrh	r1, [r7, #26]
 8004bb8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004bbc:	440a      	add	r2, r1
 8004bbe:	b292      	uxth	r2, r2
							Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/4,\
 8004bc0:	3a03      	subs	r2, #3
 8004bc2:	b292      	uxth	r2, r2
 8004bc4:	9201      	str	r2, [sp, #4]
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	4633      	mov	r3, r6
 8004bca:	462a      	mov	r2, r5
 8004bcc:	4621      	mov	r1, r4
 8004bce:	f7fd f923 	bl	8001e18 <Fill_Triangel>
							Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/2,\
 8004bd2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004bd6:	085b      	lsrs	r3, r3, #1
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	8bbb      	ldrh	r3, [r7, #28]
 8004bdc:	4413      	add	r3, r2
 8004bde:	b298      	uxth	r0, r3
 8004be0:	8b7b      	ldrh	r3, [r7, #26]
 8004be2:	3303      	adds	r3, #3
 8004be4:	b29c      	uxth	r4, r3
									YsButtonUpDownCntMax + 3,\
									XsButtonUpDownCntMax + widthButtonUpDown/2+widthButtonUpDown/4, \
 8004be6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	8bbb      	ldrh	r3, [r7, #28]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	b29a      	uxth	r2, r3
							Fill_Triangel(XsButtonUpDownCntMax+widthButtonUpDown/2,\
 8004bf4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004bf8:	089b      	lsrs	r3, r3, #2
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	b29d      	uxth	r5, r3
 8004c00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c04:	4a20      	ldr	r2, [pc, #128]	; (8004c88 <getChooseSetAndRun+0xaf0>)
 8004c06:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0a:	085b      	lsrs	r3, r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	8b7b      	ldrh	r3, [r7, #26]
 8004c10:	4413      	add	r3, r2
 8004c12:	b29e      	uxth	r6, r3
 8004c14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c18:	089b      	lsrs	r3, r3, #2
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	8bbb      	ldrh	r3, [r7, #28]
 8004c1e:	4413      	add	r3, r2
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004c26:	4918      	ldr	r1, [pc, #96]	; (8004c88 <getChooseSetAndRun+0xaf0>)
 8004c28:	fba1 1202 	umull	r1, r2, r1, r2
 8004c2c:	0852      	lsrs	r2, r2, #1
 8004c2e:	b291      	uxth	r1, r2
 8004c30:	8b7a      	ldrh	r2, [r7, #26]
 8004c32:	440a      	add	r2, r1
 8004c34:	b292      	uxth	r2, r2
 8004c36:	9201      	str	r2, [sp, #4]
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	4633      	mov	r3, r6
 8004c3c:	462a      	mov	r2, r5
 8004c3e:	4621      	mov	r1, r4
 8004c40:	f7fd f8ea 	bl	8001e18 <Fill_Triangel>
									YsButtonUpDownCntMax+heightButtonUpDown/3, \
									XsButtonUpDownCntMax + widthButtonUpDown/4, \
									YsButtonUpDownCntMax+heightButtonUpDown/3);
							pData[1] = dwCountMaxTemp;
 8004c44:	4b0d      	ldr	r3, [pc, #52]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a10      	ldr	r2, [pc, #64]	; (8004c8c <getChooseSetAndRun+0xaf4>)
 8004c4a:	6053      	str	r3, [r2, #4]

							break;
 8004c4c:	e00f      	b.n	8004c6e <getChooseSetAndRun+0xad6>
						case SELECT_DOUBLE:
							dwCountMaxTemp = 0;
 8004c4e:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
							LCD_UpdateEditNum(XsBoxCntMax, YsBoxCntMax, XeBoxCntMax, YeBoxCntMax, dwCountMaxTemp);
 8004c54:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <getChooseSetAndRun+0xae4>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8004c5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c5c:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8004c5e:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	4623      	mov	r3, r4
 8004c64:	f7fd fe2c 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004c6c:	bf00      	nop
						}
					}while(key != SELECT);
 8004c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	f47f adf8 	bne.w	8004866 <getChooseSetAndRun+0x6ce>

					key = NOKEY;
 8004c76:	2300      	movs	r3, #0
 8004c78:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c7a:	e2cc      	b.n	8005216 <getChooseSetAndRun+0x107e>
 8004c7c:	20000140 	.word	0x20000140
 8004c80:	0001869f 	.word	0x0001869f
 8004c84:	55555556 	.word	0x55555556
 8004c88:	aaaaaaab 	.word	0xaaaaaaab
 8004c8c:	20000124 	.word	0x20000124

				}else if(Row == 1)
 8004c90:	4ba5      	ldr	r3, [pc, #660]	; (8004f28 <getChooseSetAndRun+0xd90>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	f040 8293 	bne.w	80051c0 <getChooseSetAndRun+0x1028>
				{
					LCD_SetColorPoint(GREEN);
 8004c9a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8004c9e:	f7fe fbc1 	bl	8003424 <LCD_SetColorPoint>
					Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/2,\
 8004ca2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004ca6:	085b      	lsrs	r3, r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	8abb      	ldrh	r3, [r7, #20]
 8004cac:	4413      	add	r3, r2
 8004cae:	b298      	uxth	r0, r3
 8004cb0:	8a7b      	ldrh	r3, [r7, #18]
 8004cb2:	3303      	adds	r3, #3
 8004cb4:	b29c      	uxth	r4, r3
							YsButtonUpDownTimeHold + 3,\
							XsButtonUpDownTimeHold + widthButtonUpDown/2+widthButtonUpDown/4, \
 8004cb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004cba:	085b      	lsrs	r3, r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	8abb      	ldrh	r3, [r7, #20]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	b29a      	uxth	r2, r3
					Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/2,\
 8004cc4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004cc8:	089b      	lsrs	r3, r3, #2
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	4413      	add	r3, r2
 8004cce:	b29d      	uxth	r5, r3
 8004cd0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004cd4:	4a95      	ldr	r2, [pc, #596]	; (8004f2c <getChooseSetAndRun+0xd94>)
 8004cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cda:	085b      	lsrs	r3, r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	8a7b      	ldrh	r3, [r7, #18]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	b29e      	uxth	r6, r3
 8004ce4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004ce8:	089b      	lsrs	r3, r3, #2
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	8abb      	ldrh	r3, [r7, #20]
 8004cee:	4413      	add	r3, r2
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004cf6:	498d      	ldr	r1, [pc, #564]	; (8004f2c <getChooseSetAndRun+0xd94>)
 8004cf8:	fba1 1202 	umull	r1, r2, r1, r2
 8004cfc:	0852      	lsrs	r2, r2, #1
 8004cfe:	b291      	uxth	r1, r2
 8004d00:	8a7a      	ldrh	r2, [r7, #18]
 8004d02:	440a      	add	r2, r1
 8004d04:	b292      	uxth	r2, r2
 8004d06:	9201      	str	r2, [sp, #4]
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	4633      	mov	r3, r6
 8004d0c:	462a      	mov	r2, r5
 8004d0e:	4621      	mov	r1, r4
 8004d10:	f7fd f882 	bl	8001e18 <Fill_Triangel>
							YsButtonUpDownTimeHold+heightButtonUpDown/3, \
							XsButtonUpDownTimeHold + widthButtonUpDown/4, \
							YsButtonUpDownTimeHold+heightButtonUpDown/3);
					Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/4,\
 8004d14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004d18:	089b      	lsrs	r3, r3, #2
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	8abb      	ldrh	r3, [r7, #20]
 8004d1e:	4413      	add	r3, r2
 8004d20:	b298      	uxth	r0, r3
							YsButtonUpDownTimeHold + heightButtonUpDown*2/3, \
 8004d22:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	4a81      	ldr	r2, [pc, #516]	; (8004f30 <getChooseSetAndRun+0xd98>)
 8004d2a:	fb82 1203 	smull	r1, r2, r2, r3
 8004d2e:	17db      	asrs	r3, r3, #31
 8004d30:	1ad3      	subs	r3, r2, r3
					Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/4,\
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	8a7b      	ldrh	r3, [r7, #18]
 8004d36:	4413      	add	r3, r2
 8004d38:	b29c      	uxth	r4, r3
							XsButtonUpDownTimeHold + widthButtonUpDown/2+widthButtonUpDown/4, \
 8004d3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004d3e:	085b      	lsrs	r3, r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	8abb      	ldrh	r3, [r7, #20]
 8004d44:	4413      	add	r3, r2
 8004d46:	b29a      	uxth	r2, r3
					Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/4,\
 8004d48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004d4c:	089b      	lsrs	r3, r3, #2
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	4413      	add	r3, r2
 8004d52:	b29d      	uxth	r5, r3
							YsButtonUpDownTimeHold + heightButtonUpDown*2/3, \
 8004d54:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	4a75      	ldr	r2, [pc, #468]	; (8004f30 <getChooseSetAndRun+0xd98>)
 8004d5c:	fb82 1203 	smull	r1, r2, r2, r3
 8004d60:	17db      	asrs	r3, r3, #31
 8004d62:	1ad3      	subs	r3, r2, r3
					Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/4,\
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	8a7b      	ldrh	r3, [r7, #18]
 8004d68:	4413      	add	r3, r2
 8004d6a:	b29e      	uxth	r6, r3
 8004d6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004d70:	085b      	lsrs	r3, r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	8abb      	ldrh	r3, [r7, #20]
 8004d76:	4413      	add	r3, r2
 8004d78:	b29b      	uxth	r3, r3
							XsButtonUpDownTimeHold + widthButtonUpDown/2, \
							YsButtonUpDownTimeHold + heightButtonUpDown-3);
 8004d7a:	8a79      	ldrh	r1, [r7, #18]
 8004d7c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004d80:	440a      	add	r2, r1
 8004d82:	b292      	uxth	r2, r2
					Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/4,\
 8004d84:	3a03      	subs	r2, #3
 8004d86:	b292      	uxth	r2, r2
 8004d88:	9201      	str	r2, [sp, #4]
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	4633      	mov	r3, r6
 8004d8e:	462a      	mov	r2, r5
 8004d90:	4621      	mov	r1, r4
 8004d92:	f7fd f841 	bl	8001e18 <Fill_Triangel>

					do{
						key = processEventButton();
 8004d96:	f7fb ff55 	bl	8000c44 <processEventButton>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004da0:	3b01      	subs	r3, #1
 8004da2:	2b0d      	cmp	r3, #13
 8004da4:	f200 81fb 	bhi.w	800519e <getChooseSetAndRun+0x1006>
 8004da8:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <getChooseSetAndRun+0xc18>)
 8004daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dae:	bf00      	nop
 8004db0:	0800507b 	.word	0x0800507b
 8004db4:	0800517f 	.word	0x0800517f
 8004db8:	08004de9 	.word	0x08004de9
 8004dbc:	08004e1d 	.word	0x08004e1d
 8004dc0:	08004e51 	.word	0x08004e51
 8004dc4:	08004e85 	.word	0x08004e85
 8004dc8:	08004ebb 	.word	0x08004ebb
 8004dcc:	08004ef3 	.word	0x08004ef3
 8004dd0:	08004f3d 	.word	0x08004f3d
 8004dd4:	08004f71 	.word	0x08004f71
 8004dd8:	08004fa5 	.word	0x08004fa5
 8004ddc:	08004fd9 	.word	0x08004fd9
 8004de0:	0800500f 	.word	0x0800500f
 8004de4:	08005047 	.word	0x08005047
						switch(key)
						{
						case UP:
							dwTimeHoldTemp ++;
 8004de8:	4b52      	ldr	r3, [pc, #328]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3301      	adds	r3, #1
 8004dee:	4a51      	ldr	r2, [pc, #324]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004df0:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 8004df2:	4b50      	ldr	r3, [pc, #320]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a50      	ldr	r2, [pc, #320]	; (8004f38 <getChooseSetAndRun+0xda0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d902      	bls.n	8004e02 <getChooseSetAndRun+0xc6a>
							{
								dwTimeHoldTemp = 1;
 8004dfc:	4b4d      	ldr	r3, [pc, #308]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 8004e02:	4b4c      	ldr	r3, [pc, #304]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004e08:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004e0a:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8004e0c:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	4623      	mov	r3, r4
 8004e12:	f7fd fd55 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 8004e16:	2300      	movs	r3, #0
 8004e18:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004e1a:	e1c0      	b.n	800519e <getChooseSetAndRun+0x1006>
						case UP_DOUBLE:
							dwTimeHoldTemp +=10;
 8004e1c:	4b45      	ldr	r3, [pc, #276]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	330a      	adds	r3, #10
 8004e22:	4a44      	ldr	r2, [pc, #272]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004e24:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 8004e26:	4b43      	ldr	r3, [pc, #268]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a43      	ldr	r2, [pc, #268]	; (8004f38 <getChooseSetAndRun+0xda0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d902      	bls.n	8004e36 <getChooseSetAndRun+0xc9e>
							{
								dwTimeHoldTemp = 1;
 8004e30:	4b40      	ldr	r3, [pc, #256]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004e32:	2201      	movs	r2, #1
 8004e34:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 8004e36:	4b3f      	ldr	r3, [pc, #252]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004e3c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004e3e:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8004e40:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	4623      	mov	r3, r4
 8004e46:	f7fd fd3b 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004e4e:	e1a6      	b.n	800519e <getChooseSetAndRun+0x1006>
						case UP_TRIPLE:
							dwTimeHoldTemp +=100;
 8004e50:	4b38      	ldr	r3, [pc, #224]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3364      	adds	r3, #100	; 0x64
 8004e56:	4a37      	ldr	r2, [pc, #220]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004e58:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 8004e5a:	4b36      	ldr	r3, [pc, #216]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a36      	ldr	r2, [pc, #216]	; (8004f38 <getChooseSetAndRun+0xda0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d902      	bls.n	8004e6a <getChooseSetAndRun+0xcd2>
							{
								dwTimeHoldTemp = 1;
 8004e64:	4b33      	ldr	r3, [pc, #204]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004e66:	2201      	movs	r2, #1
 8004e68:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 8004e6a:	4b32      	ldr	r3, [pc, #200]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004e70:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004e72:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8004e74:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	4623      	mov	r3, r4
 8004e7a:	f7fd fd21 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004e82:	e18c      	b.n	800519e <getChooseSetAndRun+0x1006>
						case UP_QUADRUPLE:
							dwTimeHoldTemp +=1000;
 8004e84:	4b2b      	ldr	r3, [pc, #172]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004e8c:	4a29      	ldr	r2, [pc, #164]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004e8e:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 8004e90:	4b28      	ldr	r3, [pc, #160]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a28      	ldr	r2, [pc, #160]	; (8004f38 <getChooseSetAndRun+0xda0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d902      	bls.n	8004ea0 <getChooseSetAndRun+0xd08>
							{
								dwTimeHoldTemp = 1;
 8004e9a:	4b26      	ldr	r3, [pc, #152]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 8004ea0:	4b24      	ldr	r3, [pc, #144]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004ea6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004ea8:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8004eaa:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	4623      	mov	r3, r4
 8004eb0:	f7fd fd06 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004eb8:	e171      	b.n	800519e <getChooseSetAndRun+0x1006>
						case UP_QUINTUPLE:
							dwTimeHoldTemp +=10000;
 8004eba:	4b1e      	ldr	r3, [pc, #120]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004ec2:	3310      	adds	r3, #16
 8004ec4:	4a1b      	ldr	r2, [pc, #108]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004ec6:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 8004ec8:	4b1a      	ldr	r3, [pc, #104]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a1a      	ldr	r2, [pc, #104]	; (8004f38 <getChooseSetAndRun+0xda0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d902      	bls.n	8004ed8 <getChooseSetAndRun+0xd40>
							{
								dwTimeHoldTemp = 1;
 8004ed2:	4b18      	ldr	r3, [pc, #96]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 8004ed8:	4b16      	ldr	r3, [pc, #88]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004ede:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004ee0:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8004ee2:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	4623      	mov	r3, r4
 8004ee8:	f7fd fcea 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 8004eec:	2300      	movs	r3, #0
 8004eee:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004ef0:	e155      	b.n	800519e <getChooseSetAndRun+0x1006>
						case UP_HOLD:
							dwTimeHoldTemp ++;
 8004ef2:	4b10      	ldr	r3, [pc, #64]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	4a0e      	ldr	r2, [pc, #56]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004efa:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 8004efc:	4b0d      	ldr	r3, [pc, #52]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a0d      	ldr	r2, [pc, #52]	; (8004f38 <getChooseSetAndRun+0xda0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d902      	bls.n	8004f0c <getChooseSetAndRun+0xd74>
							{
								dwTimeHoldTemp = 1;
 8004f06:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004f08:	2201      	movs	r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 8004f0c:	4b09      	ldr	r3, [pc, #36]	; (8004f34 <getChooseSetAndRun+0xd9c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004f12:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004f14:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8004f16:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	4623      	mov	r3, r4
 8004f1c:	f7fd fcd0 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 8004f20:	2300      	movs	r3, #0
 8004f22:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004f24:	e13b      	b.n	800519e <getChooseSetAndRun+0x1006>
 8004f26:	bf00      	nop
 8004f28:	20000149 	.word	0x20000149
 8004f2c:	aaaaaaab 	.word	0xaaaaaaab
 8004f30:	55555556 	.word	0x55555556
 8004f34:	20000144 	.word	0x20000144
 8004f38:	0001869f 	.word	0x0001869f
						case DOWN:
							dwTimeHoldTemp --;
 8004f3c:	4b9b      	ldr	r3, [pc, #620]	; (80051ac <getChooseSetAndRun+0x1014>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	4a9a      	ldr	r2, [pc, #616]	; (80051ac <getChooseSetAndRun+0x1014>)
 8004f44:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 8004f46:	4b99      	ldr	r3, [pc, #612]	; (80051ac <getChooseSetAndRun+0x1014>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a99      	ldr	r2, [pc, #612]	; (80051b0 <getChooseSetAndRun+0x1018>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d902      	bls.n	8004f56 <getChooseSetAndRun+0xdbe>
							{
								dwTimeHoldTemp = 99999;
 8004f50:	4b96      	ldr	r3, [pc, #600]	; (80051ac <getChooseSetAndRun+0x1014>)
 8004f52:	4a97      	ldr	r2, [pc, #604]	; (80051b0 <getChooseSetAndRun+0x1018>)
 8004f54:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 8004f56:	4b95      	ldr	r3, [pc, #596]	; (80051ac <getChooseSetAndRun+0x1014>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004f5c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004f5e:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8004f60:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	4623      	mov	r3, r4
 8004f66:	f7fd fcab 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004f6e:	e116      	b.n	800519e <getChooseSetAndRun+0x1006>
						case DOWN_DOUBLE:
							dwTimeHoldTemp -=10;
 8004f70:	4b8e      	ldr	r3, [pc, #568]	; (80051ac <getChooseSetAndRun+0x1014>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3b0a      	subs	r3, #10
 8004f76:	4a8d      	ldr	r2, [pc, #564]	; (80051ac <getChooseSetAndRun+0x1014>)
 8004f78:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 8004f7a:	4b8c      	ldr	r3, [pc, #560]	; (80051ac <getChooseSetAndRun+0x1014>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a8c      	ldr	r2, [pc, #560]	; (80051b0 <getChooseSetAndRun+0x1018>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d902      	bls.n	8004f8a <getChooseSetAndRun+0xdf2>
							{
								dwTimeHoldTemp = 99999;
 8004f84:	4b89      	ldr	r3, [pc, #548]	; (80051ac <getChooseSetAndRun+0x1014>)
 8004f86:	4a8a      	ldr	r2, [pc, #552]	; (80051b0 <getChooseSetAndRun+0x1018>)
 8004f88:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 8004f8a:	4b88      	ldr	r3, [pc, #544]	; (80051ac <getChooseSetAndRun+0x1014>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004f90:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004f92:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8004f94:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	4623      	mov	r3, r4
 8004f9a:	f7fd fc91 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004fa2:	e0fc      	b.n	800519e <getChooseSetAndRun+0x1006>
						case DOWN_TRIPLE:
							dwTimeHoldTemp -=100;
 8004fa4:	4b81      	ldr	r3, [pc, #516]	; (80051ac <getChooseSetAndRun+0x1014>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3b64      	subs	r3, #100	; 0x64
 8004faa:	4a80      	ldr	r2, [pc, #512]	; (80051ac <getChooseSetAndRun+0x1014>)
 8004fac:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 8004fae:	4b7f      	ldr	r3, [pc, #508]	; (80051ac <getChooseSetAndRun+0x1014>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a7f      	ldr	r2, [pc, #508]	; (80051b0 <getChooseSetAndRun+0x1018>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d902      	bls.n	8004fbe <getChooseSetAndRun+0xe26>
							{
								dwTimeHoldTemp = 99999;
 8004fb8:	4b7c      	ldr	r3, [pc, #496]	; (80051ac <getChooseSetAndRun+0x1014>)
 8004fba:	4a7d      	ldr	r2, [pc, #500]	; (80051b0 <getChooseSetAndRun+0x1018>)
 8004fbc:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 8004fbe:	4b7b      	ldr	r3, [pc, #492]	; (80051ac <getChooseSetAndRun+0x1014>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004fc4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004fc6:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8004fc8:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	4623      	mov	r3, r4
 8004fce:	f7fd fc77 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8004fd6:	e0e2      	b.n	800519e <getChooseSetAndRun+0x1006>
						case DOWN_QUADRUPLE:
							dwTimeHoldTemp -=1000;
 8004fd8:	4b74      	ldr	r3, [pc, #464]	; (80051ac <getChooseSetAndRun+0x1014>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8004fe0:	4a72      	ldr	r2, [pc, #456]	; (80051ac <getChooseSetAndRun+0x1014>)
 8004fe2:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 8004fe4:	4b71      	ldr	r3, [pc, #452]	; (80051ac <getChooseSetAndRun+0x1014>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a71      	ldr	r2, [pc, #452]	; (80051b0 <getChooseSetAndRun+0x1018>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d902      	bls.n	8004ff4 <getChooseSetAndRun+0xe5c>
							{
								dwTimeHoldTemp = 99999;
 8004fee:	4b6f      	ldr	r3, [pc, #444]	; (80051ac <getChooseSetAndRun+0x1014>)
 8004ff0:	4a6f      	ldr	r2, [pc, #444]	; (80051b0 <getChooseSetAndRun+0x1018>)
 8004ff2:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 8004ff4:	4b6d      	ldr	r3, [pc, #436]	; (80051ac <getChooseSetAndRun+0x1014>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004ffa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004ffc:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8004ffe:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	4623      	mov	r3, r4
 8005004:	f7fd fc5c 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 8005008:	2300      	movs	r3, #0
 800500a:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 800500c:	e0c7      	b.n	800519e <getChooseSetAndRun+0x1006>
						case DOWN_QUINTUPLE:
							dwTimeHoldTemp -=10000;
 800500e:	4b67      	ldr	r3, [pc, #412]	; (80051ac <getChooseSetAndRun+0x1014>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8005016:	3b10      	subs	r3, #16
 8005018:	4a64      	ldr	r2, [pc, #400]	; (80051ac <getChooseSetAndRun+0x1014>)
 800501a:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 800501c:	4b63      	ldr	r3, [pc, #396]	; (80051ac <getChooseSetAndRun+0x1014>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a63      	ldr	r2, [pc, #396]	; (80051b0 <getChooseSetAndRun+0x1018>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d902      	bls.n	800502c <getChooseSetAndRun+0xe94>
							{
								dwTimeHoldTemp = 99999;
 8005026:	4b61      	ldr	r3, [pc, #388]	; (80051ac <getChooseSetAndRun+0x1014>)
 8005028:	4a61      	ldr	r2, [pc, #388]	; (80051b0 <getChooseSetAndRun+0x1018>)
 800502a:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 800502c:	4b5f      	ldr	r3, [pc, #380]	; (80051ac <getChooseSetAndRun+0x1014>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8005032:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005034:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8005036:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	4623      	mov	r3, r4
 800503c:	f7fd fc40 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 8005040:	2300      	movs	r3, #0
 8005042:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8005044:	e0ab      	b.n	800519e <getChooseSetAndRun+0x1006>
						case DOWN_HOLD:
							dwTimeHoldTemp --;
 8005046:	4b59      	ldr	r3, [pc, #356]	; (80051ac <getChooseSetAndRun+0x1014>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3b01      	subs	r3, #1
 800504c:	4a57      	ldr	r2, [pc, #348]	; (80051ac <getChooseSetAndRun+0x1014>)
 800504e:	6013      	str	r3, [r2, #0]
							if(dwTimeHoldTemp > 99999)
 8005050:	4b56      	ldr	r3, [pc, #344]	; (80051ac <getChooseSetAndRun+0x1014>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a56      	ldr	r2, [pc, #344]	; (80051b0 <getChooseSetAndRun+0x1018>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d902      	bls.n	8005060 <getChooseSetAndRun+0xec8>
							{
								dwTimeHoldTemp = 99999;
 800505a:	4b54      	ldr	r3, [pc, #336]	; (80051ac <getChooseSetAndRun+0x1014>)
 800505c:	4a54      	ldr	r2, [pc, #336]	; (80051b0 <getChooseSetAndRun+0x1018>)
 800505e:	601a      	str	r2, [r3, #0]
							}
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 8005060:	4b52      	ldr	r3, [pc, #328]	; (80051ac <getChooseSetAndRun+0x1014>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8005066:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005068:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800506a:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	4623      	mov	r3, r4
 8005070:	f7fd fc26 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 8005074:	2300      	movs	r3, #0
 8005076:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 8005078:	e091      	b.n	800519e <getChooseSetAndRun+0x1006>
						case SELECT:

							LCD_SetColorPoint(BLACK);
 800507a:	2000      	movs	r0, #0
 800507c:	f7fe f9d2 	bl	8003424 <LCD_SetColorPoint>
							Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/2,\
 8005080:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005084:	085b      	lsrs	r3, r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	8abb      	ldrh	r3, [r7, #20]
 800508a:	4413      	add	r3, r2
 800508c:	b298      	uxth	r0, r3
 800508e:	8a7b      	ldrh	r3, [r7, #18]
 8005090:	3303      	adds	r3, #3
 8005092:	b29c      	uxth	r4, r3
									YsButtonUpDownTimeHold + 3,\
									XsButtonUpDownTimeHold + widthButtonUpDown/2+widthButtonUpDown/4, \
 8005094:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005098:	085b      	lsrs	r3, r3, #1
 800509a:	b29a      	uxth	r2, r3
 800509c:	8abb      	ldrh	r3, [r7, #20]
 800509e:	4413      	add	r3, r2
 80050a0:	b29a      	uxth	r2, r3
							Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/2,\
 80050a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80050a6:	089b      	lsrs	r3, r3, #2
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	4413      	add	r3, r2
 80050ac:	b29d      	uxth	r5, r3
 80050ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80050b2:	4a40      	ldr	r2, [pc, #256]	; (80051b4 <getChooseSetAndRun+0x101c>)
 80050b4:	fba2 2303 	umull	r2, r3, r2, r3
 80050b8:	085b      	lsrs	r3, r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	8a7b      	ldrh	r3, [r7, #18]
 80050be:	4413      	add	r3, r2
 80050c0:	b29e      	uxth	r6, r3
 80050c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80050c6:	089b      	lsrs	r3, r3, #2
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	8abb      	ldrh	r3, [r7, #20]
 80050cc:	4413      	add	r3, r2
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80050d4:	4937      	ldr	r1, [pc, #220]	; (80051b4 <getChooseSetAndRun+0x101c>)
 80050d6:	fba1 1202 	umull	r1, r2, r1, r2
 80050da:	0852      	lsrs	r2, r2, #1
 80050dc:	b291      	uxth	r1, r2
 80050de:	8a7a      	ldrh	r2, [r7, #18]
 80050e0:	440a      	add	r2, r1
 80050e2:	b292      	uxth	r2, r2
 80050e4:	9201      	str	r2, [sp, #4]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	4633      	mov	r3, r6
 80050ea:	462a      	mov	r2, r5
 80050ec:	4621      	mov	r1, r4
 80050ee:	f7fc fe93 	bl	8001e18 <Fill_Triangel>
									YsButtonUpDownTimeHold+heightButtonUpDown/3, \
									XsButtonUpDownTimeHold + widthButtonUpDown/4, \
									YsButtonUpDownTimeHold+heightButtonUpDown/3);
							Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/4,\
 80050f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80050f6:	089b      	lsrs	r3, r3, #2
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	8abb      	ldrh	r3, [r7, #20]
 80050fc:	4413      	add	r3, r2
 80050fe:	b298      	uxth	r0, r3
									YsButtonUpDownTimeHold + heightButtonUpDown*2/3, \
 8005100:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	4a2c      	ldr	r2, [pc, #176]	; (80051b8 <getChooseSetAndRun+0x1020>)
 8005108:	fb82 1203 	smull	r1, r2, r2, r3
 800510c:	17db      	asrs	r3, r3, #31
 800510e:	1ad3      	subs	r3, r2, r3
							Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/4,\
 8005110:	b29a      	uxth	r2, r3
 8005112:	8a7b      	ldrh	r3, [r7, #18]
 8005114:	4413      	add	r3, r2
 8005116:	b29c      	uxth	r4, r3
									XsButtonUpDownTimeHold + widthButtonUpDown/2+widthButtonUpDown/4, \
 8005118:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800511c:	085b      	lsrs	r3, r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	8abb      	ldrh	r3, [r7, #20]
 8005122:	4413      	add	r3, r2
 8005124:	b29a      	uxth	r2, r3
							Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/4,\
 8005126:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800512a:	089b      	lsrs	r3, r3, #2
 800512c:	b29b      	uxth	r3, r3
 800512e:	4413      	add	r3, r2
 8005130:	b29d      	uxth	r5, r3
									YsButtonUpDownTimeHold + heightButtonUpDown*2/3, \
 8005132:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	4a1f      	ldr	r2, [pc, #124]	; (80051b8 <getChooseSetAndRun+0x1020>)
 800513a:	fb82 1203 	smull	r1, r2, r2, r3
 800513e:	17db      	asrs	r3, r3, #31
 8005140:	1ad3      	subs	r3, r2, r3
							Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/4,\
 8005142:	b29a      	uxth	r2, r3
 8005144:	8a7b      	ldrh	r3, [r7, #18]
 8005146:	4413      	add	r3, r2
 8005148:	b29e      	uxth	r6, r3
 800514a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	8abb      	ldrh	r3, [r7, #20]
 8005154:	4413      	add	r3, r2
 8005156:	b29b      	uxth	r3, r3
									XsButtonUpDownTimeHold + widthButtonUpDown/2, \
									YsButtonUpDownTimeHold + heightButtonUpDown-3);
 8005158:	8a79      	ldrh	r1, [r7, #18]
 800515a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800515e:	440a      	add	r2, r1
 8005160:	b292      	uxth	r2, r2
							Fill_Triangel(XsButtonUpDownTimeHold+widthButtonUpDown/4,\
 8005162:	3a03      	subs	r2, #3
 8005164:	b292      	uxth	r2, r2
 8005166:	9201      	str	r2, [sp, #4]
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	4633      	mov	r3, r6
 800516c:	462a      	mov	r2, r5
 800516e:	4621      	mov	r1, r4
 8005170:	f7fc fe52 	bl	8001e18 <Fill_Triangel>
							pData[4] = dwTimeHoldTemp;
 8005174:	4b0d      	ldr	r3, [pc, #52]	; (80051ac <getChooseSetAndRun+0x1014>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a10      	ldr	r2, [pc, #64]	; (80051bc <getChooseSetAndRun+0x1024>)
 800517a:	6113      	str	r3, [r2, #16]
							break;
 800517c:	e00f      	b.n	800519e <getChooseSetAndRun+0x1006>
						case SELECT_DOUBLE:
							dwTimeHoldTemp = 0;
 800517e:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <getChooseSetAndRun+0x1014>)
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
							LCD_UpdateEditNum(XsBoxThold, YsBoxThold, XeBoxThold, YeBoxThold, dwTimeHoldTemp);
 8005184:	4b09      	ldr	r3, [pc, #36]	; (80051ac <getChooseSetAndRun+0x1014>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800518a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800518c:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800518e:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	4623      	mov	r3, r4
 8005194:	f7fd fb94 	bl	80028c0 <LCD_UpdateEditNum>
							key = NOKEY;
 8005198:	2300      	movs	r3, #0
 800519a:	65bb      	str	r3, [r7, #88]	; 0x58
							break;
 800519c:	bf00      	nop
						}
					}while(key != SELECT);
 800519e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	f47f adf8 	bne.w	8004d96 <getChooseSetAndRun+0xbfe>

					key = NOKEY;
 80051a6:	2300      	movs	r3, #0
 80051a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80051aa:	e034      	b.n	8005216 <getChooseSetAndRun+0x107e>
 80051ac:	20000144 	.word	0x20000144
 80051b0:	0001869f 	.word	0x0001869f
 80051b4:	aaaaaaab 	.word	0xaaaaaaab
 80051b8:	55555556 	.word	0x55555556
 80051bc:	20000124 	.word	0x20000124
				}else if(Row == 2)
 80051c0:	4b1a      	ldr	r3, [pc, #104]	; (800522c <getChooseSetAndRun+0x1094>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d11d      	bne.n	8005204 <getChooseSetAndRun+0x106c>
				{
					pData[0] = STOP;
 80051c8:	4b19      	ldr	r3, [pc, #100]	; (8005230 <getChooseSetAndRun+0x1098>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
					pUpdateDataStopHandle((void*)pData);
 80051ce:	4b19      	ldr	r3, [pc, #100]	; (8005234 <getChooseSetAndRun+0x109c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4817      	ldr	r0, [pc, #92]	; (8005230 <getChooseSetAndRun+0x1098>)
 80051d4:	4798      	blx	r3
					pData[0] = RUN;
 80051d6:	4b16      	ldr	r3, [pc, #88]	; (8005230 <getChooseSetAndRun+0x1098>)
 80051d8:	2202      	movs	r2, #2
 80051da:	601a      	str	r2, [r3, #0]
					pData[2] = 0;
 80051dc:	4b14      	ldr	r3, [pc, #80]	; (8005230 <getChooseSetAndRun+0x1098>)
 80051de:	2200      	movs	r2, #0
 80051e0:	609a      	str	r2, [r3, #8]
					pData[3] = 0;
 80051e2:	4b13      	ldr	r3, [pc, #76]	; (8005230 <getChooseSetAndRun+0x1098>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	60da      	str	r2, [r3, #12]
					pUpdateDataStopHandle((void*)pData);
 80051e8:	4b12      	ldr	r3, [pc, #72]	; (8005234 <getChooseSetAndRun+0x109c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4810      	ldr	r0, [pc, #64]	; (8005230 <getChooseSetAndRun+0x1098>)
 80051ee:	4798      	blx	r3
					action = SELECT_ACTION;
 80051f0:	2302      	movs	r3, #2
 80051f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					flag = 0;
 80051f6:	4b10      	ldr	r3, [pc, #64]	; (8005238 <getChooseSetAndRun+0x10a0>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	701a      	strb	r2, [r3, #0]
					Row = 0;
 80051fc:	4b0b      	ldr	r3, [pc, #44]	; (800522c <getChooseSetAndRun+0x1094>)
 80051fe:	2200      	movs	r2, #0
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	e008      	b.n	8005216 <getChooseSetAndRun+0x107e>
				}
				else
				{
					//pData[0] = STOP;
					//pUpdateDataStopHandle((void*)pData);
					action = RETURN_ACTION;
 8005204:	2301      	movs	r3, #1
 8005206:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					flag = 0;
 800520a:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <getChooseSetAndRun+0x10a0>)
 800520c:	2200      	movs	r2, #0
 800520e:	701a      	strb	r2, [r3, #0]
					Row = 0;
 8005210:	4b06      	ldr	r3, [pc, #24]	; (800522c <getChooseSetAndRun+0x1094>)
 8005212:	2200      	movs	r2, #0
 8005214:	701a      	strb	r2, [r3, #0]
				}
				//Print Titel
				key = NOKEY;
 8005216:	2300      	movs	r3, #0
 8005218:	65bb      	str	r3, [r7, #88]	; 0x58
				break;
 800521a:	e000      	b.n	800521e <getChooseSetAndRun+0x1086>
			default:
				break;
 800521c:	bf00      	nop
			}
	return action;
 800521e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005222:	4618      	mov	r0, r3
 8005224:	3764      	adds	r7, #100	; 0x64
 8005226:	46bd      	mov	sp, r7
 8005228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800522a:	bf00      	nop
 800522c:	20000149 	.word	0x20000149
 8005230:	20000124 	.word	0x20000124
 8005234:	20000120 	.word	0x20000120
 8005238:	20000148 	.word	0x20000148

0800523c <getChooseMainMenu>:
uint8_t getChooseMainMenu(uint8_t byNumOfRows,\
				uint8_t bySizeOfRow,\
				char pStrInterface[][20],\
				uint8_t bySize)
{
 800523c:	b590      	push	{r4, r7, lr}
 800523e:	b089      	sub	sp, #36	; 0x24
 8005240:	af04      	add	r7, sp, #16
 8005242:	603a      	str	r2, [r7, #0]
 8005244:	461a      	mov	r2, r3
 8005246:	4603      	mov	r3, r0
 8005248:	71fb      	strb	r3, [r7, #7]
 800524a:	460b      	mov	r3, r1
 800524c:	71bb      	strb	r3, [r7, #6]
 800524e:	4613      	mov	r3, r2
 8005250:	717b      	strb	r3, [r7, #5]
	ValueKey_e key = NOKEY ;
 8005252:	2300      	movs	r3, #0
 8005254:	73fb      	strb	r3, [r7, #15]
	uint8_t byRow = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	73bb      	strb	r3, [r7, #14]
	static uint8_t byRowTemp = 0;
	static uint8_t byFlag = 0;
	static u16 cursorOfOptionBox[10];
	cursorOfOptionBox[0] = 30;
 800525a:	4ba8      	ldr	r3, [pc, #672]	; (80054fc <getChooseMainMenu+0x2c0>)
 800525c:	221e      	movs	r2, #30
 800525e:	801a      	strh	r2, [r3, #0]
	if(byFlag == 0)
 8005260:	4ba7      	ldr	r3, [pc, #668]	; (8005500 <getChooseMainMenu+0x2c4>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d154      	bne.n	8005312 <getChooseMainMenu+0xd6>
	{
		LCD_Clear(WHITE);
 8005268:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800526c:	f7fe f904 	bl	8003478 <LCD_Clear>
		//Print Titel
		LCD_ShowTitle(bySizeOfRow, WHITE, BLUE, (u8*)pStrInterface[0], 16, 1);
 8005270:	79bb      	ldrb	r3, [r7, #6]
 8005272:	b298      	uxth	r0, r3
 8005274:	2301      	movs	r3, #1
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	2310      	movs	r3, #16
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	221f      	movs	r2, #31
 8005280:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005284:	f7fc fef2 	bl	800206c <LCD_ShowTitle>

		for(uint8_t i = 1;i<byNumOfRows+1;i++)
 8005288:	2301      	movs	r3, #1
 800528a:	737b      	strb	r3, [r7, #13]
 800528c:	e020      	b.n	80052d0 <getChooseMainMenu+0x94>
		{
			//print interface
			cursorOfOptionBox[i] = LCD_ShowOption(20, cursorOfOptionBox[i-1], BLACK, CYAN, (u8*)pStrInterface[i], 16, 1);
 800528e:	7b7b      	ldrb	r3, [r7, #13]
 8005290:	3b01      	subs	r3, #1
 8005292:	4a9a      	ldr	r2, [pc, #616]	; (80054fc <getChooseMainMenu+0x2c0>)
 8005294:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005298:	7b7a      	ldrb	r2, [r7, #13]
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	461a      	mov	r2, r3
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	4413      	add	r3, r2
 80052a8:	7b7c      	ldrb	r4, [r7, #13]
 80052aa:	2201      	movs	r2, #1
 80052ac:	9202      	str	r2, [sp, #8]
 80052ae:	2210      	movs	r2, #16
 80052b0:	9201      	str	r2, [sp, #4]
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80052b8:	2200      	movs	r2, #0
 80052ba:	2014      	movs	r0, #20
 80052bc:	f7fc ff09 	bl	80020d2 <LCD_ShowOption>
 80052c0:	4603      	mov	r3, r0
 80052c2:	461a      	mov	r2, r3
 80052c4:	4b8d      	ldr	r3, [pc, #564]	; (80054fc <getChooseMainMenu+0x2c0>)
 80052c6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		for(uint8_t i = 1;i<byNumOfRows+1;i++)
 80052ca:	7b7b      	ldrb	r3, [r7, #13]
 80052cc:	3301      	adds	r3, #1
 80052ce:	737b      	strb	r3, [r7, #13]
 80052d0:	79fa      	ldrb	r2, [r7, #7]
 80052d2:	7b7b      	ldrb	r3, [r7, #13]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d2da      	bcs.n	800528e <getChooseMainMenu+0x52>
		}
		LCD_DrawRectangle(10,cursorOfOptionBox[byRowTemp],310,cursorOfOptionBox[byRowTemp]+bySizeOfRow);
 80052d8:	4b8a      	ldr	r3, [pc, #552]	; (8005504 <getChooseMainMenu+0x2c8>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	461a      	mov	r2, r3
 80052de:	4b87      	ldr	r3, [pc, #540]	; (80054fc <getChooseMainMenu+0x2c0>)
 80052e0:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80052e4:	4b87      	ldr	r3, [pc, #540]	; (8005504 <getChooseMainMenu+0x2c8>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	461a      	mov	r2, r3
 80052ea:	4b84      	ldr	r3, [pc, #528]	; (80054fc <getChooseMainMenu+0x2c0>)
 80052ec:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80052f0:	79bb      	ldrb	r3, [r7, #6]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	4413      	add	r3, r2
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	f44f 729b 	mov.w	r2, #310	; 0x136
 80052fc:	200a      	movs	r0, #10
 80052fe:	f7fc fc51 	bl	8001ba4 <LCD_DrawRectangle>
		byFlag = 1;
 8005302:	4b7f      	ldr	r3, [pc, #508]	; (8005500 <getChooseMainMenu+0x2c4>)
 8005304:	2201      	movs	r2, #1
 8005306:	701a      	strb	r2, [r3, #0]
	}
	while(key == NOKEY)
 8005308:	e003      	b.n	8005312 <getChooseMainMenu+0xd6>
	{
		key = processEventButton();
 800530a:	f7fb fc9b 	bl	8000c44 <processEventButton>
 800530e:	4603      	mov	r3, r0
 8005310:	73fb      	strb	r3, [r7, #15]
	while(key == NOKEY)
 8005312:	7bfb      	ldrb	r3, [r7, #15]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0f8      	beq.n	800530a <getChooseMainMenu+0xce>
	}
	switch(key)
 8005318:	7bfb      	ldrb	r3, [r7, #15]
 800531a:	2b09      	cmp	r3, #9
 800531c:	d05a      	beq.n	80053d4 <getChooseMainMenu+0x198>
 800531e:	2b09      	cmp	r3, #9
 8005320:	f300 80e6 	bgt.w	80054f0 <getChooseMainMenu+0x2b4>
 8005324:	2b01      	cmp	r3, #1
 8005326:	f000 80ac 	beq.w	8005482 <getChooseMainMenu+0x246>
 800532a:	2b03      	cmp	r3, #3
 800532c:	f040 80e0 	bne.w	80054f0 <getChooseMainMenu+0x2b4>
	{
	case UP:
		byRowTemp--;
 8005330:	4b74      	ldr	r3, [pc, #464]	; (8005504 <getChooseMainMenu+0x2c8>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	3b01      	subs	r3, #1
 8005336:	b2da      	uxtb	r2, r3
 8005338:	4b72      	ldr	r3, [pc, #456]	; (8005504 <getChooseMainMenu+0x2c8>)
 800533a:	701a      	strb	r2, [r3, #0]
		if(byRowTemp == 255)
 800533c:	4b71      	ldr	r3, [pc, #452]	; (8005504 <getChooseMainMenu+0x2c8>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2bff      	cmp	r3, #255	; 0xff
 8005342:	d116      	bne.n	8005372 <getChooseMainMenu+0x136>
		{
			byRowTemp = byNumOfRows-1;
 8005344:	79fb      	ldrb	r3, [r7, #7]
 8005346:	3b01      	subs	r3, #1
 8005348:	b2da      	uxtb	r2, r3
 800534a:	4b6e      	ldr	r3, [pc, #440]	; (8005504 <getChooseMainMenu+0x2c8>)
 800534c:	701a      	strb	r2, [r3, #0]
			LCD_SetColorPoint(CYAN);
 800534e:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8005352:	f7fe f867 	bl	8003424 <LCD_SetColorPoint>
			LCD_DrawRectangle(10,cursorOfOptionBox[0],310,cursorOfOptionBox[0]+bySizeOfRow);
 8005356:	4b69      	ldr	r3, [pc, #420]	; (80054fc <getChooseMainMenu+0x2c0>)
 8005358:	8819      	ldrh	r1, [r3, #0]
 800535a:	4b68      	ldr	r3, [pc, #416]	; (80054fc <getChooseMainMenu+0x2c0>)
 800535c:	881a      	ldrh	r2, [r3, #0]
 800535e:	79bb      	ldrb	r3, [r7, #6]
 8005360:	b29b      	uxth	r3, r3
 8005362:	4413      	add	r3, r2
 8005364:	b29b      	uxth	r3, r3
 8005366:	f44f 729b 	mov.w	r2, #310	; 0x136
 800536a:	200a      	movs	r0, #10
 800536c:	f7fc fc1a 	bl	8001ba4 <LCD_DrawRectangle>
 8005370:	e018      	b.n	80053a4 <getChooseMainMenu+0x168>
		}else
		{
			LCD_SetColorPoint(CYAN);
 8005372:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8005376:	f7fe f855 	bl	8003424 <LCD_SetColorPoint>
			LCD_DrawRectangle(10,cursorOfOptionBox[byRowTemp+1],310,cursorOfOptionBox[byRowTemp+1]+bySizeOfRow);
 800537a:	4b62      	ldr	r3, [pc, #392]	; (8005504 <getChooseMainMenu+0x2c8>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	3301      	adds	r3, #1
 8005380:	4a5e      	ldr	r2, [pc, #376]	; (80054fc <getChooseMainMenu+0x2c0>)
 8005382:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005386:	4b5f      	ldr	r3, [pc, #380]	; (8005504 <getChooseMainMenu+0x2c8>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	3301      	adds	r3, #1
 800538c:	4a5b      	ldr	r2, [pc, #364]	; (80054fc <getChooseMainMenu+0x2c0>)
 800538e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005392:	79bb      	ldrb	r3, [r7, #6]
 8005394:	b29b      	uxth	r3, r3
 8005396:	4413      	add	r3, r2
 8005398:	b29b      	uxth	r3, r3
 800539a:	f44f 729b 	mov.w	r2, #310	; 0x136
 800539e:	200a      	movs	r0, #10
 80053a0:	f7fc fc00 	bl	8001ba4 <LCD_DrawRectangle>
		}
		LCD_DrawRectangle(10,cursorOfOptionBox[byRowTemp],310,cursorOfOptionBox[byRowTemp]+bySizeOfRow);
 80053a4:	4b57      	ldr	r3, [pc, #348]	; (8005504 <getChooseMainMenu+0x2c8>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	461a      	mov	r2, r3
 80053aa:	4b54      	ldr	r3, [pc, #336]	; (80054fc <getChooseMainMenu+0x2c0>)
 80053ac:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80053b0:	4b54      	ldr	r3, [pc, #336]	; (8005504 <getChooseMainMenu+0x2c8>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	461a      	mov	r2, r3
 80053b6:	4b51      	ldr	r3, [pc, #324]	; (80054fc <getChooseMainMenu+0x2c0>)
 80053b8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80053bc:	79bb      	ldrb	r3, [r7, #6]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	4413      	add	r3, r2
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	f44f 729b 	mov.w	r2, #310	; 0x136
 80053c8:	200a      	movs	r0, #10
 80053ca:	f7fc fbeb 	bl	8001ba4 <LCD_DrawRectangle>
		key = NOKEY;
 80053ce:	2300      	movs	r3, #0
 80053d0:	73fb      	strb	r3, [r7, #15]
		break;
 80053d2:	e08e      	b.n	80054f2 <getChooseMainMenu+0x2b6>
	case DOWN:
		byRowTemp++;
 80053d4:	4b4b      	ldr	r3, [pc, #300]	; (8005504 <getChooseMainMenu+0x2c8>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	3301      	adds	r3, #1
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	4b49      	ldr	r3, [pc, #292]	; (8005504 <getChooseMainMenu+0x2c8>)
 80053de:	701a      	strb	r2, [r3, #0]
		if(byRowTemp == byNumOfRows)
 80053e0:	4b48      	ldr	r3, [pc, #288]	; (8005504 <getChooseMainMenu+0x2c8>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	79fa      	ldrb	r2, [r7, #7]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d11a      	bne.n	8005420 <getChooseMainMenu+0x1e4>
		{
			byRowTemp = 0;
 80053ea:	4b46      	ldr	r3, [pc, #280]	; (8005504 <getChooseMainMenu+0x2c8>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	701a      	strb	r2, [r3, #0]
			LCD_SetColorPoint(CYAN);
 80053f0:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80053f4:	f7fe f816 	bl	8003424 <LCD_SetColorPoint>
			LCD_DrawRectangle(10,cursorOfOptionBox[byNumOfRows-1],310,cursorOfOptionBox[byNumOfRows-1]+bySizeOfRow);
 80053f8:	79fb      	ldrb	r3, [r7, #7]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	4a3f      	ldr	r2, [pc, #252]	; (80054fc <getChooseMainMenu+0x2c0>)
 80053fe:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	3b01      	subs	r3, #1
 8005406:	4a3d      	ldr	r2, [pc, #244]	; (80054fc <getChooseMainMenu+0x2c0>)
 8005408:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800540c:	79bb      	ldrb	r3, [r7, #6]
 800540e:	b29b      	uxth	r3, r3
 8005410:	4413      	add	r3, r2
 8005412:	b29b      	uxth	r3, r3
 8005414:	f44f 729b 	mov.w	r2, #310	; 0x136
 8005418:	200a      	movs	r0, #10
 800541a:	f7fc fbc3 	bl	8001ba4 <LCD_DrawRectangle>
 800541e:	e018      	b.n	8005452 <getChooseMainMenu+0x216>
		}else
		{
			LCD_SetColorPoint(CYAN);
 8005420:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8005424:	f7fd fffe 	bl	8003424 <LCD_SetColorPoint>
			LCD_DrawRectangle(10,cursorOfOptionBox[byRowTemp-1],310,cursorOfOptionBox[byRowTemp-1]+bySizeOfRow);
 8005428:	4b36      	ldr	r3, [pc, #216]	; (8005504 <getChooseMainMenu+0x2c8>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	3b01      	subs	r3, #1
 800542e:	4a33      	ldr	r2, [pc, #204]	; (80054fc <getChooseMainMenu+0x2c0>)
 8005430:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005434:	4b33      	ldr	r3, [pc, #204]	; (8005504 <getChooseMainMenu+0x2c8>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	3b01      	subs	r3, #1
 800543a:	4a30      	ldr	r2, [pc, #192]	; (80054fc <getChooseMainMenu+0x2c0>)
 800543c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005440:	79bb      	ldrb	r3, [r7, #6]
 8005442:	b29b      	uxth	r3, r3
 8005444:	4413      	add	r3, r2
 8005446:	b29b      	uxth	r3, r3
 8005448:	f44f 729b 	mov.w	r2, #310	; 0x136
 800544c:	200a      	movs	r0, #10
 800544e:	f7fc fba9 	bl	8001ba4 <LCD_DrawRectangle>
		}
		LCD_DrawRectangle(10,cursorOfOptionBox[byRowTemp],310,cursorOfOptionBox[byRowTemp]+bySizeOfRow);
 8005452:	4b2c      	ldr	r3, [pc, #176]	; (8005504 <getChooseMainMenu+0x2c8>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	4b28      	ldr	r3, [pc, #160]	; (80054fc <getChooseMainMenu+0x2c0>)
 800545a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800545e:	4b29      	ldr	r3, [pc, #164]	; (8005504 <getChooseMainMenu+0x2c8>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	4b25      	ldr	r3, [pc, #148]	; (80054fc <getChooseMainMenu+0x2c0>)
 8005466:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800546a:	79bb      	ldrb	r3, [r7, #6]
 800546c:	b29b      	uxth	r3, r3
 800546e:	4413      	add	r3, r2
 8005470:	b29b      	uxth	r3, r3
 8005472:	f44f 729b 	mov.w	r2, #310	; 0x136
 8005476:	200a      	movs	r0, #10
 8005478:	f7fc fb94 	bl	8001ba4 <LCD_DrawRectangle>
		key = NOKEY;
 800547c:	2300      	movs	r3, #0
 800547e:	73fb      	strb	r3, [r7, #15]
		break;
 8005480:	e037      	b.n	80054f2 <getChooseMainMenu+0x2b6>
	case SELECT:
		//lcdClear();
		LCD_Fill(10, cursorOfOptionBox[byRowTemp], 310, cursorOfOptionBox[byRowTemp], RED);
 8005482:	4b20      	ldr	r3, [pc, #128]	; (8005504 <getChooseMainMenu+0x2c8>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	461a      	mov	r2, r3
 8005488:	4b1c      	ldr	r3, [pc, #112]	; (80054fc <getChooseMainMenu+0x2c0>)
 800548a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800548e:	4b1d      	ldr	r3, [pc, #116]	; (8005504 <getChooseMainMenu+0x2c8>)
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	4b19      	ldr	r3, [pc, #100]	; (80054fc <getChooseMainMenu+0x2c0>)
 8005496:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800549a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800549e:	9200      	str	r2, [sp, #0]
 80054a0:	f44f 729b 	mov.w	r2, #310	; 0x136
 80054a4:	200a      	movs	r0, #10
 80054a6:	f7fc faad 	bl	8001a04 <LCD_Fill>
		LCD_Clear(WHITE);
 80054aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80054ae:	f7fd ffe3 	bl	8003478 <LCD_Clear>
		//Print Titel
		LCD_ShowTitle(bySizeOfRow, WHITE, BLUE, (u8*)pStrInterface[byRowTemp+1], 16, 1);
 80054b2:	79bb      	ldrb	r3, [r7, #6]
 80054b4:	b298      	uxth	r0, r3
 80054b6:	4b13      	ldr	r3, [pc, #76]	; (8005504 <getChooseMainMenu+0x2c8>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	4613      	mov	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	461a      	mov	r2, r3
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	4413      	add	r3, r2
 80054ca:	2201      	movs	r2, #1
 80054cc:	9201      	str	r2, [sp, #4]
 80054ce:	2210      	movs	r2, #16
 80054d0:	9200      	str	r2, [sp, #0]
 80054d2:	221f      	movs	r2, #31
 80054d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80054d8:	f7fc fdc8 	bl	800206c <LCD_ShowTitle>
		key = NOKEY;
 80054dc:	2300      	movs	r3, #0
 80054de:	73fb      	strb	r3, [r7, #15]
		byFlag = 0;
 80054e0:	4b07      	ldr	r3, [pc, #28]	; (8005500 <getChooseMainMenu+0x2c4>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	701a      	strb	r2, [r3, #0]
		byRow = byRowTemp+1;
 80054e6:	4b07      	ldr	r3, [pc, #28]	; (8005504 <getChooseMainMenu+0x2c8>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	3301      	adds	r3, #1
 80054ec:	73bb      	strb	r3, [r7, #14]
		break;
 80054ee:	e000      	b.n	80054f2 <getChooseMainMenu+0x2b6>
	default:
		break;
 80054f0:	bf00      	nop
	}
	return byRow;
 80054f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd90      	pop	{r4, r7, pc}
 80054fc:	2000014c 	.word	0x2000014c
 8005500:	20000160 	.word	0x20000160
 8005504:	20000161 	.word	0x20000161

08005508 <getChooseInformation>:
Action_e getChooseInformation(uint8_t stateRestart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af04      	add	r7, sp, #16
 800550e:	4603      	mov	r3, r0
 8005510:	71fb      	strb	r3, [r7, #7]
	Action_e action = NONE_ACTION;
 8005512:	2300      	movs	r3, #0
 8005514:	73fb      	strb	r3, [r7, #15]
	const u16 Xs = 10;
 8005516:	230a      	movs	r3, #10
 8005518:	81bb      	strh	r3, [r7, #12]
	const u16 Y1 = 180;
 800551a:	23b4      	movs	r3, #180	; 0xb4
 800551c:	817b      	strh	r3, [r7, #10]
	const u16 Y2 = 210;
 800551e:	23d2      	movs	r3, #210	; 0xd2
 8005520:	813b      	strh	r3, [r7, #8]

	static u8 Row = 0,flag = 0;
	ValueKey_e key = NOKEY ;
 8005522:	2300      	movs	r3, #0
 8005524:	73bb      	strb	r3, [r7, #14]

	if(stateRestart == 0)
 8005526:	79fb      	ldrb	r3, [r7, #7]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d12e      	bne.n	800558a <getChooseInformation+0x82>
	{

		if(flag == 0)
 800552c:	4b8e      	ldr	r3, [pc, #568]	; (8005768 <getChooseInformation+0x260>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d11d      	bne.n	8005570 <getChooseInformation+0x68>
		{
			LCD_ShowOption(20, Y2, BLACK, CYAN, (u8*)"RETURN", 16, 1);
 8005534:	8939      	ldrh	r1, [r7, #8]
 8005536:	2301      	movs	r3, #1
 8005538:	9302      	str	r3, [sp, #8]
 800553a:	2310      	movs	r3, #16
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	4b8b      	ldr	r3, [pc, #556]	; (800576c <getChooseInformation+0x264>)
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005546:	2200      	movs	r2, #0
 8005548:	2014      	movs	r0, #20
 800554a:	f7fc fdc2 	bl	80020d2 <LCD_ShowOption>
			LCD_DrawRectangle(Xs,Y2,310,Y2+20);
 800554e:	893b      	ldrh	r3, [r7, #8]
 8005550:	3314      	adds	r3, #20
 8005552:	b29b      	uxth	r3, r3
 8005554:	8939      	ldrh	r1, [r7, #8]
 8005556:	89b8      	ldrh	r0, [r7, #12]
 8005558:	f44f 729b 	mov.w	r2, #310	; 0x136
 800555c:	f7fc fb22 	bl	8001ba4 <LCD_DrawRectangle>
			flag = 1;
 8005560:	4b81      	ldr	r3, [pc, #516]	; (8005768 <getChooseInformation+0x260>)
 8005562:	2201      	movs	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]
		}
		while(key == NOKEY)
 8005566:	e003      	b.n	8005570 <getChooseInformation+0x68>
		{
			key = processEventButton();
 8005568:	f7fb fb6c 	bl	8000c44 <processEventButton>
 800556c:	4603      	mov	r3, r0
 800556e:	73bb      	strb	r3, [r7, #14]
		while(key == NOKEY)
 8005570:	7bbb      	ldrb	r3, [r7, #14]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0f8      	beq.n	8005568 <getChooseInformation+0x60>
		}
		if(key == SELECT)
 8005576:	7bbb      	ldrb	r3, [r7, #14]
 8005578:	2b01      	cmp	r3, #1
 800557a:	f040 80ef 	bne.w	800575c <getChooseInformation+0x254>
		{
			action = RETURN_ACTION;
 800557e:	2301      	movs	r3, #1
 8005580:	73fb      	strb	r3, [r7, #15]
			flag = 0;
 8005582:	4b79      	ldr	r3, [pc, #484]	; (8005768 <getChooseInformation+0x260>)
 8005584:	2200      	movs	r2, #0
 8005586:	701a      	strb	r2, [r3, #0]
 8005588:	e0e8      	b.n	800575c <getChooseInformation+0x254>
		}
	}else
	{

		if(flag == 0)
 800558a:	4b77      	ldr	r3, [pc, #476]	; (8005768 <getChooseInformation+0x260>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d12c      	bne.n	80055ec <getChooseInformation+0xe4>
		{
			LCD_ShowOption(20, Y1, BLACK, CYAN, (u8*)"RETURN", 16, 1);
 8005592:	8979      	ldrh	r1, [r7, #10]
 8005594:	2301      	movs	r3, #1
 8005596:	9302      	str	r3, [sp, #8]
 8005598:	2310      	movs	r3, #16
 800559a:	9301      	str	r3, [sp, #4]
 800559c:	4b73      	ldr	r3, [pc, #460]	; (800576c <getChooseInformation+0x264>)
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80055a4:	2200      	movs	r2, #0
 80055a6:	2014      	movs	r0, #20
 80055a8:	f7fc fd93 	bl	80020d2 <LCD_ShowOption>
			LCD_ShowOption(20, Y2, BLACK, CYAN, (u8*)"RESTART", 16, 1);
 80055ac:	8939      	ldrh	r1, [r7, #8]
 80055ae:	2301      	movs	r3, #1
 80055b0:	9302      	str	r3, [sp, #8]
 80055b2:	2310      	movs	r3, #16
 80055b4:	9301      	str	r3, [sp, #4]
 80055b6:	4b6e      	ldr	r3, [pc, #440]	; (8005770 <getChooseInformation+0x268>)
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80055be:	2200      	movs	r2, #0
 80055c0:	2014      	movs	r0, #20
 80055c2:	f7fc fd86 	bl	80020d2 <LCD_ShowOption>

			LCD_DrawRectangle(Xs,Y1,320-Xs,Y1+20);
 80055c6:	89bb      	ldrh	r3, [r7, #12]
 80055c8:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	897b      	ldrh	r3, [r7, #10]
 80055d0:	3314      	adds	r3, #20
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	8979      	ldrh	r1, [r7, #10]
 80055d6:	89b8      	ldrh	r0, [r7, #12]
 80055d8:	f7fc fae4 	bl	8001ba4 <LCD_DrawRectangle>
			flag = 1;
 80055dc:	4b62      	ldr	r3, [pc, #392]	; (8005768 <getChooseInformation+0x260>)
 80055de:	2201      	movs	r2, #1
 80055e0:	701a      	strb	r2, [r3, #0]
		}
		while(key == NOKEY)
 80055e2:	e003      	b.n	80055ec <getChooseInformation+0xe4>
		{
			key = processEventButton();
 80055e4:	f7fb fb2e 	bl	8000c44 <processEventButton>
 80055e8:	4603      	mov	r3, r0
 80055ea:	73bb      	strb	r3, [r7, #14]
		while(key == NOKEY)
 80055ec:	7bbb      	ldrb	r3, [r7, #14]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0f8      	beq.n	80055e4 <getChooseInformation+0xdc>
		}
		switch(key)
 80055f2:	7bbb      	ldrb	r3, [r7, #14]
 80055f4:	2b09      	cmp	r3, #9
 80055f6:	d051      	beq.n	800569c <getChooseInformation+0x194>
 80055f8:	2b09      	cmp	r3, #9
 80055fa:	f300 80ae 	bgt.w	800575a <getChooseInformation+0x252>
 80055fe:	2b01      	cmp	r3, #1
 8005600:	f000 8095 	beq.w	800572e <getChooseInformation+0x226>
 8005604:	2b03      	cmp	r3, #3
 8005606:	f040 80a8 	bne.w	800575a <getChooseInformation+0x252>
			{
			case UP:
				Row--;
 800560a:	4b5a      	ldr	r3, [pc, #360]	; (8005774 <getChooseInformation+0x26c>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	3b01      	subs	r3, #1
 8005610:	b2da      	uxtb	r2, r3
 8005612:	4b58      	ldr	r3, [pc, #352]	; (8005774 <getChooseInformation+0x26c>)
 8005614:	701a      	strb	r2, [r3, #0]
				if(Row == 255)
 8005616:	4b57      	ldr	r3, [pc, #348]	; (8005774 <getChooseInformation+0x26c>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2bff      	cmp	r3, #255	; 0xff
 800561c:	d102      	bne.n	8005624 <getChooseInformation+0x11c>
				{
					Row = 1;
 800561e:	4b55      	ldr	r3, [pc, #340]	; (8005774 <getChooseInformation+0x26c>)
 8005620:	2201      	movs	r2, #1
 8005622:	701a      	strb	r2, [r3, #0]
				}
				if(Row == 1)
 8005624:	4b53      	ldr	r3, [pc, #332]	; (8005774 <getChooseInformation+0x26c>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d11a      	bne.n	8005662 <getChooseInformation+0x15a>
				{
					LCD_SetColorPoint(CYAN);
 800562c:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8005630:	f7fd fef8 	bl	8003424 <LCD_SetColorPoint>
					LCD_DrawRectangle(Xs,Y1,320-Xs,Y1+20);
 8005634:	89bb      	ldrh	r3, [r7, #12]
 8005636:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800563a:	b29a      	uxth	r2, r3
 800563c:	897b      	ldrh	r3, [r7, #10]
 800563e:	3314      	adds	r3, #20
 8005640:	b29b      	uxth	r3, r3
 8005642:	8979      	ldrh	r1, [r7, #10]
 8005644:	89b8      	ldrh	r0, [r7, #12]
 8005646:	f7fc faad 	bl	8001ba4 <LCD_DrawRectangle>
					LCD_DrawRectangle(Xs,Y2,320-Xs,Y2+20);
 800564a:	89bb      	ldrh	r3, [r7, #12]
 800564c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8005650:	b29a      	uxth	r2, r3
 8005652:	893b      	ldrh	r3, [r7, #8]
 8005654:	3314      	adds	r3, #20
 8005656:	b29b      	uxth	r3, r3
 8005658:	8939      	ldrh	r1, [r7, #8]
 800565a:	89b8      	ldrh	r0, [r7, #12]
 800565c:	f7fc faa2 	bl	8001ba4 <LCD_DrawRectangle>
 8005660:	e019      	b.n	8005696 <getChooseInformation+0x18e>
				}else
				{
					LCD_SetColorPoint(CYAN);
 8005662:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8005666:	f7fd fedd 	bl	8003424 <LCD_SetColorPoint>
					LCD_DrawRectangle(Xs,Y2,320-Xs,Y2+20);
 800566a:	89bb      	ldrh	r3, [r7, #12]
 800566c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8005670:	b29a      	uxth	r2, r3
 8005672:	893b      	ldrh	r3, [r7, #8]
 8005674:	3314      	adds	r3, #20
 8005676:	b29b      	uxth	r3, r3
 8005678:	8939      	ldrh	r1, [r7, #8]
 800567a:	89b8      	ldrh	r0, [r7, #12]
 800567c:	f7fc fa92 	bl	8001ba4 <LCD_DrawRectangle>
					LCD_DrawRectangle(Xs,Y1,320-Xs,Y1+20);
 8005680:	89bb      	ldrh	r3, [r7, #12]
 8005682:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8005686:	b29a      	uxth	r2, r3
 8005688:	897b      	ldrh	r3, [r7, #10]
 800568a:	3314      	adds	r3, #20
 800568c:	b29b      	uxth	r3, r3
 800568e:	8979      	ldrh	r1, [r7, #10]
 8005690:	89b8      	ldrh	r0, [r7, #12]
 8005692:	f7fc fa87 	bl	8001ba4 <LCD_DrawRectangle>
				}
				key = NOKEY;
 8005696:	2300      	movs	r3, #0
 8005698:	73bb      	strb	r3, [r7, #14]
				break;
 800569a:	e05f      	b.n	800575c <getChooseInformation+0x254>
			case DOWN:
				Row++;
 800569c:	4b35      	ldr	r3, [pc, #212]	; (8005774 <getChooseInformation+0x26c>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	3301      	adds	r3, #1
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	4b33      	ldr	r3, [pc, #204]	; (8005774 <getChooseInformation+0x26c>)
 80056a6:	701a      	strb	r2, [r3, #0]
				if(Row == 2)
 80056a8:	4b32      	ldr	r3, [pc, #200]	; (8005774 <getChooseInformation+0x26c>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d102      	bne.n	80056b6 <getChooseInformation+0x1ae>
				{
					Row = 0;
 80056b0:	4b30      	ldr	r3, [pc, #192]	; (8005774 <getChooseInformation+0x26c>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	701a      	strb	r2, [r3, #0]

				}
				if(Row == 1)
 80056b6:	4b2f      	ldr	r3, [pc, #188]	; (8005774 <getChooseInformation+0x26c>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d11a      	bne.n	80056f4 <getChooseInformation+0x1ec>
				{
					LCD_SetColorPoint(CYAN);
 80056be:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80056c2:	f7fd feaf 	bl	8003424 <LCD_SetColorPoint>
					LCD_DrawRectangle(Xs,Y1,320-Xs,Y1+20);
 80056c6:	89bb      	ldrh	r3, [r7, #12]
 80056c8:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	897b      	ldrh	r3, [r7, #10]
 80056d0:	3314      	adds	r3, #20
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	8979      	ldrh	r1, [r7, #10]
 80056d6:	89b8      	ldrh	r0, [r7, #12]
 80056d8:	f7fc fa64 	bl	8001ba4 <LCD_DrawRectangle>
					LCD_DrawRectangle(Xs,Y2,320-Xs,Y2+20);
 80056dc:	89bb      	ldrh	r3, [r7, #12]
 80056de:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	893b      	ldrh	r3, [r7, #8]
 80056e6:	3314      	adds	r3, #20
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	8939      	ldrh	r1, [r7, #8]
 80056ec:	89b8      	ldrh	r0, [r7, #12]
 80056ee:	f7fc fa59 	bl	8001ba4 <LCD_DrawRectangle>
 80056f2:	e019      	b.n	8005728 <getChooseInformation+0x220>
				}else
				{
					LCD_SetColorPoint(CYAN);
 80056f4:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80056f8:	f7fd fe94 	bl	8003424 <LCD_SetColorPoint>
					LCD_DrawRectangle(Xs,Y2,320-Xs,Y2+20);
 80056fc:	89bb      	ldrh	r3, [r7, #12]
 80056fe:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8005702:	b29a      	uxth	r2, r3
 8005704:	893b      	ldrh	r3, [r7, #8]
 8005706:	3314      	adds	r3, #20
 8005708:	b29b      	uxth	r3, r3
 800570a:	8939      	ldrh	r1, [r7, #8]
 800570c:	89b8      	ldrh	r0, [r7, #12]
 800570e:	f7fc fa49 	bl	8001ba4 <LCD_DrawRectangle>
					LCD_DrawRectangle(Xs,Y1,320-Xs,Y1+20);
 8005712:	89bb      	ldrh	r3, [r7, #12]
 8005714:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8005718:	b29a      	uxth	r2, r3
 800571a:	897b      	ldrh	r3, [r7, #10]
 800571c:	3314      	adds	r3, #20
 800571e:	b29b      	uxth	r3, r3
 8005720:	8979      	ldrh	r1, [r7, #10]
 8005722:	89b8      	ldrh	r0, [r7, #12]
 8005724:	f7fc fa3e 	bl	8001ba4 <LCD_DrawRectangle>
				}
				key = NOKEY;
 8005728:	2300      	movs	r3, #0
 800572a:	73bb      	strb	r3, [r7, #14]
				break;
 800572c:	e016      	b.n	800575c <getChooseInformation+0x254>
			case SELECT:
				if(Row == 0)
 800572e:	4b11      	ldr	r3, [pc, #68]	; (8005774 <getChooseInformation+0x26c>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d102      	bne.n	800573c <getChooseInformation+0x234>
				{
					action = RETURN_ACTION;
 8005736:	2301      	movs	r3, #1
 8005738:	73fb      	strb	r3, [r7, #15]
 800573a:	e001      	b.n	8005740 <getChooseInformation+0x238>
				}else
				{
					action = SELECT_ACTION;
 800573c:	2302      	movs	r3, #2
 800573e:	73fb      	strb	r3, [r7, #15]
				}

				flag = 0;
 8005740:	4b09      	ldr	r3, [pc, #36]	; (8005768 <getChooseInformation+0x260>)
 8005742:	2200      	movs	r2, #0
 8005744:	701a      	strb	r2, [r3, #0]
				Row = 0;
 8005746:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <getChooseInformation+0x26c>)
 8005748:	2200      	movs	r2, #0
 800574a:	701a      	strb	r2, [r3, #0]
				//lcdClear();
				LCD_Clear(WHITE);
 800574c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005750:	f7fd fe92 	bl	8003478 <LCD_Clear>
				//Print Titel
				key = NOKEY;
 8005754:	2300      	movs	r3, #0
 8005756:	73bb      	strb	r3, [r7, #14]
				break;
 8005758:	e000      	b.n	800575c <getChooseInformation+0x254>
			default:
				break;
 800575a:	bf00      	nop
			}
	}


	return action;
 800575c:	7bfb      	ldrb	r3, [r7, #15]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000162 	.word	0x20000162
 800576c:	080067f0 	.word	0x080067f0
 8005770:	080067f8 	.word	0x080067f8
 8005774:	20000163 	.word	0x20000163

08005778 <getChoosePrepare>:
Action_e getChoosePrepare(void)
{
 8005778:	b590      	push	{r4, r7, lr}
 800577a:	b08d      	sub	sp, #52	; 0x34
 800577c:	af02      	add	r7, sp, #8
	Action_e action = NONE_ACTION;
 800577e:	2300      	movs	r3, #0
 8005780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	u16 widthButton = 20;
 8005784:	2314      	movs	r3, #20
 8005786:	83fb      	strh	r3, [r7, #30]
	u16 heigthButton = 80;
 8005788:	2350      	movs	r3, #80	; 0x50
 800578a:	83bb      	strh	r3, [r7, #28]

	u16 XsButtonValve = 230;
 800578c:	23e6      	movs	r3, #230	; 0xe6
 800578e:	837b      	strh	r3, [r7, #26]
	u16 XeButtonValve = XsButtonValve + heigthButton;
 8005790:	8b7a      	ldrh	r2, [r7, #26]
 8005792:	8bbb      	ldrh	r3, [r7, #28]
 8005794:	4413      	add	r3, r2
 8005796:	833b      	strh	r3, [r7, #24]
	u16 YsButtonValve = 30;
 8005798:	231e      	movs	r3, #30
 800579a:	82fb      	strh	r3, [r7, #22]
	u16 YeButtonValve = YsButtonValve + widthButton;
 800579c:	8afa      	ldrh	r2, [r7, #22]
 800579e:	8bfb      	ldrh	r3, [r7, #30]
 80057a0:	4413      	add	r3, r2
 80057a2:	82bb      	strh	r3, [r7, #20]

	u16 XsButtonReturn = XsButtonValve;
 80057a4:	8b7b      	ldrh	r3, [r7, #26]
 80057a6:	827b      	strh	r3, [r7, #18]
	u16 XeButtonReturn = XsButtonReturn + heigthButton;
 80057a8:	8a7a      	ldrh	r2, [r7, #18]
 80057aa:	8bbb      	ldrh	r3, [r7, #28]
 80057ac:	4413      	add	r3, r2
 80057ae:	823b      	strh	r3, [r7, #16]
	u16 YsButtonReturn = YeButtonValve  + 20;
 80057b0:	8abb      	ldrh	r3, [r7, #20]
 80057b2:	3314      	adds	r3, #20
 80057b4:	81fb      	strh	r3, [r7, #14]
	u16 YeButtonReturn = YsButtonReturn + widthButton;
 80057b6:	89fa      	ldrh	r2, [r7, #14]
 80057b8:	8bfb      	ldrh	r3, [r7, #30]
 80057ba:	4413      	add	r3, r2
 80057bc:	81bb      	strh	r3, [r7, #12]


	static u8 flag = 0;
	static u8 Row = 0;
	key_t key = NOKEY;
 80057be:	2300      	movs	r3, #0
 80057c0:	623b      	str	r3, [r7, #32]

	static u16 xCurrent,xProHigh,xProLow;
	static eventProximitySensor_e eventProximity;
	static u8 stateCurrentSS = 0;

	u16 yCurrent = 80;
 80057c2:	2350      	movs	r3, #80	; 0x50
 80057c4:	817b      	strh	r3, [r7, #10]
	u16 yProHigh = 130;
 80057c6:	2382      	movs	r3, #130	; 0x82
 80057c8:	813b      	strh	r3, [r7, #8]
	u16 yProLow = 180;
 80057ca:	23b4      	movs	r3, #180	; 0xb4
 80057cc:	80fb      	strh	r3, [r7, #6]
	u16 rCircle = 20;
 80057ce:	2314      	movs	r3, #20
 80057d0:	80bb      	strh	r3, [r7, #4]
	if(flag == 0)
 80057d2:	4b92      	ldr	r3, [pc, #584]	; (8005a1c <getChoosePrepare+0x2a4>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f040 80b4 	bne.w	8005944 <getChoosePrepare+0x1cc>
	{
		xCurrent = LCD_ShowDevice(20, yCurrent, rCircle, (u8*)"Current: ", 0);
 80057dc:	88ba      	ldrh	r2, [r7, #4]
 80057de:	8979      	ldrh	r1, [r7, #10]
 80057e0:	2300      	movs	r3, #0
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	4b8e      	ldr	r3, [pc, #568]	; (8005a20 <getChoosePrepare+0x2a8>)
 80057e6:	2014      	movs	r0, #20
 80057e8:	f7fc ff5a 	bl	80026a0 <LCD_ShowDevice>
 80057ec:	4603      	mov	r3, r0
 80057ee:	461a      	mov	r2, r3
 80057f0:	4b8c      	ldr	r3, [pc, #560]	; (8005a24 <getChoosePrepare+0x2ac>)
 80057f2:	801a      	strh	r2, [r3, #0]
		xProHigh = LCD_ShowDevice(20, yProHigh, rCircle, (u8*)"Proximity High: ", 0);
 80057f4:	88ba      	ldrh	r2, [r7, #4]
 80057f6:	8939      	ldrh	r1, [r7, #8]
 80057f8:	2300      	movs	r3, #0
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	4b8a      	ldr	r3, [pc, #552]	; (8005a28 <getChoosePrepare+0x2b0>)
 80057fe:	2014      	movs	r0, #20
 8005800:	f7fc ff4e 	bl	80026a0 <LCD_ShowDevice>
 8005804:	4603      	mov	r3, r0
 8005806:	461a      	mov	r2, r3
 8005808:	4b88      	ldr	r3, [pc, #544]	; (8005a2c <getChoosePrepare+0x2b4>)
 800580a:	801a      	strh	r2, [r3, #0]
		xProLow = LCD_ShowDevice(20, yProLow, rCircle, (u8*)"Proximity Low: ", 0);
 800580c:	88ba      	ldrh	r2, [r7, #4]
 800580e:	88f9      	ldrh	r1, [r7, #6]
 8005810:	2300      	movs	r3, #0
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	4b86      	ldr	r3, [pc, #536]	; (8005a30 <getChoosePrepare+0x2b8>)
 8005816:	2014      	movs	r0, #20
 8005818:	f7fc ff42 	bl	80026a0 <LCD_ShowDevice>
 800581c:	4603      	mov	r3, r0
 800581e:	461a      	mov	r2, r3
 8005820:	4b84      	ldr	r3, [pc, #528]	; (8005a34 <getChoosePrepare+0x2bc>)
 8005822:	801a      	strh	r2, [r3, #0]

		LCD_ShowButton(XsButtonValve,YsButtonValve,heigthButton,widthButton,(u8*)"VALVE",GetStateValve());
 8005824:	f000 fd08 	bl	8006238 <GetStateValve>
 8005828:	4603      	mov	r3, r0
 800582a:	461c      	mov	r4, r3
 800582c:	8bfb      	ldrh	r3, [r7, #30]
 800582e:	8bba      	ldrh	r2, [r7, #28]
 8005830:	8af9      	ldrh	r1, [r7, #22]
 8005832:	8b78      	ldrh	r0, [r7, #26]
 8005834:	9401      	str	r4, [sp, #4]
 8005836:	4c80      	ldr	r4, [pc, #512]	; (8005a38 <getChoosePrepare+0x2c0>)
 8005838:	9400      	str	r4, [sp, #0]
 800583a:	f7fc fec1 	bl	80025c0 <LCD_ShowButton>
		LCD_ShowButton(XsButtonReturn,YsButtonReturn,heigthButton,widthButton,(u8*)"RETURN",1);
 800583e:	8bfb      	ldrh	r3, [r7, #30]
 8005840:	8bba      	ldrh	r2, [r7, #28]
 8005842:	89f9      	ldrh	r1, [r7, #14]
 8005844:	8a78      	ldrh	r0, [r7, #18]
 8005846:	2401      	movs	r4, #1
 8005848:	9401      	str	r4, [sp, #4]
 800584a:	4c7c      	ldr	r4, [pc, #496]	; (8005a3c <getChoosePrepare+0x2c4>)
 800584c:	9400      	str	r4, [sp, #0]
 800584e:	f7fc feb7 	bl	80025c0 <LCD_ShowButton>

		LCD_DrawRectangle(XsButtonValve-1,YsButtonValve-1,XeButtonValve+1,YeButtonValve+1);
 8005852:	8b7b      	ldrh	r3, [r7, #26]
 8005854:	3b01      	subs	r3, #1
 8005856:	b298      	uxth	r0, r3
 8005858:	8afb      	ldrh	r3, [r7, #22]
 800585a:	3b01      	subs	r3, #1
 800585c:	b299      	uxth	r1, r3
 800585e:	8b3b      	ldrh	r3, [r7, #24]
 8005860:	3301      	adds	r3, #1
 8005862:	b29a      	uxth	r2, r3
 8005864:	8abb      	ldrh	r3, [r7, #20]
 8005866:	3301      	adds	r3, #1
 8005868:	b29b      	uxth	r3, r3
 800586a:	f7fc f99b 	bl	8001ba4 <LCD_DrawRectangle>
		flag = 1;
 800586e:	4b6b      	ldr	r3, [pc, #428]	; (8005a1c <getChoosePrepare+0x2a4>)
 8005870:	2201      	movs	r2, #1
 8005872:	701a      	strb	r2, [r3, #0]
	}
	while(key == NOKEY)
 8005874:	e066      	b.n	8005944 <getChoosePrepare+0x1cc>
	{
		key = processEventButton();
 8005876:	f7fb f9e5 	bl	8000c44 <processEventButton>
 800587a:	4603      	mov	r3, r0
 800587c:	623b      	str	r3, [r7, #32]

		//Update State Sensor
			//Current-Sensor
		if(stateCurrentSS != currentSensorScan())
 800587e:	f000 fa09 	bl	8005c94 <currentSensorScan>
 8005882:	4603      	mov	r3, r0
 8005884:	461a      	mov	r2, r3
 8005886:	4b6e      	ldr	r3, [pc, #440]	; (8005a40 <getChoosePrepare+0x2c8>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d018      	beq.n	80058c0 <getChoosePrepare+0x148>
		{
			stateCurrentSS = currentSensorScan();
 800588e:	f000 fa01 	bl	8005c94 <currentSensorScan>
 8005892:	4603      	mov	r3, r0
 8005894:	461a      	mov	r2, r3
 8005896:	4b6a      	ldr	r3, [pc, #424]	; (8005a40 <getChoosePrepare+0x2c8>)
 8005898:	701a      	strb	r2, [r3, #0]
			if(stateCurrentSS == 0)
 800589a:	4b69      	ldr	r3, [pc, #420]	; (8005a40 <getChoosePrepare+0x2c8>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d107      	bne.n	80058b2 <getChoosePrepare+0x13a>
			{
				LCD_UpdateDeviceState(xCurrent, yCurrent, rCircle, 0);
 80058a2:	4b60      	ldr	r3, [pc, #384]	; (8005a24 <getChoosePrepare+0x2ac>)
 80058a4:	8818      	ldrh	r0, [r3, #0]
 80058a6:	88ba      	ldrh	r2, [r7, #4]
 80058a8:	8979      	ldrh	r1, [r7, #10]
 80058aa:	2300      	movs	r3, #0
 80058ac:	f7fc ff8e 	bl	80027cc <LCD_UpdateDeviceState>
 80058b0:	e006      	b.n	80058c0 <getChoosePrepare+0x148>
			}else
			{
				LCD_UpdateDeviceState(xCurrent, yCurrent, rCircle, 1);
 80058b2:	4b5c      	ldr	r3, [pc, #368]	; (8005a24 <getChoosePrepare+0x2ac>)
 80058b4:	8818      	ldrh	r0, [r3, #0]
 80058b6:	88ba      	ldrh	r2, [r7, #4]
 80058b8:	8979      	ldrh	r1, [r7, #10]
 80058ba:	2301      	movs	r3, #1
 80058bc:	f7fc ff86 	bl	80027cc <LCD_UpdateDeviceState>
			}
		}
		if(eventProximity !=proximitySensorScan())
 80058c0:	f000 fa1e 	bl	8005d00 <proximitySensorScan>
 80058c4:	4603      	mov	r3, r0
 80058c6:	461a      	mov	r2, r3
 80058c8:	4b5e      	ldr	r3, [pc, #376]	; (8005a44 <getChoosePrepare+0x2cc>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d039      	beq.n	8005944 <getChoosePrepare+0x1cc>
		{
			eventProximity = proximitySensorScan();
 80058d0:	f000 fa16 	bl	8005d00 <proximitySensorScan>
 80058d4:	4603      	mov	r3, r0
 80058d6:	461a      	mov	r2, r3
 80058d8:	4b5a      	ldr	r3, [pc, #360]	; (8005a44 <getChoosePrepare+0x2cc>)
 80058da:	701a      	strb	r2, [r3, #0]
			if(eventProximity == HIGH_LOCATION)
 80058dc:	4b59      	ldr	r3, [pc, #356]	; (8005a44 <getChoosePrepare+0x2cc>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d10e      	bne.n	8005902 <getChoosePrepare+0x18a>
			{
				LCD_UpdateDeviceState(xProHigh, yProHigh, rCircle, 1);
 80058e4:	4b51      	ldr	r3, [pc, #324]	; (8005a2c <getChoosePrepare+0x2b4>)
 80058e6:	8818      	ldrh	r0, [r3, #0]
 80058e8:	88ba      	ldrh	r2, [r7, #4]
 80058ea:	8939      	ldrh	r1, [r7, #8]
 80058ec:	2301      	movs	r3, #1
 80058ee:	f7fc ff6d 	bl	80027cc <LCD_UpdateDeviceState>
				LCD_UpdateDeviceState(xProLow, yProLow, rCircle, 0);
 80058f2:	4b50      	ldr	r3, [pc, #320]	; (8005a34 <getChoosePrepare+0x2bc>)
 80058f4:	8818      	ldrh	r0, [r3, #0]
 80058f6:	88ba      	ldrh	r2, [r7, #4]
 80058f8:	88f9      	ldrh	r1, [r7, #6]
 80058fa:	2300      	movs	r3, #0
 80058fc:	f7fc ff66 	bl	80027cc <LCD_UpdateDeviceState>
 8005900:	e020      	b.n	8005944 <getChoosePrepare+0x1cc>
			}else if(eventProximity == LOW_LOCATION)
 8005902:	4b50      	ldr	r3, [pc, #320]	; (8005a44 <getChoosePrepare+0x2cc>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2b02      	cmp	r3, #2
 8005908:	d10e      	bne.n	8005928 <getChoosePrepare+0x1b0>
			{
				LCD_UpdateDeviceState(xProHigh, yProHigh, rCircle, 0);
 800590a:	4b48      	ldr	r3, [pc, #288]	; (8005a2c <getChoosePrepare+0x2b4>)
 800590c:	8818      	ldrh	r0, [r3, #0]
 800590e:	88ba      	ldrh	r2, [r7, #4]
 8005910:	8939      	ldrh	r1, [r7, #8]
 8005912:	2300      	movs	r3, #0
 8005914:	f7fc ff5a 	bl	80027cc <LCD_UpdateDeviceState>
				LCD_UpdateDeviceState(xProLow, yProLow, rCircle, 1);
 8005918:	4b46      	ldr	r3, [pc, #280]	; (8005a34 <getChoosePrepare+0x2bc>)
 800591a:	8818      	ldrh	r0, [r3, #0]
 800591c:	88ba      	ldrh	r2, [r7, #4]
 800591e:	88f9      	ldrh	r1, [r7, #6]
 8005920:	2301      	movs	r3, #1
 8005922:	f7fc ff53 	bl	80027cc <LCD_UpdateDeviceState>
 8005926:	e00d      	b.n	8005944 <getChoosePrepare+0x1cc>
			}else
			{
				LCD_UpdateDeviceState(xProHigh, yProHigh, rCircle, 0);
 8005928:	4b40      	ldr	r3, [pc, #256]	; (8005a2c <getChoosePrepare+0x2b4>)
 800592a:	8818      	ldrh	r0, [r3, #0]
 800592c:	88ba      	ldrh	r2, [r7, #4]
 800592e:	8939      	ldrh	r1, [r7, #8]
 8005930:	2300      	movs	r3, #0
 8005932:	f7fc ff4b 	bl	80027cc <LCD_UpdateDeviceState>
				LCD_UpdateDeviceState(xProLow, yProLow, rCircle, 0);
 8005936:	4b3f      	ldr	r3, [pc, #252]	; (8005a34 <getChoosePrepare+0x2bc>)
 8005938:	8818      	ldrh	r0, [r3, #0]
 800593a:	88ba      	ldrh	r2, [r7, #4]
 800593c:	88f9      	ldrh	r1, [r7, #6]
 800593e:	2300      	movs	r3, #0
 8005940:	f7fc ff44 	bl	80027cc <LCD_UpdateDeviceState>
	while(key == NOKEY)
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d095      	beq.n	8005876 <getChoosePrepare+0xfe>

			//Proximity-Sensor

	}
	u8 state;
	switch(key)
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	2b09      	cmp	r3, #9
 800594e:	d07d      	beq.n	8005a4c <getChoosePrepare+0x2d4>
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	2b09      	cmp	r3, #9
 8005954:	f300 8108 	bgt.w	8005b68 <getChoosePrepare+0x3f0>
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	2b01      	cmp	r3, #1
 800595c:	f000 80cf 	beq.w	8005afe <getChoosePrepare+0x386>
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	2b03      	cmp	r3, #3
 8005964:	f040 8100 	bne.w	8005b68 <getChoosePrepare+0x3f0>
		{
		case UP:
			Row--;
 8005968:	4b37      	ldr	r3, [pc, #220]	; (8005a48 <getChoosePrepare+0x2d0>)
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	3b01      	subs	r3, #1
 800596e:	b2da      	uxtb	r2, r3
 8005970:	4b35      	ldr	r3, [pc, #212]	; (8005a48 <getChoosePrepare+0x2d0>)
 8005972:	701a      	strb	r2, [r3, #0]
			if(Row == 255)
 8005974:	4b34      	ldr	r3, [pc, #208]	; (8005a48 <getChoosePrepare+0x2d0>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	2bff      	cmp	r3, #255	; 0xff
 800597a:	d102      	bne.n	8005982 <getChoosePrepare+0x20a>
			{
				Row = 1;
 800597c:	4b32      	ldr	r3, [pc, #200]	; (8005a48 <getChoosePrepare+0x2d0>)
 800597e:	2201      	movs	r2, #1
 8005980:	701a      	strb	r2, [r3, #0]
			}
			if(Row == 1)
 8005982:	4b31      	ldr	r3, [pc, #196]	; (8005a48 <getChoosePrepare+0x2d0>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d120      	bne.n	80059cc <getChoosePrepare+0x254>
			{
				LCD_SetColorPoint(CYAN);
 800598a:	f647 70ff 	movw	r0, #32767	; 0x7fff
 800598e:	f7fd fd49 	bl	8003424 <LCD_SetColorPoint>
				LCD_DrawRectangle(XsButtonValve-1,YsButtonValve-1,XeButtonValve+1,YeButtonValve+1);
 8005992:	8b7b      	ldrh	r3, [r7, #26]
 8005994:	3b01      	subs	r3, #1
 8005996:	b298      	uxth	r0, r3
 8005998:	8afb      	ldrh	r3, [r7, #22]
 800599a:	3b01      	subs	r3, #1
 800599c:	b299      	uxth	r1, r3
 800599e:	8b3b      	ldrh	r3, [r7, #24]
 80059a0:	3301      	adds	r3, #1
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	8abb      	ldrh	r3, [r7, #20]
 80059a6:	3301      	adds	r3, #1
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	f7fc f8fb 	bl	8001ba4 <LCD_DrawRectangle>
				LCD_DrawRectangle(XsButtonReturn-1,YsButtonReturn-1,XeButtonReturn+1,YeButtonReturn+1);
 80059ae:	8a7b      	ldrh	r3, [r7, #18]
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b298      	uxth	r0, r3
 80059b4:	89fb      	ldrh	r3, [r7, #14]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b299      	uxth	r1, r3
 80059ba:	8a3b      	ldrh	r3, [r7, #16]
 80059bc:	3301      	adds	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	89bb      	ldrh	r3, [r7, #12]
 80059c2:	3301      	adds	r3, #1
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	f7fc f8ed 	bl	8001ba4 <LCD_DrawRectangle>
 80059ca:	e023      	b.n	8005a14 <getChoosePrepare+0x29c>
			}else
			{
				LCD_SetColorPoint(CYAN);
 80059cc:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80059d0:	f7fd fd28 	bl	8003424 <LCD_SetColorPoint>
				LCD_SetColorPoint(CYAN);
 80059d4:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80059d8:	f7fd fd24 	bl	8003424 <LCD_SetColorPoint>
				LCD_DrawRectangle(XsButtonReturn-1,YsButtonReturn-1,XeButtonReturn+1,YeButtonReturn+1);
 80059dc:	8a7b      	ldrh	r3, [r7, #18]
 80059de:	3b01      	subs	r3, #1
 80059e0:	b298      	uxth	r0, r3
 80059e2:	89fb      	ldrh	r3, [r7, #14]
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b299      	uxth	r1, r3
 80059e8:	8a3b      	ldrh	r3, [r7, #16]
 80059ea:	3301      	adds	r3, #1
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	89bb      	ldrh	r3, [r7, #12]
 80059f0:	3301      	adds	r3, #1
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f7fc f8d6 	bl	8001ba4 <LCD_DrawRectangle>
				LCD_DrawRectangle(XsButtonValve-1,YsButtonValve-1,XeButtonValve+1,YeButtonValve+1);
 80059f8:	8b7b      	ldrh	r3, [r7, #26]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b298      	uxth	r0, r3
 80059fe:	8afb      	ldrh	r3, [r7, #22]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b299      	uxth	r1, r3
 8005a04:	8b3b      	ldrh	r3, [r7, #24]
 8005a06:	3301      	adds	r3, #1
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	8abb      	ldrh	r3, [r7, #20]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f7fc f8c8 	bl	8001ba4 <LCD_DrawRectangle>

			}
			key = NOKEY;
 8005a14:	2300      	movs	r3, #0
 8005a16:	623b      	str	r3, [r7, #32]
			break;
 8005a18:	e0a7      	b.n	8005b6a <getChoosePrepare+0x3f2>
 8005a1a:	bf00      	nop
 8005a1c:	20000164 	.word	0x20000164
 8005a20:	08006800 	.word	0x08006800
 8005a24:	20000166 	.word	0x20000166
 8005a28:	0800680c 	.word	0x0800680c
 8005a2c:	20000168 	.word	0x20000168
 8005a30:	08006820 	.word	0x08006820
 8005a34:	2000016a 	.word	0x2000016a
 8005a38:	08006830 	.word	0x08006830
 8005a3c:	080067f0 	.word	0x080067f0
 8005a40:	2000016c 	.word	0x2000016c
 8005a44:	2000016d 	.word	0x2000016d
 8005a48:	2000016e 	.word	0x2000016e
		case DOWN:
			Row++;
 8005a4c:	4b4a      	ldr	r3, [pc, #296]	; (8005b78 <getChoosePrepare+0x400>)
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	3301      	adds	r3, #1
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	4b48      	ldr	r3, [pc, #288]	; (8005b78 <getChoosePrepare+0x400>)
 8005a56:	701a      	strb	r2, [r3, #0]
			if(Row == 2)
 8005a58:	4b47      	ldr	r3, [pc, #284]	; (8005b78 <getChoosePrepare+0x400>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d102      	bne.n	8005a66 <getChoosePrepare+0x2ee>
			{
				Row = 0;
 8005a60:	4b45      	ldr	r3, [pc, #276]	; (8005b78 <getChoosePrepare+0x400>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	701a      	strb	r2, [r3, #0]

			}
			if(Row == 1)
 8005a66:	4b44      	ldr	r3, [pc, #272]	; (8005b78 <getChoosePrepare+0x400>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d120      	bne.n	8005ab0 <getChoosePrepare+0x338>
			{
				LCD_SetColorPoint(CYAN);
 8005a6e:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8005a72:	f7fd fcd7 	bl	8003424 <LCD_SetColorPoint>
				LCD_DrawRectangle(XsButtonValve-1,YsButtonValve-1,XeButtonValve+1,YeButtonValve+1);
 8005a76:	8b7b      	ldrh	r3, [r7, #26]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b298      	uxth	r0, r3
 8005a7c:	8afb      	ldrh	r3, [r7, #22]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	b299      	uxth	r1, r3
 8005a82:	8b3b      	ldrh	r3, [r7, #24]
 8005a84:	3301      	adds	r3, #1
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	8abb      	ldrh	r3, [r7, #20]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	f7fc f889 	bl	8001ba4 <LCD_DrawRectangle>
				LCD_DrawRectangle(XsButtonReturn-1,YsButtonReturn-1,XeButtonReturn+1,YeButtonReturn+1);
 8005a92:	8a7b      	ldrh	r3, [r7, #18]
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b298      	uxth	r0, r3
 8005a98:	89fb      	ldrh	r3, [r7, #14]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	b299      	uxth	r1, r3
 8005a9e:	8a3b      	ldrh	r3, [r7, #16]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	89bb      	ldrh	r3, [r7, #12]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	f7fc f87b 	bl	8001ba4 <LCD_DrawRectangle>
 8005aae:	e023      	b.n	8005af8 <getChoosePrepare+0x380>
			}else
			{
				LCD_SetColorPoint(CYAN);
 8005ab0:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8005ab4:	f7fd fcb6 	bl	8003424 <LCD_SetColorPoint>
				LCD_SetColorPoint(CYAN);
 8005ab8:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8005abc:	f7fd fcb2 	bl	8003424 <LCD_SetColorPoint>
				LCD_DrawRectangle(XsButtonReturn-1,YsButtonReturn-1,XeButtonReturn+1,YeButtonReturn+1);
 8005ac0:	8a7b      	ldrh	r3, [r7, #18]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	b298      	uxth	r0, r3
 8005ac6:	89fb      	ldrh	r3, [r7, #14]
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b299      	uxth	r1, r3
 8005acc:	8a3b      	ldrh	r3, [r7, #16]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	89bb      	ldrh	r3, [r7, #12]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	f7fc f864 	bl	8001ba4 <LCD_DrawRectangle>
				LCD_DrawRectangle(XsButtonValve-1,YsButtonValve-1,XeButtonValve+1,YeButtonValve+1);
 8005adc:	8b7b      	ldrh	r3, [r7, #26]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b298      	uxth	r0, r3
 8005ae2:	8afb      	ldrh	r3, [r7, #22]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b299      	uxth	r1, r3
 8005ae8:	8b3b      	ldrh	r3, [r7, #24]
 8005aea:	3301      	adds	r3, #1
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	8abb      	ldrh	r3, [r7, #20]
 8005af0:	3301      	adds	r3, #1
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	f7fc f856 	bl	8001ba4 <LCD_DrawRectangle>

			}
			key = NOKEY;
 8005af8:	2300      	movs	r3, #0
 8005afa:	623b      	str	r3, [r7, #32]
			break;
 8005afc:	e035      	b.n	8005b6a <getChoosePrepare+0x3f2>
		case SELECT:

			if(Row == 0)
 8005afe:	4b1e      	ldr	r3, [pc, #120]	; (8005b78 <getChoosePrepare+0x400>)
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d124      	bne.n	8005b50 <getChoosePrepare+0x3d8>
			{
				state = GetStateValve();
 8005b06:	f000 fb97 	bl	8006238 <GetStateValve>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	70fb      	strb	r3, [r7, #3]
				if(state == PISTON_PUSH_UP)
 8005b0e:	78fb      	ldrb	r3, [r7, #3]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10e      	bne.n	8005b32 <getChoosePrepare+0x3ba>
				{
					//state = PISTON_PUSH_DOWN;
					valveControl(PISTON_PUSH_DOWN,VALVE_NUM_1);
 8005b14:	2100      	movs	r1, #0
 8005b16:	2001      	movs	r0, #1
 8005b18:	f000 fb4e 	bl	80061b8 <valveControl>
					//Update state on LCD
					LCD_ShowButton(XsButtonValve,YsButtonValve,heigthButton,widthButton,(u8*)"VALVE",1);
 8005b1c:	8bfb      	ldrh	r3, [r7, #30]
 8005b1e:	8bba      	ldrh	r2, [r7, #28]
 8005b20:	8af9      	ldrh	r1, [r7, #22]
 8005b22:	8b78      	ldrh	r0, [r7, #26]
 8005b24:	2401      	movs	r4, #1
 8005b26:	9401      	str	r4, [sp, #4]
 8005b28:	4c14      	ldr	r4, [pc, #80]	; (8005b7c <getChoosePrepare+0x404>)
 8005b2a:	9400      	str	r4, [sp, #0]
 8005b2c:	f7fc fd48 	bl	80025c0 <LCD_ShowButton>
 8005b30:	e014      	b.n	8005b5c <getChoosePrepare+0x3e4>
				}else
				{
					//state = PISTON_PUSH_UP;
					valveControl(PISTON_PUSH_UP,VALVE_NUM_1);
 8005b32:	2100      	movs	r1, #0
 8005b34:	2000      	movs	r0, #0
 8005b36:	f000 fb3f 	bl	80061b8 <valveControl>
					LCD_ShowButton(XsButtonValve,YsButtonValve,heigthButton,widthButton,(u8*)"VALVE",0);
 8005b3a:	8bfb      	ldrh	r3, [r7, #30]
 8005b3c:	8bba      	ldrh	r2, [r7, #28]
 8005b3e:	8af9      	ldrh	r1, [r7, #22]
 8005b40:	8b78      	ldrh	r0, [r7, #26]
 8005b42:	2400      	movs	r4, #0
 8005b44:	9401      	str	r4, [sp, #4]
 8005b46:	4c0d      	ldr	r4, [pc, #52]	; (8005b7c <getChoosePrepare+0x404>)
 8005b48:	9400      	str	r4, [sp, #0]
 8005b4a:	f7fc fd39 	bl	80025c0 <LCD_ShowButton>
 8005b4e:	e005      	b.n	8005b5c <getChoosePrepare+0x3e4>
				}
			}else
			{
				action = RETURN_ACTION;
 8005b50:	2301      	movs	r3, #1
 8005b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				flag = 0;
 8005b56:	4b0a      	ldr	r3, [pc, #40]	; (8005b80 <getChoosePrepare+0x408>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	701a      	strb	r2, [r3, #0]
			}


			Row = 0;
 8005b5c:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <getChoosePrepare+0x400>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	701a      	strb	r2, [r3, #0]

			//Print Titel
			key = NOKEY;
 8005b62:	2300      	movs	r3, #0
 8005b64:	623b      	str	r3, [r7, #32]
			break;
 8005b66:	e000      	b.n	8005b6a <getChoosePrepare+0x3f2>
		default:
			break;
 8005b68:	bf00      	nop
		}
	return action;
 8005b6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	372c      	adds	r7, #44	; 0x2c
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd90      	pop	{r4, r7, pc}
 8005b76:	bf00      	nop
 8005b78:	2000016e 	.word	0x2000016e
 8005b7c:	08006830 	.word	0x08006830
 8005b80:	20000164 	.word	0x20000164

08005b84 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	6039      	str	r1, [r7, #0]
 8005b8e:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8005b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	da0b      	bge.n	8005bb0 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	490c      	ldr	r1, [pc, #48]	; (8005bd0 <NVIC_SetPriority+0x4c>)
 8005b9e:	79fb      	ldrb	r3, [r7, #7]
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	3b04      	subs	r3, #4
 8005ba6:	0112      	lsls	r2, r2, #4
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	440b      	add	r3, r1
 8005bac:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bae:	e009      	b.n	8005bc4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	4907      	ldr	r1, [pc, #28]	; (8005bd4 <NVIC_SetPriority+0x50>)
 8005bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bba:	0112      	lsls	r2, r2, #4
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	e000ed00 	.word	0xe000ed00
 8005bd4:	e000e100 	.word	0xe000e100

08005bd8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005be8:	d301      	bcc.n	8005bee <SysTick_Config+0x16>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e00f      	b.n	8005c0e <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bee:	4a0a      	ldr	r2, [pc, #40]	; (8005c18 <SysTick_Config+0x40>)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bf6:	210f      	movs	r1, #15
 8005bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfc:	f7ff ffc2 	bl	8005b84 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c00:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <SysTick_Config+0x40>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c06:	4b04      	ldr	r3, [pc, #16]	; (8005c18 <SysTick_Config+0x40>)
 8005c08:	2207      	movs	r2, #7
 8005c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	e000e010 	.word	0xe000e010

08005c1c <TimerInit>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimerInit(void) {
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    RCC_GetClocksFreq(&RCC_Clocks);
 8005c22:	463b      	mov	r3, r7
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fa fcf7 	bl	8000618 <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.SYSCLK_Frequency/1000);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	4a0a      	ldr	r2, [pc, #40]	; (8005c58 <TimerInit+0x3c>)
 8005c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c32:	099b      	lsrs	r3, r3, #6
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7ff ffcf 	bl	8005bd8 <SysTick_Config>
    NVIC_SetPriority(SysTick_IRQn, 1);
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c40:	f7ff ffa0 	bl	8005b84 <NVIC_SetPriority>
    memsetl((uint8_t *)g_pTimerHandle, 0, sizeof(g_pTimerHandle));
 8005c44:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005c48:	2100      	movs	r1, #0
 8005c4a:	4804      	ldr	r0, [pc, #16]	; (8005c5c <TimerInit+0x40>)
 8005c4c:	f000 fa74 	bl	8006138 <memsetl>
    DBG_TIMER_SEND_STR("$ TimerInit\n");
}
 8005c50:	bf00      	nop
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	10624dd3 	.word	0x10624dd3
 8005c5c:	20000170 	.word	0x20000170

08005c60 <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 8005c64:	4b03      	ldr	r3, [pc, #12]	; (8005c74 <GetMilSecTick+0x14>)
 8005c66:	681b      	ldr	r3, [r3, #0]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	200002f0 	.word	0x200002f0

08005c78 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 8005c78:	b480      	push	{r7}
 8005c7a:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 8005c7c:	4b04      	ldr	r3, [pc, #16]	; (8005c90 <SysTick_Handler+0x18>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3301      	adds	r3, #1
 8005c82:	4a03      	ldr	r2, [pc, #12]	; (8005c90 <SysTick_Handler+0x18>)
 8005c84:	6013      	str	r3, [r2, #0]
}
 8005c86:	bf00      	nop
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	200002f0 	.word	0x200002f0

08005c94 <currentSensorScan>:
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;

	GPIO_Init(CURRENT_SENSOR_PORT, &GPIO_InitStruct);
}
uint8_t currentSensorScan(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
	uint8_t state = 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	71fb      	strb	r3, [r7, #7]
	if(GPIO_ReadInputDataBit(CURRENT_SENSOR_PORT, CURRENT_SENSOR_PIN))
 8005c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ca2:	4808      	ldr	r0, [pc, #32]	; (8005cc4 <currentSensorScan+0x30>)
 8005ca4:	f7fa fc37 	bl	8000516 <GPIO_ReadInputDataBit>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <currentSensorScan+0x20>
	{
		state = 0;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	71fb      	strb	r3, [r7, #7]
 8005cb2:	e001      	b.n	8005cb8 <currentSensorScan+0x24>
	}else
		state = 1;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	71fb      	strb	r3, [r7, #7]
	return state;
 8005cb8:	79fb      	ldrb	r3, [r7, #7]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	40020000 	.word	0x40020000

08005cc8 <proximitySensorInit>:
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

/******************************************************************************/
void proximitySensorInit(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	RCC_AHB1PeriphClockCmd(PROXIMITY_SENSOR_RCC, ENABLE);
 8005cce:	2101      	movs	r1, #1
 8005cd0:	2004      	movs	r0, #4
 8005cd2:	f7fa fd4f 	bl	8000774 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_Pin  = PROXIMITY_SENSOR_1_PIN|PROXIMITY_SENSOR_2_PIN;
 8005cda:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005cde:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	717b      	strb	r3, [r7, #5]

	GPIO_Init(PROXIMITY_SENSOR_PORT, &GPIO_InitStruct);
 8005ce8:	463b      	mov	r3, r7
 8005cea:	4619      	mov	r1, r3
 8005cec:	4803      	ldr	r0, [pc, #12]	; (8005cfc <proximitySensorInit+0x34>)
 8005cee:	f7fa fb83 	bl	80003f8 <GPIO_Init>
}
 8005cf2:	bf00      	nop
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	40020800 	.word	0x40020800

08005d00 <proximitySensorScan>:
eventProximitySensor_e proximitySensorScan(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
	uint8_t byFlagHighLocation = 0;
 8005d06:	2300      	movs	r3, #0
 8005d08:	71fb      	strb	r3, [r7, #7]
	uint8_t byFlagLowLocation = 0;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	71bb      	strb	r3, [r7, #6]
	eventProximitySensor_e temp;
	if(GPIO_ReadInputDataBit(PROXIMITY_SENSOR_PORT, PROXIMITY_SENSOR_1_PIN))
 8005d0e:	2140      	movs	r1, #64	; 0x40
 8005d10:	4818      	ldr	r0, [pc, #96]	; (8005d74 <proximitySensorScan+0x74>)
 8005d12:	f7fa fc00 	bl	8000516 <GPIO_ReadInputDataBit>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <proximitySensorScan+0x22>
	{
		byFlagHighLocation = 1;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	71fb      	strb	r3, [r7, #7]
 8005d20:	e001      	b.n	8005d26 <proximitySensorScan+0x26>
	}else
		byFlagHighLocation = 0;
 8005d22:	2300      	movs	r3, #0
 8005d24:	71fb      	strb	r3, [r7, #7]
	if(GPIO_ReadInputDataBit(PROXIMITY_SENSOR_PORT, PROXIMITY_SENSOR_2_PIN))
 8005d26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d2a:	4812      	ldr	r0, [pc, #72]	; (8005d74 <proximitySensorScan+0x74>)
 8005d2c:	f7fa fbf3 	bl	8000516 <GPIO_ReadInputDataBit>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <proximitySensorScan+0x3c>
	{
		byFlagLowLocation = 1;
 8005d36:	2301      	movs	r3, #1
 8005d38:	71bb      	strb	r3, [r7, #6]
 8005d3a:	e001      	b.n	8005d40 <proximitySensorScan+0x40>
	}else
		byFlagLowLocation = 0;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	71bb      	strb	r3, [r7, #6]
	if(byFlagHighLocation)
 8005d40:	79fb      	ldrb	r3, [r7, #7]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d008      	beq.n	8005d58 <proximitySensorScan+0x58>
	{
		if(byFlagLowLocation)
 8005d46:	79bb      	ldrb	r3, [r7, #6]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <proximitySensorScan+0x52>
		{
			temp = ERROR_SENSOR;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	717b      	strb	r3, [r7, #5]
 8005d50:	e00a      	b.n	8005d68 <proximitySensorScan+0x68>
		}else
		{
			temp = HIGH_LOCATION;
 8005d52:	2301      	movs	r3, #1
 8005d54:	717b      	strb	r3, [r7, #5]
 8005d56:	e007      	b.n	8005d68 <proximitySensorScan+0x68>
		}
	}else
	{
		if(byFlagLowLocation)
 8005d58:	79bb      	ldrb	r3, [r7, #6]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <proximitySensorScan+0x64>
		{
			temp = LOW_LOCATION;
 8005d5e:	2302      	movs	r3, #2
 8005d60:	717b      	strb	r3, [r7, #5]
 8005d62:	e001      	b.n	8005d68 <proximitySensorScan+0x68>
		}else
		{
			temp = BW2_LOCATION;
 8005d64:	2303      	movs	r3, #3
 8005d66:	717b      	strb	r3, [r7, #5]
		}
	}
	return temp;
 8005d68:	797b      	ldrb	r3, [r7, #5]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	40020800 	.word	0x40020800

08005d78 <updateDataRunHandleCallBack>:
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

/******************************************************************************/
void updateDataRunHandleCallBack(upDateDataRunHandle pHandle)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	pUpdateRunDataHandle = pHandle;
 8005d80:	4a04      	ldr	r2, [pc, #16]	; (8005d94 <updateDataRunHandleCallBack+0x1c>)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6013      	str	r3, [r2, #0]
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	200002f4 	.word	0x200002f4

08005d98 <setCountValue>:
void setCountValue(u32 countMax,u32 TimeHold)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
	g_dwCountMax = countMax;
 8005da2:	4a06      	ldr	r2, [pc, #24]	; (8005dbc <setCountValue+0x24>)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6013      	str	r3, [r2, #0]
	g_TimeHold = TimeHold;
 8005da8:	4a05      	ldr	r2, [pc, #20]	; (8005dc0 <setCountValue+0x28>)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	6013      	str	r3, [r2, #0]
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	20000304 	.word	0x20000304
 8005dc0:	20000308 	.word	0x20000308

08005dc4 <byProcessSequenceControl>:
u8 byProcessSequenceControl(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
	u8 state = 0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	71fb      	strb	r3, [r7, #7]
	static u32 dwTimeInit = 0,dwTimeCurrent;
	static u8 byFlagTemp = 0;
	static u8 byCountError = 0;
	if(g_dwCountValue <= g_dwCountMax)
 8005dce:	4b90      	ldr	r3, [pc, #576]	; (8006010 <byProcessSequenceControl+0x24c>)
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4b90      	ldr	r3, [pc, #576]	; (8006014 <byProcessSequenceControl+0x250>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	f200 8107 	bhi.w	8005fea <byProcessSequenceControl+0x226>
	{
		switch(eventDevice)
 8005ddc:	4b8e      	ldr	r3, [pc, #568]	; (8006018 <byProcessSequenceControl+0x254>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	f200 80fe 	bhi.w	8005fe2 <byProcessSequenceControl+0x21e>
 8005de6:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <byProcessSequenceControl+0x28>)
 8005de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dec:	08005e01 	.word	0x08005e01
 8005df0:	08005e39 	.word	0x08005e39
 8005df4:	08005ed7 	.word	0x08005ed7
 8005df8:	08005ef1 	.word	0x08005ef1
 8005dfc:	08005f6d 	.word	0x08005f6d
		{
		case PUSH_UP:
			//Dua piston len cao va luu thoi gian
			pData[0] = RUN;
 8005e00:	4b86      	ldr	r3, [pc, #536]	; (800601c <byProcessSequenceControl+0x258>)
 8005e02:	2202      	movs	r2, #2
 8005e04:	601a      	str	r2, [r3, #0]
			pData[2]= g_dwCountValue;
 8005e06:	4b82      	ldr	r3, [pc, #520]	; (8006010 <byProcessSequenceControl+0x24c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a84      	ldr	r2, [pc, #528]	; (800601c <byProcessSequenceControl+0x258>)
 8005e0c:	6093      	str	r3, [r2, #8]
			pData[3]= g_dwCountMiss;
 8005e0e:	4b84      	ldr	r3, [pc, #528]	; (8006020 <byProcessSequenceControl+0x25c>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a82      	ldr	r2, [pc, #520]	; (800601c <byProcessSequenceControl+0x258>)
 8005e14:	60d3      	str	r3, [r2, #12]
			pUpdateRunDataHandle((void*)pData);
 8005e16:	4b83      	ldr	r3, [pc, #524]	; (8006024 <byProcessSequenceControl+0x260>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4880      	ldr	r0, [pc, #512]	; (800601c <byProcessSequenceControl+0x258>)
 8005e1c:	4798      	blx	r3
			dwTimeInit = GetMilSecTick();
 8005e1e:	f7ff ff1f 	bl	8005c60 <GetMilSecTick>
 8005e22:	4603      	mov	r3, r0
 8005e24:	4a80      	ldr	r2, [pc, #512]	; (8006028 <byProcessSequenceControl+0x264>)
 8005e26:	6013      	str	r3, [r2, #0]
			valveControl(PISTON_PUSH_UP, VALVE_NUM_1);
 8005e28:	2100      	movs	r1, #0
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	f000 f9c4 	bl	80061b8 <valveControl>
			eventDevice = PUSH_UP_DONE;
 8005e30:	4b79      	ldr	r3, [pc, #484]	; (8006018 <byProcessSequenceControl+0x254>)
 8005e32:	2201      	movs	r2, #1
 8005e34:	701a      	strb	r2, [r3, #0]
			break;
 8005e36:	e0e6      	b.n	8006006 <byProcessSequenceControl+0x242>
		case PUSH_UP_DONE:
			if(proximitySensorScan() == HIGH_LOCATION)
 8005e38:	f7ff ff62 	bl	8005d00 <proximitySensorScan>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d11c      	bne.n	8005e7c <byProcessSequenceControl+0xb8>
			{
				dwTimeCurrent = GetMilSecTick();
 8005e42:	f7ff ff0d 	bl	8005c60 <GetMilSecTick>
 8005e46:	4603      	mov	r3, r0
 8005e48:	4a78      	ldr	r2, [pc, #480]	; (800602c <byProcessSequenceControl+0x268>)
 8005e4a:	6013      	str	r3, [r2, #0]
				if(dwCalculatorTime(dwTimeInit, dwTimeCurrent)>g_TimeHold)
 8005e4c:	4b76      	ldr	r3, [pc, #472]	; (8006028 <byProcessSequenceControl+0x264>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a76      	ldr	r2, [pc, #472]	; (800602c <byProcessSequenceControl+0x268>)
 8005e52:	6812      	ldr	r2, [r2, #0]
 8005e54:	4611      	mov	r1, r2
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 f9fa 	bl	8006250 <dwCalculatorTime>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	4b74      	ldr	r3, [pc, #464]	; (8006030 <byProcessSequenceControl+0x26c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	f240 80ca 	bls.w	8005ffc <byProcessSequenceControl+0x238>
				{
					//Bao loi
					eventDevice = PUSH_DOWN;
 8005e68:	4b6b      	ldr	r3, [pc, #428]	; (8006018 <byProcessSequenceControl+0x254>)
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	701a      	strb	r2, [r3, #0]
					dwTimeInit = 0;
 8005e6e:	4b6e      	ldr	r3, [pc, #440]	; (8006028 <byProcessSequenceControl+0x264>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]
					dwTimeCurrent = 0;
 8005e74:	4b6d      	ldr	r3, [pc, #436]	; (800602c <byProcessSequenceControl+0x268>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	601a      	str	r2, [r3, #0]

						state = 1;
					}
				}
			}
			break;
 8005e7a:	e0bf      	b.n	8005ffc <byProcessSequenceControl+0x238>
				dwTimeCurrent = GetMilSecTick();
 8005e7c:	f7ff fef0 	bl	8005c60 <GetMilSecTick>
 8005e80:	4603      	mov	r3, r0
 8005e82:	4a6a      	ldr	r2, [pc, #424]	; (800602c <byProcessSequenceControl+0x268>)
 8005e84:	6013      	str	r3, [r2, #0]
				if(dwCalculatorTime(dwTimeInit, dwTimeCurrent)>g_TimeHold)
 8005e86:	4b68      	ldr	r3, [pc, #416]	; (8006028 <byProcessSequenceControl+0x264>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a68      	ldr	r2, [pc, #416]	; (800602c <byProcessSequenceControl+0x268>)
 8005e8c:	6812      	ldr	r2, [r2, #0]
 8005e8e:	4611      	mov	r1, r2
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 f9dd 	bl	8006250 <dwCalculatorTime>
 8005e96:	4602      	mov	r2, r0
 8005e98:	4b65      	ldr	r3, [pc, #404]	; (8006030 <byProcessSequenceControl+0x26c>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	f240 80ad 	bls.w	8005ffc <byProcessSequenceControl+0x238>
					dwTimeInit = 0;
 8005ea2:	4b61      	ldr	r3, [pc, #388]	; (8006028 <byProcessSequenceControl+0x264>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]
					dwTimeCurrent = 0;
 8005ea8:	4b60      	ldr	r3, [pc, #384]	; (800602c <byProcessSequenceControl+0x268>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]
					byCountError++;
 8005eae:	4b61      	ldr	r3, [pc, #388]	; (8006034 <byProcessSequenceControl+0x270>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	4b5f      	ldr	r3, [pc, #380]	; (8006034 <byProcessSequenceControl+0x270>)
 8005eb8:	701a      	strb	r2, [r3, #0]
					eventDevice = PUSH_UP;
 8005eba:	4b57      	ldr	r3, [pc, #348]	; (8006018 <byProcessSequenceControl+0x254>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	701a      	strb	r2, [r3, #0]
					if(byCountError >= 10)
 8005ec0:	4b5c      	ldr	r3, [pc, #368]	; (8006034 <byProcessSequenceControl+0x270>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b09      	cmp	r3, #9
 8005ec6:	f240 8099 	bls.w	8005ffc <byProcessSequenceControl+0x238>
						byCountError = 0;
 8005eca:	4b5a      	ldr	r3, [pc, #360]	; (8006034 <byProcessSequenceControl+0x270>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	701a      	strb	r2, [r3, #0]
						state = 1;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	71fb      	strb	r3, [r7, #7]
			break;
 8005ed4:	e092      	b.n	8005ffc <byProcessSequenceControl+0x238>
		case PUSH_DOWN:
			//Dua piston Xuong duoi va luu thoi gian
			dwTimeInit = GetMilSecTick();
 8005ed6:	f7ff fec3 	bl	8005c60 <GetMilSecTick>
 8005eda:	4603      	mov	r3, r0
 8005edc:	4a52      	ldr	r2, [pc, #328]	; (8006028 <byProcessSequenceControl+0x264>)
 8005ede:	6013      	str	r3, [r2, #0]

			valveControl(PISTON_PUSH_DOWN, VALVE_NUM_1);
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	2001      	movs	r0, #1
 8005ee4:	f000 f968 	bl	80061b8 <valveControl>
			eventDevice = PUSH_DOWN_DONE;
 8005ee8:	4b4b      	ldr	r3, [pc, #300]	; (8006018 <byProcessSequenceControl+0x254>)
 8005eea:	2203      	movs	r2, #3
 8005eec:	701a      	strb	r2, [r3, #0]
			break;
 8005eee:	e08a      	b.n	8006006 <byProcessSequenceControl+0x242>
		case PUSH_DOWN_DONE:
			if(proximitySensorScan() == LOW_LOCATION)
 8005ef0:	f7ff ff06 	bl	8005d00 <proximitySensorScan>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d103      	bne.n	8005f02 <byProcessSequenceControl+0x13e>
			{
				eventDevice = CHECK_CURRENT_SENSOR;
 8005efa:	4b47      	ldr	r3, [pc, #284]	; (8006018 <byProcessSequenceControl+0x254>)
 8005efc:	2204      	movs	r2, #4
 8005efe:	701a      	strb	r2, [r3, #0]
				{
					byCountError = 0;
					state = 1;
				}
			}
			break;
 8005f00:	e07e      	b.n	8006000 <byProcessSequenceControl+0x23c>
				dwTimeCurrent = GetMilSecTick();
 8005f02:	f7ff fead 	bl	8005c60 <GetMilSecTick>
 8005f06:	4603      	mov	r3, r0
 8005f08:	4a48      	ldr	r2, [pc, #288]	; (800602c <byProcessSequenceControl+0x268>)
 8005f0a:	6013      	str	r3, [r2, #0]
				if(dwCalculatorTime(dwTimeInit, dwTimeCurrent)>g_TimeHold)
 8005f0c:	4b46      	ldr	r3, [pc, #280]	; (8006028 <byProcessSequenceControl+0x264>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a46      	ldr	r2, [pc, #280]	; (800602c <byProcessSequenceControl+0x268>)
 8005f12:	6812      	ldr	r2, [r2, #0]
 8005f14:	4611      	mov	r1, r2
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 f99a 	bl	8006250 <dwCalculatorTime>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	4b44      	ldr	r3, [pc, #272]	; (8006030 <byProcessSequenceControl+0x26c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d918      	bls.n	8005f58 <byProcessSequenceControl+0x194>
					g_dwCountValue++;
 8005f26:	4b3a      	ldr	r3, [pc, #232]	; (8006010 <byProcessSequenceControl+0x24c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	4a38      	ldr	r2, [pc, #224]	; (8006010 <byProcessSequenceControl+0x24c>)
 8005f2e:	6013      	str	r3, [r2, #0]
					g_dwCountMiss ++;
 8005f30:	4b3b      	ldr	r3, [pc, #236]	; (8006020 <byProcessSequenceControl+0x25c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3301      	adds	r3, #1
 8005f36:	4a3a      	ldr	r2, [pc, #232]	; (8006020 <byProcessSequenceControl+0x25c>)
 8005f38:	6013      	str	r3, [r2, #0]
					byCountError ++;
 8005f3a:	4b3e      	ldr	r3, [pc, #248]	; (8006034 <byProcessSequenceControl+0x270>)
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	4b3c      	ldr	r3, [pc, #240]	; (8006034 <byProcessSequenceControl+0x270>)
 8005f44:	701a      	strb	r2, [r3, #0]
					dwTimeInit = 0;
 8005f46:	4b38      	ldr	r3, [pc, #224]	; (8006028 <byProcessSequenceControl+0x264>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]
					dwTimeCurrent = 0;
 8005f4c:	4b37      	ldr	r3, [pc, #220]	; (800602c <byProcessSequenceControl+0x268>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	601a      	str	r2, [r3, #0]
					eventDevice = PUSH_UP;
 8005f52:	4b31      	ldr	r3, [pc, #196]	; (8006018 <byProcessSequenceControl+0x254>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	701a      	strb	r2, [r3, #0]
				if(byCountError >= 10)
 8005f58:	4b36      	ldr	r3, [pc, #216]	; (8006034 <byProcessSequenceControl+0x270>)
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b09      	cmp	r3, #9
 8005f5e:	d94f      	bls.n	8006000 <byProcessSequenceControl+0x23c>
					byCountError = 0;
 8005f60:	4b34      	ldr	r3, [pc, #208]	; (8006034 <byProcessSequenceControl+0x270>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	701a      	strb	r2, [r3, #0]
					state = 1;
 8005f66:	2301      	movs	r3, #1
 8005f68:	71fb      	strb	r3, [r7, #7]
			break;
 8005f6a:	e049      	b.n	8006000 <byProcessSequenceControl+0x23c>
		case CHECK_CURRENT_SENSOR:

			if(byFlagTemp == 0)
 8005f6c:	4b32      	ldr	r3, [pc, #200]	; (8006038 <byProcessSequenceControl+0x274>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d108      	bne.n	8005f86 <byProcessSequenceControl+0x1c2>
			{
				dwTimeInit = GetMilSecTick();
 8005f74:	f7ff fe74 	bl	8005c60 <GetMilSecTick>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	4a2b      	ldr	r2, [pc, #172]	; (8006028 <byProcessSequenceControl+0x264>)
 8005f7c:	6013      	str	r3, [r2, #0]
				byFlagTemp = 1;
 8005f7e:	4b2e      	ldr	r3, [pc, #184]	; (8006038 <byProcessSequenceControl+0x274>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	701a      	strb	r2, [r3, #0]
					dwTimeInit = 0;
					dwTimeCurrent = 0;
					byFlagTemp = 0;
				}
			}
			break;
 8005f84:	e03e      	b.n	8006004 <byProcessSequenceControl+0x240>
				dwTimeCurrent = GetMilSecTick();
 8005f86:	f7ff fe6b 	bl	8005c60 <GetMilSecTick>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	4a27      	ldr	r2, [pc, #156]	; (800602c <byProcessSequenceControl+0x268>)
 8005f8e:	6013      	str	r3, [r2, #0]
				if(dwCalculatorTime(dwTimeInit, dwTimeCurrent)>g_TimeHold)
 8005f90:	4b25      	ldr	r3, [pc, #148]	; (8006028 <byProcessSequenceControl+0x264>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a25      	ldr	r2, [pc, #148]	; (800602c <byProcessSequenceControl+0x268>)
 8005f96:	6812      	ldr	r2, [r2, #0]
 8005f98:	4611      	mov	r1, r2
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 f958 	bl	8006250 <dwCalculatorTime>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	4b23      	ldr	r3, [pc, #140]	; (8006030 <byProcessSequenceControl+0x26c>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d92c      	bls.n	8006004 <byProcessSequenceControl+0x240>
					if(currentSensorScan())
 8005faa:	f7ff fe73 	bl	8005c94 <currentSensorScan>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d104      	bne.n	8005fbe <byProcessSequenceControl+0x1fa>
						g_dwCountMiss ++;
 8005fb4:	4b1a      	ldr	r3, [pc, #104]	; (8006020 <byProcessSequenceControl+0x25c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	4a19      	ldr	r2, [pc, #100]	; (8006020 <byProcessSequenceControl+0x25c>)
 8005fbc:	6013      	str	r3, [r2, #0]
					g_dwCountValue++;
 8005fbe:	4b14      	ldr	r3, [pc, #80]	; (8006010 <byProcessSequenceControl+0x24c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	4a12      	ldr	r2, [pc, #72]	; (8006010 <byProcessSequenceControl+0x24c>)
 8005fc6:	6013      	str	r3, [r2, #0]
					eventDevice = PUSH_UP;
 8005fc8:	4b13      	ldr	r3, [pc, #76]	; (8006018 <byProcessSequenceControl+0x254>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	701a      	strb	r2, [r3, #0]
					dwTimeInit = 0;
 8005fce:	4b16      	ldr	r3, [pc, #88]	; (8006028 <byProcessSequenceControl+0x264>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	601a      	str	r2, [r3, #0]
					dwTimeCurrent = 0;
 8005fd4:	4b15      	ldr	r3, [pc, #84]	; (800602c <byProcessSequenceControl+0x268>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	601a      	str	r2, [r3, #0]
					byFlagTemp = 0;
 8005fda:	4b17      	ldr	r3, [pc, #92]	; (8006038 <byProcessSequenceControl+0x274>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	701a      	strb	r2, [r3, #0]
			break;
 8005fe0:	e010      	b.n	8006004 <byProcessSequenceControl+0x240>
		default:
			eventDevice = PUSH_UP;
 8005fe2:	4b0d      	ldr	r3, [pc, #52]	; (8006018 <byProcessSequenceControl+0x254>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	701a      	strb	r2, [r3, #0]
			break;
 8005fe8:	e00d      	b.n	8006006 <byProcessSequenceControl+0x242>
		}
	}else
	{
		g_dwCountMiss = 0;
 8005fea:	4b0d      	ldr	r3, [pc, #52]	; (8006020 <byProcessSequenceControl+0x25c>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]
		g_dwCountValue = 0;
 8005ff0:	4b07      	ldr	r3, [pc, #28]	; (8006010 <byProcessSequenceControl+0x24c>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
		state = 1;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	71fb      	strb	r3, [r7, #7]
 8005ffa:	e004      	b.n	8006006 <byProcessSequenceControl+0x242>
			break;
 8005ffc:	bf00      	nop
 8005ffe:	e002      	b.n	8006006 <byProcessSequenceControl+0x242>
			break;
 8006000:	bf00      	nop
 8006002:	e000      	b.n	8006006 <byProcessSequenceControl+0x242>
			break;
 8006004:	bf00      	nop
	}
	return state;
 8006006:	79fb      	ldrb	r3, [r7, #7]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	200002fc 	.word	0x200002fc
 8006014:	20000304 	.word	0x20000304
 8006018:	200002f8 	.word	0x200002f8
 800601c:	2000030c 	.word	0x2000030c
 8006020:	20000300 	.word	0x20000300
 8006024:	200002f4 	.word	0x200002f4
 8006028:	20000320 	.word	0x20000320
 800602c:	20000324 	.word	0x20000324
 8006030:	20000308 	.word	0x20000308
 8006034:	20000328 	.word	0x20000328
 8006038:	20000329 	.word	0x20000329

0800603c <SPI_WriteByte>:
 * @parameters :SPIx: SPI type,x for 1,2,3
                Byte:Data to be written
 * @retvalue   :Data received by the bus
******************************************************************************/
u8 SPI_WriteByte(SPI_TypeDef* SPIx,u8 Byte)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	460b      	mov	r3, r1
 8006046:	70fb      	strb	r3, [r7, #3]
	while((SPIx->SR&SPI_I2S_FLAG_TXE)==RESET);
 8006048:	bf00      	nop
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	891b      	ldrh	r3, [r3, #8]
 800604e:	b29b      	uxth	r3, r3
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d0f8      	beq.n	800604a <SPI_WriteByte+0xe>
	SPIx->DR=Byte;
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	b29a      	uxth	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	819a      	strh	r2, [r3, #12]
	while((SPIx->SR&SPI_I2S_FLAG_RXNE)==RESET);
 8006060:	bf00      	nop
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	891b      	ldrh	r3, [r3, #8]
 8006066:	b29b      	uxth	r3, r3
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0f8      	beq.n	8006062 <SPI_WriteByte+0x26>
	return SPIx->DR;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	899b      	ldrh	r3, [r3, #12]
 8006074:	b29b      	uxth	r3, r3
 8006076:	b2db      	uxtb	r3, r3
} 
 8006078:	4618      	mov	r0, r3
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <SPI1_Init>:
 * @function   :Initialize the STM32 hardware SPI1
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void SPI1_Init(void)	
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStructure;
	SPI_InitTypeDef  SPI_InitStructure;

	RCC_AHB1PeriphClockCmd(LCD_GPIO_RCC, ENABLE);
 800608a:	2101      	movs	r1, #1
 800608c:	2002      	movs	r0, #2
 800608e:	f7fa fb71 	bl	8000774 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(LCD_SPI_RCC, ENABLE);
 8006092:	2101      	movs	r1, #1
 8006094:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006098:	f7fa fb8c 	bl	80007b4 <RCC_APB2PeriphClockCmd>
	
	GPIO_InitStructure.GPIO_Pin = LCD_SPI_GPIO_SCK|LCD_SPI_GPIO_MISO|LCD_SPI_GPIO_MOSI;
 800609c:	2338      	movs	r3, #56	; 0x38
 800609e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80060a0:	2302      	movs	r3, #2
 80060a2:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80060a4:	2300      	movs	r3, #0
 80060a6:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80060a8:	2303      	movs	r3, #3
 80060aa:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80060ac:	2301      	movs	r3, #1
 80060ae:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(LCD_SPI_PORT, &GPIO_InitStructure);
 80060b0:	f107 0318 	add.w	r3, r7, #24
 80060b4:	4619      	mov	r1, r3
 80060b6:	481e      	ldr	r0, [pc, #120]	; (8006130 <SPI1_Init+0xac>)
 80060b8:	f7fa f99e 	bl	80003f8 <GPIO_Init>
	
	GPIO_PinAFConfig(LCD_SPI_PORT,LCD_SPI_PINSOURCE_SCK,LCD_SPI_AF);
 80060bc:	2205      	movs	r2, #5
 80060be:	2103      	movs	r1, #3
 80060c0:	481b      	ldr	r0, [pc, #108]	; (8006130 <SPI1_Init+0xac>)
 80060c2:	f7fa fa60 	bl	8000586 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(LCD_SPI_PORT,LCD_SPI_PINSOURCE_MISO,LCD_SPI_AF);
 80060c6:	2205      	movs	r2, #5
 80060c8:	2104      	movs	r1, #4
 80060ca:	4819      	ldr	r0, [pc, #100]	; (8006130 <SPI1_Init+0xac>)
 80060cc:	f7fa fa5b 	bl	8000586 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(LCD_SPI_PORT,LCD_SPI_PINSOURCE_MOSI,LCD_SPI_AF);
 80060d0:	2205      	movs	r2, #5
 80060d2:	2105      	movs	r1, #5
 80060d4:	4816      	ldr	r0, [pc, #88]	; (8006130 <SPI1_Init+0xac>)
 80060d6:	f7fa fa56 	bl	8000586 <GPIO_PinAFConfig>

	RCC_APB2PeriphResetCmd(LCD_SPI_RCC,ENABLE);
 80060da:	2101      	movs	r1, #1
 80060dc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80060e0:	f7fa fb88 	bl	80007f4 <RCC_APB2PeriphResetCmd>
	RCC_APB2PeriphResetCmd(LCD_SPI_RCC,DISABLE);
 80060e4:	2100      	movs	r1, #0
 80060e6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80060ea:	f7fa fb83 	bl	80007f4 <RCC_APB2PeriphResetCmd>

	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80060ee:	2300      	movs	r3, #0
 80060f0:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80060f2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80060f6:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 80060f8:	2300      	movs	r3, #0
 80060fa:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 80060fc:	2300      	movs	r3, #0
 80060fe:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8006100:	2300      	movs	r3, #0
 8006102:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8006104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006108:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800610a:	2300      	movs	r3, #0
 800610c:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 800610e:	2300      	movs	r3, #0
 8006110:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8006112:	2307      	movs	r3, #7
 8006114:	82bb      	strh	r3, [r7, #20]
	SPI_Init(LCD_SPI, &SPI_InitStructure);
 8006116:	1d3b      	adds	r3, r7, #4
 8006118:	4619      	mov	r1, r3
 800611a:	4806      	ldr	r0, [pc, #24]	; (8006134 <SPI1_Init+0xb0>)
 800611c:	f7fa fb8a 	bl	8000834 <SPI_Init>
 
	SPI_Cmd(LCD_SPI, ENABLE);
 8006120:	2101      	movs	r1, #1
 8006122:	4804      	ldr	r0, [pc, #16]	; (8006134 <SPI1_Init+0xb0>)
 8006124:	f7fa fbca 	bl	80008bc <SPI_Cmd>
	
	
}
 8006128:	bf00      	nop
 800612a:	3720      	adds	r7, #32
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	40020400 	.word	0x40020400
 8006134:	40013000 	.word	0x40013000

08006138 <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
 8006144:	4613      	mov	r3, r2
 8006146:	803b      	strh	r3, [r7, #0]
    while (size--) {
 8006148:	e004      	b.n	8006154 <memsetl+0x1c>
        *dst++ = value;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	78fa      	ldrb	r2, [r7, #3]
 8006152:	701a      	strb	r2, [r3, #0]
    while (size--) {
 8006154:	883b      	ldrh	r3, [r7, #0]
 8006156:	1e5a      	subs	r2, r3, #1
 8006158:	803a      	strh	r2, [r7, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1f5      	bne.n	800614a <memsetl+0x12>
    }    
}
 800615e:	bf00      	nop
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <valveInit>:
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

/******************************************************************************/
void valveInit(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GpioInitStruct;

	RCC_AHB1PeriphClockCmd(VALVE_1_RCC|VALVE_2_RCC, ENABLE);
 8006172:	2101      	movs	r1, #1
 8006174:	2004      	movs	r0, #4
 8006176:	f7fa fafd 	bl	8000774 <RCC_AHB1PeriphClockCmd>
	GpioInitStruct.GPIO_Mode = GPIO_Mode_OUT;
 800617a:	2301      	movs	r3, #1
 800617c:	713b      	strb	r3, [r7, #4]
	GpioInitStruct.GPIO_OType = GPIO_OType_PP;
 800617e:	2300      	movs	r3, #0
 8006180:	71bb      	strb	r3, [r7, #6]
	GpioInitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8006182:	2302      	movs	r3, #2
 8006184:	71fb      	strb	r3, [r7, #7]
	GpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8006186:	2302      	movs	r3, #2
 8006188:	717b      	strb	r3, [r7, #5]

	GpioInitStruct.GPIO_Pin = VALVE_1_PIN;
 800618a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800618e:	603b      	str	r3, [r7, #0]
	GPIO_Init(VALVE_1_PORT, &GpioInitStruct);
 8006190:	463b      	mov	r3, r7
 8006192:	4619      	mov	r1, r3
 8006194:	4807      	ldr	r0, [pc, #28]	; (80061b4 <valveInit+0x48>)
 8006196:	f7fa f92f 	bl	80003f8 <GPIO_Init>

	GpioInitStruct.GPIO_Pin = VALVE_2_PIN;
 800619a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800619e:	603b      	str	r3, [r7, #0]
	GPIO_Init(VALVE_2_PORT, &GpioInitStruct);
 80061a0:	463b      	mov	r3, r7
 80061a2:	4619      	mov	r1, r3
 80061a4:	4803      	ldr	r0, [pc, #12]	; (80061b4 <valveInit+0x48>)
 80061a6:	f7fa f927 	bl	80003f8 <GPIO_Init>

}
 80061aa:	bf00      	nop
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	40020800 	.word	0x40020800

080061b8 <valveControl>:
/*
 * state: DOWN(1),UP(0)
 * valve: VALVE1,VALVE2
 */
void valveControl(uint8_t state,uint8_t valveNumber)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	4603      	mov	r3, r0
 80061c0:	460a      	mov	r2, r1
 80061c2:	71fb      	strb	r3, [r7, #7]
 80061c4:	4613      	mov	r3, r2
 80061c6:	71bb      	strb	r3, [r7, #6]
	if(valveNumber == VALVE_NUM_1)
 80061c8:	79bb      	ldrb	r3, [r7, #6]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d113      	bne.n	80061f6 <valveControl+0x3e>
	{
		if(state == PISTON_PUSH_DOWN)
 80061ce:	79fb      	ldrb	r3, [r7, #7]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d108      	bne.n	80061e6 <valveControl+0x2e>
		{
			g_stateValve_1 = PISTON_PUSH_DOWN;
 80061d4:	4b15      	ldr	r3, [pc, #84]	; (800622c <valveControl+0x74>)
 80061d6:	2201      	movs	r2, #1
 80061d8:	701a      	strb	r2, [r3, #0]
			GPIO_SetBits(VALVE_1_PORT, VALVE_1_PIN);
 80061da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061de:	4814      	ldr	r0, [pc, #80]	; (8006230 <valveControl+0x78>)
 80061e0:	f7fa f9b3 	bl	800054a <GPIO_SetBits>
 80061e4:	e007      	b.n	80061f6 <valveControl+0x3e>
		}else
		{
			g_stateValve_1 = PISTON_PUSH_UP;
 80061e6:	4b11      	ldr	r3, [pc, #68]	; (800622c <valveControl+0x74>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	701a      	strb	r2, [r3, #0]
			GPIO_ResetBits(VALVE_1_PORT, VALVE_1_PIN);
 80061ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061f0:	480f      	ldr	r0, [pc, #60]	; (8006230 <valveControl+0x78>)
 80061f2:	f7fa f9b9 	bl	8000568 <GPIO_ResetBits>
		}
	}
	if(valveNumber == VALVE_NUM_2)
 80061f6:	79bb      	ldrb	r3, [r7, #6]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d113      	bne.n	8006224 <valveControl+0x6c>
	{
		if(state == PISTON_PUSH_DOWN)
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d108      	bne.n	8006214 <valveControl+0x5c>
		{
			g_stateValve_2 = PISTON_PUSH_DOWN;
 8006202:	4b0c      	ldr	r3, [pc, #48]	; (8006234 <valveControl+0x7c>)
 8006204:	2201      	movs	r2, #1
 8006206:	701a      	strb	r2, [r3, #0]
			GPIO_SetBits(VALVE_2_PORT, VALVE_2_PIN);
 8006208:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800620c:	4808      	ldr	r0, [pc, #32]	; (8006230 <valveControl+0x78>)
 800620e:	f7fa f99c 	bl	800054a <GPIO_SetBits>
		{
			g_stateValve_2 = PISTON_PUSH_UP;
			GPIO_ResetBits(VALVE_2_PORT, VALVE_2_PIN);
		}
	}
}
 8006212:	e007      	b.n	8006224 <valveControl+0x6c>
			g_stateValve_2 = PISTON_PUSH_UP;
 8006214:	4b07      	ldr	r3, [pc, #28]	; (8006234 <valveControl+0x7c>)
 8006216:	2200      	movs	r2, #0
 8006218:	701a      	strb	r2, [r3, #0]
			GPIO_ResetBits(VALVE_2_PORT, VALVE_2_PIN);
 800621a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800621e:	4804      	ldr	r0, [pc, #16]	; (8006230 <valveControl+0x78>)
 8006220:	f7fa f9a2 	bl	8000568 <GPIO_ResetBits>
}
 8006224:	bf00      	nop
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	2000032a 	.word	0x2000032a
 8006230:	40020800 	.word	0x40020800
 8006234:	2000032b 	.word	0x2000032b

08006238 <GetStateValve>:
u8 GetStateValve(void)
{
 8006238:	b480      	push	{r7}
 800623a:	af00      	add	r7, sp, #0
	return g_stateValve_1;
 800623c:	4b03      	ldr	r3, [pc, #12]	; (800624c <GetStateValve+0x14>)
 800623e:	781b      	ldrb	r3, [r3, #0]
}
 8006240:	4618      	mov	r0, r3
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	2000032a 	.word	0x2000032a

08006250 <dwCalculatorTime>:
#include "sys.h"
#include "timer.h"
#include "delay.h"

uint32_t dwCalculatorTime(uint32_t dwTimeInit,uint32_t dwTimeCurrent)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
	if(dwTimeCurrent >= dwTimeInit)
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	429a      	cmp	r2, r3
 8006260:	d303      	bcc.n	800626a <dwCalculatorTime+0x1a>
	{
		return (dwTimeCurrent - dwTimeInit);
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	e003      	b.n	8006272 <dwCalculatorTime+0x22>
	}else
	{
		return (0xFFFFFFFF + dwTimeCurrent - dwTimeInit);
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	3b01      	subs	r3, #1
	}
}
 8006272:	4618      	mov	r0, r3
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <delay_ms>:
void delay_ms(u32 nms)
{	 	 
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
	uint32_t dwTimeInit = GetMilSecTick();
 8006286:	f7ff fceb 	bl	8005c60 <GetMilSecTick>
 800628a:	60f8      	str	r0, [r7, #12]
	uint32_t dwTimeCurrent = 0;
 800628c:	2300      	movs	r3, #0
 800628e:	60bb      	str	r3, [r7, #8]

	do{
		dwTimeCurrent = GetMilSecTick();
 8006290:	f7ff fce6 	bl	8005c60 <GetMilSecTick>
 8006294:	60b8      	str	r0, [r7, #8]
	}
	while(dwCalculatorTime(dwTimeInit, dwTimeCurrent)<nms);
 8006296:	68b9      	ldr	r1, [r7, #8]
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f7ff ffd9 	bl	8006250 <dwCalculatorTime>
 800629e:	4602      	mov	r2, r0
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d8f4      	bhi.n	8006290 <delay_ms+0x12>
}
 80062a6:	bf00      	nop
 80062a8:	bf00      	nop
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <main>:

/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/
int main(void)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	af00      	add	r7, sp, #0
	static DeviceState_e DeviceStateTemp_e = ERROR_DEVICE;
	appInitCommon();
 80062b4:	f000 f816 	bl	80062e4 <appInitCommon>

    /* Loop forever */
	while(1)
	{
		appStateManager();
 80062b8:	f000 f8a8 	bl	800640c <appStateManager>
		if(DeviceStateTemp_e != eDeviceState)
 80062bc:	4b07      	ldr	r3, [pc, #28]	; (80062dc <main+0x2c>)
 80062be:	781a      	ldrb	r2, [r3, #0]
 80062c0:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <main+0x30>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d0f7      	beq.n	80062b8 <main+0x8>
		{
			DeviceStateTemp_e = eDeviceState;
 80062c8:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <main+0x30>)
 80062ca:	781a      	ldrb	r2, [r3, #0]
 80062cc:	4b03      	ldr	r3, [pc, #12]	; (80062dc <main+0x2c>)
 80062ce:	701a      	strb	r2, [r3, #0]
			controlLed(eDeviceState);
 80062d0:	4b03      	ldr	r3, [pc, #12]	; (80062e0 <main+0x30>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fd fb7b 	bl	80039d0 <controlLed>
		appStateManager();
 80062da:	e7ed      	b.n	80062b8 <main+0x8>
 80062dc:	20000090 	.word	0x20000090
 80062e0:	20000341 	.word	0x20000341

080062e4 <appInitCommon>:
 * @param  None
 * @retval None
 */

static void appInitCommon(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0
	SystemCoreClockUpdate();
 80062e8:	f7f9 ffb2 	bl	8000250 <SystemCoreClockUpdate>
	buttonInit();
 80062ec:	f7fa fc56 	bl	8000b9c <buttonInit>
	proximitySensorInit();
 80062f0:	f7ff fcea 	bl	8005cc8 <proximitySensorInit>
	//currentSensorInit();
	valveInit();
 80062f4:	f7ff ff3a 	bl	800616c <valveInit>
	ledInit();
 80062f8:	f7fd fbb6 	bl	8003a68 <ledInit>
	TimerInit();
 80062fc:	f7ff fc8e 	bl	8005c1c <TimerInit>
	LCD_Init();
 8006300:	f7fd f982 	bl	8003608 <LCD_Init>
	LCD_direction(1);
 8006304:	2001      	movs	r0, #1
 8006306:	f7fd fb0f 	bl	8003928 <LCD_direction>
	eCurrentState = STATE_APP_STARTUP;
 800630a:	4b0e      	ldr	r3, [pc, #56]	; (8006344 <appInitCommon+0x60>)
 800630c:	2200      	movs	r2, #0
 800630e:	701a      	strb	r2, [r3, #0]
	updateDataStopHandleCallBack(UpDateData);
 8006310:	480d      	ldr	r0, [pc, #52]	; (8006348 <appInitCommon+0x64>)
 8006312:	f7fd fbd9 	bl	8003ac8 <updateDataStopHandleCallBack>
	updateDataRunHandleCallBack(UpDateData);
 8006316:	480c      	ldr	r0, [pc, #48]	; (8006348 <appInitCommon+0x64>)
 8006318:	f7ff fd2e 	bl	8005d78 <updateDataRunHandleCallBack>
	FLASH_Init();
 800631c:	f7fb fa40 	bl	80017a0 <FLASH_Init>
	Data_Rx = FLASH_GetUserData();
 8006320:	f7fb fa78 	bl	8001814 <FLASH_GetUserData>
 8006324:	4603      	mov	r3, r0
 8006326:	4a09      	ldr	r2, [pc, #36]	; (800634c <appInitCommon+0x68>)
 8006328:	6013      	str	r3, [r2, #0]
	g_dwCountMax = Data_Rx->countMax;
 800632a:	4b08      	ldr	r3, [pc, #32]	; (800634c <appInitCommon+0x68>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	4a07      	ldr	r2, [pc, #28]	; (8006350 <appInitCommon+0x6c>)
 8006332:	6013      	str	r3, [r2, #0]
	g_dwThold = Data_Rx->tHold;
 8006334:	4b05      	ldr	r3, [pc, #20]	; (800634c <appInitCommon+0x68>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	4a06      	ldr	r2, [pc, #24]	; (8006354 <appInitCommon+0x70>)
 800633c:	6013      	str	r3, [r2, #0]

	//Gui_Drawbmp16(0,0,gImage_logo);
}
 800633e:	bf00      	nop
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	20000340 	.word	0x20000340
 8006348:	08006391 	.word	0x08006391
 800634c:	20000344 	.word	0x20000344
 8006350:	2000032c 	.word	0x2000032c
 8006354:	2000033c 	.word	0x2000033c

08006358 <setStateApp>:
 * @param  state: State of application
 * @retval None
 */

static void setStateApp(StateApp_e state)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	4603      	mov	r3, r0
 8006360:	71fb      	strb	r3, [r7, #7]
	eCurrentState = state;
 8006362:	4a04      	ldr	r2, [pc, #16]	; (8006374 <setStateApp+0x1c>)
 8006364:	79fb      	ldrb	r3, [r7, #7]
 8006366:	7013      	strb	r3, [r2, #0]
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	20000340 	.word	0x20000340

08006378 <getStateApp>:
 * @brief  Get state of application
 * @param  None
 * @retval State of application
 */
static StateApp_e getStateApp(void)
{
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0
	return eCurrentState;
 800637c:	4b03      	ldr	r3, [pc, #12]	; (800638c <getStateApp+0x14>)
 800637e:	781b      	ldrb	r3, [r3, #0]
}
 8006380:	4618      	mov	r0, r3
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	20000340 	.word	0x20000340

08006390 <UpDateData>:
 * @brief  Manager state application
 * @param  event: Su kien
 * @retval None
 */
static void UpDateData(void*arg)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
	Data_t pData = (Data_t)arg;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	60fb      	str	r3, [r7, #12]
	switch(pData->deviceState)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00a      	beq.n	80063ba <UpDateData+0x2a>
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d122      	bne.n	80063ee <UpDateData+0x5e>
	{
	case RUN:
		g_dwCountMiss = pData->dwCountMiss;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	4a12      	ldr	r2, [pc, #72]	; (80063f8 <UpDateData+0x68>)
 80063ae:	6013      	str	r3, [r2, #0]
		g_dwCounting = pData->dwCounting;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	4a11      	ldr	r2, [pc, #68]	; (80063fc <UpDateData+0x6c>)
 80063b6:	6013      	str	r3, [r2, #0]
		break;
 80063b8:	e01a      	b.n	80063f0 <UpDateData+0x60>
	case STOP:
		g_dwCountMax = pData->dwCountMax;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	4a10      	ldr	r2, [pc, #64]	; (8006400 <UpDateData+0x70>)
 80063c0:	6013      	str	r3, [r2, #0]
		g_dwThold = pData->dwThold;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	4a0f      	ldr	r2, [pc, #60]	; (8006404 <UpDateData+0x74>)
 80063c8:	6013      	str	r3, [r2, #0]

		Data_Rx->countMax = g_dwCountMax;
 80063ca:	4b0f      	ldr	r3, [pc, #60]	; (8006408 <UpDateData+0x78>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a0c      	ldr	r2, [pc, #48]	; (8006400 <UpDateData+0x70>)
 80063d0:	6812      	ldr	r2, [r2, #0]
 80063d2:	605a      	str	r2, [r3, #4]
		Data_Rx->tHold = g_dwThold;
 80063d4:	4b0c      	ldr	r3, [pc, #48]	; (8006408 <UpDateData+0x78>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a0a      	ldr	r2, [pc, #40]	; (8006404 <UpDateData+0x74>)
 80063da:	6812      	ldr	r2, [r2, #0]
 80063dc:	609a      	str	r2, [r3, #8]
		Data_Rx->Used = FLASH_USERDATA_VALID;
 80063de:	4b0a      	ldr	r3, [pc, #40]	; (8006408 <UpDateData+0x78>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f04f 325a 	mov.w	r2, #1515870810	; 0x5a5a5a5a
 80063e6:	601a      	str	r2, [r3, #0]

		FLASH_RamToFlash();
 80063e8:	f7fb fa08 	bl	80017fc <FLASH_RamToFlash>

		break;
 80063ec:	e000      	b.n	80063f0 <UpDateData+0x60>
	default:
		break;
 80063ee:	bf00      	nop
	}

}
 80063f0:	bf00      	nop
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	20000338 	.word	0x20000338
 80063fc:	20000330 	.word	0x20000330
 8006400:	2000032c 	.word	0x2000032c
 8006404:	2000033c 	.word	0x2000033c
 8006408:	20000344 	.word	0x20000344

0800640c <appStateManager>:
static void appStateManager(void)
{
 800640c:	b590      	push	{r4, r7, lr}
 800640e:	b087      	sub	sp, #28
 8006410:	af04      	add	r7, sp, #16
	StateApp_e event = getStateApp();
 8006412:	f7ff ffb1 	bl	8006378 <getStateApp>
 8006416:	4603      	mov	r3, r0
 8006418:	71fb      	strb	r3, [r7, #7]
	switch(event)
 800641a:	79fb      	ldrb	r3, [r7, #7]
 800641c:	2b02      	cmp	r3, #2
 800641e:	f000 80d7 	beq.w	80065d0 <appStateManager+0x1c4>
 8006422:	2b02      	cmp	r3, #2
 8006424:	f300 80d8 	bgt.w	80065d8 <appStateManager+0x1cc>
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <appStateManager+0x28>
 800642c:	2b01      	cmp	r3, #1
 800642e:	f000 80ab 	beq.w	8006588 <appStateManager+0x17c>
		break;
	case STATE_APP_RESET:
		setStateApp(STATE_APP_STARTUP);
		break;
	default:
		break;
 8006432:	e0d1      	b.n	80065d8 <appStateManager+0x1cc>
		switch(eDeviceState)
 8006434:	4b6c      	ldr	r3, [pc, #432]	; (80065e8 <appStateManager+0x1dc>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b03      	cmp	r3, #3
 800643a:	f200 80cf 	bhi.w	80065dc <appStateManager+0x1d0>
 800643e:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <appStateManager+0x38>)
 8006440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006444:	08006563 	.word	0x08006563
 8006448:	08006455 	.word	0x08006455
 800644c:	08006505 	.word	0x08006505
 8006450:	08006491 	.word	0x08006491
			LCD_ClearCursor(20, 210, 320, 240, WHITE);
 8006454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	23f0      	movs	r3, #240	; 0xf0
 800645c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006460:	21d2      	movs	r1, #210	; 0xd2
 8006462:	2014      	movs	r0, #20
 8006464:	f7fd f848 	bl	80034f8 <LCD_ClearCursor>
			Gui_StrCenter(20, 210, BLACK, WHITE, (u8*)"ERROR", 16, 1);
 8006468:	2301      	movs	r3, #1
 800646a:	9302      	str	r3, [sp, #8]
 800646c:	2310      	movs	r3, #16
 800646e:	9301      	str	r3, [sp, #4]
 8006470:	4b5e      	ldr	r3, [pc, #376]	; (80065ec <appStateManager+0x1e0>)
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006478:	2200      	movs	r2, #0
 800647a:	21d2      	movs	r1, #210	; 0xd2
 800647c:	2014      	movs	r0, #20
 800647e:	f7fc ff15 	bl	80032ac <Gui_StrCenter>
			while(proKey()==0);
 8006482:	bf00      	nop
 8006484:	f000 f8c2 	bl	800660c <proKey>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d0fa      	beq.n	8006484 <appStateManager+0x78>
			break;
 800648e:	e07a      	b.n	8006586 <appStateManager+0x17a>
			HMI(g_dwCountMax,g_dwCounting,g_dwCountMiss,g_dwThold,1);
 8006490:	4b57      	ldr	r3, [pc, #348]	; (80065f0 <appStateManager+0x1e4>)
 8006492:	6818      	ldr	r0, [r3, #0]
 8006494:	4b57      	ldr	r3, [pc, #348]	; (80065f4 <appStateManager+0x1e8>)
 8006496:	6819      	ldr	r1, [r3, #0]
 8006498:	4b57      	ldr	r3, [pc, #348]	; (80065f8 <appStateManager+0x1ec>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	4b57      	ldr	r3, [pc, #348]	; (80065fc <appStateManager+0x1f0>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2401      	movs	r4, #1
 80064a2:	9400      	str	r4, [sp, #0]
 80064a4:	f7fd fb20 	bl	8003ae8 <HMI>
			HMI(g_dwCountMax,g_dwCounting,g_dwCountMiss,g_dwThold,0);
 80064a8:	4b51      	ldr	r3, [pc, #324]	; (80065f0 <appStateManager+0x1e4>)
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	4b51      	ldr	r3, [pc, #324]	; (80065f4 <appStateManager+0x1e8>)
 80064ae:	6819      	ldr	r1, [r3, #0]
 80064b0:	4b51      	ldr	r3, [pc, #324]	; (80065f8 <appStateManager+0x1ec>)
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	4b51      	ldr	r3, [pc, #324]	; (80065fc <appStateManager+0x1f0>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2400      	movs	r4, #0
 80064ba:	9400      	str	r4, [sp, #0]
 80064bc:	f7fd fb14 	bl	8003ae8 <HMI>
			LCD_ClearCursor(20, 210, 320, 240, WHITE);
 80064c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	23f0      	movs	r3, #240	; 0xf0
 80064c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80064cc:	21d2      	movs	r1, #210	; 0xd2
 80064ce:	2014      	movs	r0, #20
 80064d0:	f7fd f812 	bl	80034f8 <LCD_ClearCursor>
			Gui_StrCenter(20, 210, BLACK, WHITE, (u8*)"PAUSE", 16, 1);
 80064d4:	2301      	movs	r3, #1
 80064d6:	9302      	str	r3, [sp, #8]
 80064d8:	2310      	movs	r3, #16
 80064da:	9301      	str	r3, [sp, #4]
 80064dc:	4b48      	ldr	r3, [pc, #288]	; (8006600 <appStateManager+0x1f4>)
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064e4:	2200      	movs	r2, #0
 80064e6:	21d2      	movs	r1, #210	; 0xd2
 80064e8:	2014      	movs	r0, #20
 80064ea:	f7fc fedf 	bl	80032ac <Gui_StrCenter>
			valveControl(PISTON_PUSH_UP, VALVE_NUM_1);
 80064ee:	2100      	movs	r1, #0
 80064f0:	2000      	movs	r0, #0
 80064f2:	f7ff fe61 	bl	80061b8 <valveControl>
			while(proKey() == 0);
 80064f6:	bf00      	nop
 80064f8:	f000 f888 	bl	800660c <proKey>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0fa      	beq.n	80064f8 <appStateManager+0xec>
			break;
 8006502:	e040      	b.n	8006586 <appStateManager+0x17a>
			LCD_ClearCursor(20, 210, 320, 240, WHITE);
 8006504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	23f0      	movs	r3, #240	; 0xf0
 800650c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006510:	21d2      	movs	r1, #210	; 0xd2
 8006512:	2014      	movs	r0, #20
 8006514:	f7fc fff0 	bl	80034f8 <LCD_ClearCursor>
			Gui_StrCenter(20, 210, BLACK, WHITE, (u8*)"RUN", 16, 1);
 8006518:	2301      	movs	r3, #1
 800651a:	9302      	str	r3, [sp, #8]
 800651c:	2310      	movs	r3, #16
 800651e:	9301      	str	r3, [sp, #4]
 8006520:	4b38      	ldr	r3, [pc, #224]	; (8006604 <appStateManager+0x1f8>)
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006528:	2200      	movs	r2, #0
 800652a:	21d2      	movs	r1, #210	; 0xd2
 800652c:	2014      	movs	r0, #20
 800652e:	f7fc febd 	bl	80032ac <Gui_StrCenter>
			HMI(g_dwCountMax,g_dwCounting,g_dwCountMiss,g_dwThold,1);
 8006532:	4b2f      	ldr	r3, [pc, #188]	; (80065f0 <appStateManager+0x1e4>)
 8006534:	6818      	ldr	r0, [r3, #0]
 8006536:	4b2f      	ldr	r3, [pc, #188]	; (80065f4 <appStateManager+0x1e8>)
 8006538:	6819      	ldr	r1, [r3, #0]
 800653a:	4b2f      	ldr	r3, [pc, #188]	; (80065f8 <appStateManager+0x1ec>)
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	4b2f      	ldr	r3, [pc, #188]	; (80065fc <appStateManager+0x1f0>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2401      	movs	r4, #1
 8006544:	9400      	str	r4, [sp, #0]
 8006546:	f7fd facf 	bl	8003ae8 <HMI>
			setCountValue(g_dwCountMax, g_dwThold);
 800654a:	4b29      	ldr	r3, [pc, #164]	; (80065f0 <appStateManager+0x1e4>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a2b      	ldr	r2, [pc, #172]	; (80065fc <appStateManager+0x1f0>)
 8006550:	6812      	ldr	r2, [r2, #0]
 8006552:	4611      	mov	r1, r2
 8006554:	4618      	mov	r0, r3
 8006556:	f7ff fc1f 	bl	8005d98 <setCountValue>
			setStateApp(STATE_APP_IDLE);
 800655a:	2001      	movs	r0, #1
 800655c:	f7ff fefc 	bl	8006358 <setStateApp>
			break;
 8006560:	e011      	b.n	8006586 <appStateManager+0x17a>
			while(processMainMenu(g_dwCountMax,g_dwCounting,g_dwCountMiss,g_dwThold)==0);
 8006562:	bf00      	nop
 8006564:	4b22      	ldr	r3, [pc, #136]	; (80065f0 <appStateManager+0x1e4>)
 8006566:	6818      	ldr	r0, [r3, #0]
 8006568:	4b22      	ldr	r3, [pc, #136]	; (80065f4 <appStateManager+0x1e8>)
 800656a:	6819      	ldr	r1, [r3, #0]
 800656c:	4b22      	ldr	r3, [pc, #136]	; (80065f8 <appStateManager+0x1ec>)
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	4b22      	ldr	r3, [pc, #136]	; (80065fc <appStateManager+0x1f0>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f7fd fc72 	bl	8003e5c <processMainMenu>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d0f2      	beq.n	8006564 <appStateManager+0x158>
			eDeviceState = PAUSE;
 800657e:	4b1a      	ldr	r3, [pc, #104]	; (80065e8 <appStateManager+0x1dc>)
 8006580:	2203      	movs	r2, #3
 8006582:	701a      	strb	r2, [r3, #0]
			break;
 8006584:	bf00      	nop
		break;
 8006586:	e029      	b.n	80065dc <appStateManager+0x1d0>
		if(byProcessSequenceControl()== 1)
 8006588:	f7ff fc1c 	bl	8005dc4 <byProcessSequenceControl>
 800658c:	4603      	mov	r3, r0
 800658e:	2b01      	cmp	r3, #1
 8006590:	d105      	bne.n	800659e <appStateManager+0x192>
			eDeviceState = PAUSE;
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <appStateManager+0x1dc>)
 8006594:	2203      	movs	r2, #3
 8006596:	701a      	strb	r2, [r3, #0]
			setStateApp(STATE_APP_STARTUP);
 8006598:	2000      	movs	r0, #0
 800659a:	f7ff fedd 	bl	8006358 <setStateApp>
		if(g_dwCounting !=g_dwCountingTemp)
 800659e:	4b15      	ldr	r3, [pc, #84]	; (80065f4 <appStateManager+0x1e8>)
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	4b19      	ldr	r3, [pc, #100]	; (8006608 <appStateManager+0x1fc>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d00f      	beq.n	80065ca <appStateManager+0x1be>
			g_dwCountingTemp = g_dwCounting;
 80065aa:	4b12      	ldr	r3, [pc, #72]	; (80065f4 <appStateManager+0x1e8>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a16      	ldr	r2, [pc, #88]	; (8006608 <appStateManager+0x1fc>)
 80065b0:	6013      	str	r3, [r2, #0]
			HMI(g_dwCountMax,g_dwCounting,g_dwCountMiss,g_dwThold,1);
 80065b2:	4b0f      	ldr	r3, [pc, #60]	; (80065f0 <appStateManager+0x1e4>)
 80065b4:	6818      	ldr	r0, [r3, #0]
 80065b6:	4b0f      	ldr	r3, [pc, #60]	; (80065f4 <appStateManager+0x1e8>)
 80065b8:	6819      	ldr	r1, [r3, #0]
 80065ba:	4b0f      	ldr	r3, [pc, #60]	; (80065f8 <appStateManager+0x1ec>)
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	4b0f      	ldr	r3, [pc, #60]	; (80065fc <appStateManager+0x1f0>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2401      	movs	r4, #1
 80065c4:	9400      	str	r4, [sp, #0]
 80065c6:	f7fd fa8f 	bl	8003ae8 <HMI>
		proKey();
 80065ca:	f000 f81f 	bl	800660c <proKey>
		break;
 80065ce:	e006      	b.n	80065de <appStateManager+0x1d2>
		setStateApp(STATE_APP_STARTUP);
 80065d0:	2000      	movs	r0, #0
 80065d2:	f7ff fec1 	bl	8006358 <setStateApp>
		break;
 80065d6:	e002      	b.n	80065de <appStateManager+0x1d2>
		break;
 80065d8:	bf00      	nop
 80065da:	e000      	b.n	80065de <appStateManager+0x1d2>
		break;
 80065dc:	bf00      	nop

	}
}
 80065de:	bf00      	nop
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd90      	pop	{r4, r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20000341 	.word	0x20000341
 80065ec:	08006838 	.word	0x08006838
 80065f0:	2000032c 	.word	0x2000032c
 80065f4:	20000330 	.word	0x20000330
 80065f8:	20000338 	.word	0x20000338
 80065fc:	2000033c 	.word	0x2000033c
 8006600:	08006840 	.word	0x08006840
 8006604:	08006848 	.word	0x08006848
 8006608:	20000334 	.word	0x20000334

0800660c <proKey>:
static u8 proKey(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
	ValueKey_e valueKeyTemp = NOKEY;
 8006612:	2300      	movs	r3, #0
 8006614:	71bb      	strb	r3, [r7, #6]
	u8 state = 0;
 8006616:	2300      	movs	r3, #0
 8006618:	71fb      	strb	r3, [r7, #7]
	valueKeyTemp = processEventButton();
 800661a:	f7fa fb13 	bl	8000c44 <processEventButton>
 800661e:	4603      	mov	r3, r0
 8006620:	71bb      	strb	r3, [r7, #6]
	if(valueKeyTemp == SELECT)
 8006622:	79bb      	ldrb	r3, [r7, #6]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d111      	bne.n	800664c <proKey+0x40>
	{
		setStateApp(STATE_APP_STARTUP);
 8006628:	2000      	movs	r0, #0
 800662a:	f7ff fe95 	bl	8006358 <setStateApp>
		if(eDeviceState == RUN)
 800662e:	4b0f      	ldr	r3, [pc, #60]	; (800666c <proKey+0x60>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	2b02      	cmp	r3, #2
 8006634:	d105      	bne.n	8006642 <proKey+0x36>
		{
			eDeviceState = PAUSE;
 8006636:	4b0d      	ldr	r3, [pc, #52]	; (800666c <proKey+0x60>)
 8006638:	2203      	movs	r2, #3
 800663a:	701a      	strb	r2, [r3, #0]
			state = 1;
 800663c:	2301      	movs	r3, #1
 800663e:	71fb      	strb	r3, [r7, #7]
 8006640:	e004      	b.n	800664c <proKey+0x40>
		}else
		{
		eDeviceState = RUN;
 8006642:	4b0a      	ldr	r3, [pc, #40]	; (800666c <proKey+0x60>)
 8006644:	2202      	movs	r2, #2
 8006646:	701a      	strb	r2, [r3, #0]
		state = 1;
 8006648:	2301      	movs	r3, #1
 800664a:	71fb      	strb	r3, [r7, #7]
		}

	}
	if(valueKeyTemp == RETURN)
 800664c:	79bb      	ldrb	r3, [r7, #6]
 800664e:	2b11      	cmp	r3, #17
 8006650:	d107      	bne.n	8006662 <proKey+0x56>
	{
		setStateApp(STATE_APP_STARTUP);
 8006652:	2000      	movs	r0, #0
 8006654:	f7ff fe80 	bl	8006358 <setStateApp>
		eDeviceState = STOP;
 8006658:	4b04      	ldr	r3, [pc, #16]	; (800666c <proKey+0x60>)
 800665a:	2200      	movs	r2, #0
 800665c:	701a      	strb	r2, [r3, #0]
		state = 1;
 800665e:	2301      	movs	r3, #1
 8006660:	71fb      	strb	r3, [r7, #7]
	}
	return state;
 8006662:	79fb      	ldrb	r3, [r7, #7]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	20000341 	.word	0x20000341

08006670 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006670:	480d      	ldr	r0, [pc, #52]	; (80066a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006672:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006674:	f7f9 fdb6 	bl	80001e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006678:	480c      	ldr	r0, [pc, #48]	; (80066ac <LoopForever+0x6>)
  ldr r1, =_edata
 800667a:	490d      	ldr	r1, [pc, #52]	; (80066b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800667c:	4a0d      	ldr	r2, [pc, #52]	; (80066b4 <LoopForever+0xe>)
  movs r3, #0
 800667e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006680:	e002      	b.n	8006688 <LoopCopyDataInit>

08006682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006686:	3304      	adds	r3, #4

08006688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800668a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800668c:	d3f9      	bcc.n	8006682 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800668e:	4a0a      	ldr	r2, [pc, #40]	; (80066b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006690:	4c0a      	ldr	r4, [pc, #40]	; (80066bc <LoopForever+0x16>)
  movs r3, #0
 8006692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006694:	e001      	b.n	800669a <LoopFillZerobss>

08006696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006698:	3204      	adds	r2, #4

0800669a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800669a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800669c:	d3fb      	bcc.n	8006696 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800669e:	f000 f811 	bl	80066c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80066a2:	f7ff fe05 	bl	80062b0 <main>

080066a6 <LoopForever>:

LoopForever:
    b LoopForever
 80066a6:	e7fe      	b.n	80066a6 <LoopForever>
  ldr   r0, =_estack
 80066a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80066ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80066b0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80066b4:	08007f04 	.word	0x08007f04
  ldr r2, =_sbss
 80066b8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80066bc:	20000348 	.word	0x20000348

080066c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80066c0:	e7fe      	b.n	80066c0 <ADC_IRQHandler>
	...

080066c4 <__libc_init_array>:
 80066c4:	b570      	push	{r4, r5, r6, lr}
 80066c6:	4d0d      	ldr	r5, [pc, #52]	; (80066fc <__libc_init_array+0x38>)
 80066c8:	4c0d      	ldr	r4, [pc, #52]	; (8006700 <__libc_init_array+0x3c>)
 80066ca:	1b64      	subs	r4, r4, r5
 80066cc:	10a4      	asrs	r4, r4, #2
 80066ce:	2600      	movs	r6, #0
 80066d0:	42a6      	cmp	r6, r4
 80066d2:	d109      	bne.n	80066e8 <__libc_init_array+0x24>
 80066d4:	4d0b      	ldr	r5, [pc, #44]	; (8006704 <__libc_init_array+0x40>)
 80066d6:	4c0c      	ldr	r4, [pc, #48]	; (8006708 <__libc_init_array+0x44>)
 80066d8:	f000 f830 	bl	800673c <_init>
 80066dc:	1b64      	subs	r4, r4, r5
 80066de:	10a4      	asrs	r4, r4, #2
 80066e0:	2600      	movs	r6, #0
 80066e2:	42a6      	cmp	r6, r4
 80066e4:	d105      	bne.n	80066f2 <__libc_init_array+0x2e>
 80066e6:	bd70      	pop	{r4, r5, r6, pc}
 80066e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ec:	4798      	blx	r3
 80066ee:	3601      	adds	r6, #1
 80066f0:	e7ee      	b.n	80066d0 <__libc_init_array+0xc>
 80066f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f6:	4798      	blx	r3
 80066f8:	3601      	adds	r6, #1
 80066fa:	e7f2      	b.n	80066e2 <__libc_init_array+0x1e>
 80066fc:	08007efc 	.word	0x08007efc
 8006700:	08007efc 	.word	0x08007efc
 8006704:	08007efc 	.word	0x08007efc
 8006708:	08007f00 	.word	0x08007f00

0800670c <memcmp>:
 800670c:	b510      	push	{r4, lr}
 800670e:	3901      	subs	r1, #1
 8006710:	4402      	add	r2, r0
 8006712:	4290      	cmp	r0, r2
 8006714:	d101      	bne.n	800671a <memcmp+0xe>
 8006716:	2000      	movs	r0, #0
 8006718:	e005      	b.n	8006726 <memcmp+0x1a>
 800671a:	7803      	ldrb	r3, [r0, #0]
 800671c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006720:	42a3      	cmp	r3, r4
 8006722:	d001      	beq.n	8006728 <memcmp+0x1c>
 8006724:	1b18      	subs	r0, r3, r4
 8006726:	bd10      	pop	{r4, pc}
 8006728:	3001      	adds	r0, #1
 800672a:	e7f2      	b.n	8006712 <memcmp+0x6>

0800672c <memset>:
 800672c:	4402      	add	r2, r0
 800672e:	4603      	mov	r3, r0
 8006730:	4293      	cmp	r3, r2
 8006732:	d100      	bne.n	8006736 <memset+0xa>
 8006734:	4770      	bx	lr
 8006736:	f803 1b01 	strb.w	r1, [r3], #1
 800673a:	e7f9      	b.n	8006730 <memset+0x4>

0800673c <_init>:
 800673c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673e:	bf00      	nop
 8006740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006742:	bc08      	pop	{r3}
 8006744:	469e      	mov	lr, r3
 8006746:	4770      	bx	lr

08006748 <_fini>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	bf00      	nop
 800674c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674e:	bc08      	pop	{r3}
 8006750:	469e      	mov	lr, r3
 8006752:	4770      	bx	lr
